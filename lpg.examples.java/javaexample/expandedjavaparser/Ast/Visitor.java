//
// A copyright notice must contain a "C" enclosed in parentheses: (C) 
//

package expandedjavaparser.Ast;

public interface Visitor
{
    void visit(AstToken n);
    void visit(IntegerLiteral n);
    void visit(LongLiteral n);
    void visit(FloatLiteral n);
    void visit(DoubleLiteral n);
    void visit(BooleanLiteral n);
    void visit(CharacterLiteral n);
    void visit(StringLiteral n);
    void visit(NullLiteral n);
    void visit(TrueLiteral n);
    void visit(FalseLiteral n);
    void visit(BooleanType n);
    void visit(ByteType n);
    void visit(ShortType n);
    void visit(IntType n);
    void visit(LongType n);
    void visit(CharType n);
    void visit(FloatType n);
    void visit(DoubleType n);
    void visit(PrimitiveArrayType n);
    void visit(ClassOrInterfaceArrayType n);
    void visit(SimpleName n);
    void visit(QualifiedName n);
    void visit(CompilationUnit n);
    void visit(ImportDeclarationList n);
    void visit(TypeDeclarationList n);
    void visit(PackageDeclaration n);
    void visit(SingleTypeImportDeclaration n);
    void visit(TypeImportOnDemandDeclaration n);
    void visit(EmptyDeclaration n);
    void visit(ModifierList n);
    void visit(PublicModifier n);
    void visit(ProtectedModifier n);
    void visit(PrivateModifier n);
    void visit(StaticModifier n);
    void visit(AbstractModifier n);
    void visit(FinalModifier n);
    void visit(NativeModifier n);
    void visit(StrictfpModifier n);
    void visit(SynchronizedModifier n);
    void visit(TransientModifier n);
    void visit(VolatileModifier n);
    void visit(ClassDeclaration n);
    void visit(Super n);
    void visit(InterfaceTypeList n);
    void visit(ClassBody n);
    void visit(ClassBodyDeclarationList n);
    void visit(FieldDeclaration n);
    void visit(VariableDeclaratorList n);
    void visit(VariableDeclarator n);
    void visit(VariableDeclaratorId n);
    void visit(MethodDeclaration n);
    void visit(TypedMethodHeader n);
    void visit(VoidMethodHeader n);
    void visit(MethodDeclarator n);
    void visit(FormalParameterList n);
    void visit(FormalParameter n);
    void visit(ClassTypeList n);
    void visit(EmptyMethodBody n);
    void visit(StaticInitializer n);
    void visit(ConstructorDeclaration n);
    void visit(ConstructorDeclarator n);
    void visit(ConstructorBody n);
    void visit(ThisCall n);
    void visit(SuperCall n);
    void visit(InterfaceDeclaration n);
    void visit(InterfaceBody n);
    void visit(InterfaceMemberDeclarationList n);
    void visit(AbstractMethodDeclaration n);
    void visit(ArrayInitializer n);
    void visit(VariableInitializerList n);
    void visit(Block n);
    void visit(BlockStatementList n);
    void visit(LocalVariableDeclarationStatement n);
    void visit(LocalVariableDeclaration n);
    void visit(EmptyStatement n);
    void visit(LabeledStatement n);
    void visit(ExpressionStatement n);
    void visit(IfStatement n);
    void visit(SwitchStatement n);
    void visit(SwitchBlock n);
    void visit(SwitchBlockStatementList n);
    void visit(SwitchBlockStatement n);
    void visit(SwitchLabelList n);
    void visit(CaseLabel n);
    void visit(DefaultLabel n);
    void visit(WhileStatement n);
    void visit(DoStatement n);
    void visit(ForStatement n);
    void visit(StatementExpressionList n);
    void visit(BreakStatement n);
    void visit(ContinueStatement n);
    void visit(ReturnStatement n);
    void visit(ThrowStatement n);
    void visit(SynchronizedStatement n);
    void visit(TryStatement n);
    void visit(CatchClauseList n);
    void visit(CatchClause n);
    void visit(Finally n);
    void visit(ParenthesizedExpression n);
    void visit(PrimaryThis n);
    void visit(PrimaryClassLiteral n);
    void visit(PrimaryVoidClassLiteral n);
    void visit(ClassInstanceCreationExpression n);
    void visit(ExpressionList n);
    void visit(ArrayCreationExpression n);
    void visit(DimExprList n);
    void visit(DimExpr n);
    void visit(DimList n);
    void visit(Dim n);
    void visit(FieldAccess n);
    void visit(SuperFieldAccess n);
    void visit(MethodInvocation n);
    void visit(PrimaryMethodInvocation n);
    void visit(SuperMethodInvocation n);
    void visit(ArrayAccess n);
    void visit(PostIncrementExpression n);
    void visit(PostDecrementExpression n);
    void visit(PlusUnaryExpression n);
    void visit(MinusUnaryExpression n);
    void visit(PreIncrementExpression n);
    void visit(PreDecrementExpression n);
    void visit(UnaryComplementExpression n);
    void visit(UnaryNotExpression n);
    void visit(PrimitiveCastExpression n);
    void visit(ClassCastExpression n);
    void visit(MultiplyExpression n);
    void visit(DivideExpression n);
    void visit(ModExpression n);
    void visit(AddExpression n);
    void visit(SubtractExpression n);
    void visit(LeftShiftExpression n);
    void visit(RightShiftExpression n);
    void visit(UnsignedRightShiftExpression n);
    void visit(LessExpression n);
    void visit(GreaterExpression n);
    void visit(LessEqualExpression n);
    void visit(GreaterEqualExpression n);
    void visit(InstanceofExpression n);
    void visit(EqualExpression n);
    void visit(NotEqualExpression n);
    void visit(AndExpression n);
    void visit(ExclusiveOrExpression n);
    void visit(InclusiveOrExpression n);
    void visit(ConditionalAndExpression n);
    void visit(ConditionalOrExpression n);
    void visit(ConditionalExpression n);
    void visit(Assignment n);
    void visit(EqualOperator n);
    void visit(MultiplyEqualOperator n);
    void visit(DivideEqualOperator n);
    void visit(ModEqualOperator n);
    void visit(PlusEqualOperator n);
    void visit(MinusEqualOperator n);
    void visit(LeftShiftEqualOperator n);
    void visit(RightShiftEqualOperator n);
    void visit(UnsignedRightShiftEqualOperator n);
    void visit(AndEqualOperator n);
    void visit(ExclusiveOrEqualOperator n);
    void visit(OrEqualOperator n);
    void visit(Commaopt n);
    void visit(IDENTIFIERopt n);
}

