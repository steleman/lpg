//
// A copyright notice must contain a "C" enclosed in parentheses: (C) 
//

package expandedjavaparser.Ast;

public interface ArgumentVisitor
{
    void visit(AstToken n, Object o);
    void visit(IntegerLiteral n, Object o);
    void visit(LongLiteral n, Object o);
    void visit(FloatLiteral n, Object o);
    void visit(DoubleLiteral n, Object o);
    void visit(BooleanLiteral n, Object o);
    void visit(CharacterLiteral n, Object o);
    void visit(StringLiteral n, Object o);
    void visit(NullLiteral n, Object o);
    void visit(TrueLiteral n, Object o);
    void visit(FalseLiteral n, Object o);
    void visit(BooleanType n, Object o);
    void visit(ByteType n, Object o);
    void visit(ShortType n, Object o);
    void visit(IntType n, Object o);
    void visit(LongType n, Object o);
    void visit(CharType n, Object o);
    void visit(FloatType n, Object o);
    void visit(DoubleType n, Object o);
    void visit(PrimitiveArrayType n, Object o);
    void visit(ClassOrInterfaceArrayType n, Object o);
    void visit(SimpleName n, Object o);
    void visit(QualifiedName n, Object o);
    void visit(CompilationUnit n, Object o);
    void visit(ImportDeclarationList n, Object o);
    void visit(TypeDeclarationList n, Object o);
    void visit(PackageDeclaration n, Object o);
    void visit(SingleTypeImportDeclaration n, Object o);
    void visit(TypeImportOnDemandDeclaration n, Object o);
    void visit(EmptyDeclaration n, Object o);
    void visit(ModifierList n, Object o);
    void visit(PublicModifier n, Object o);
    void visit(ProtectedModifier n, Object o);
    void visit(PrivateModifier n, Object o);
    void visit(StaticModifier n, Object o);
    void visit(AbstractModifier n, Object o);
    void visit(FinalModifier n, Object o);
    void visit(NativeModifier n, Object o);
    void visit(StrictfpModifier n, Object o);
    void visit(SynchronizedModifier n, Object o);
    void visit(TransientModifier n, Object o);
    void visit(VolatileModifier n, Object o);
    void visit(ClassDeclaration n, Object o);
    void visit(Super n, Object o);
    void visit(InterfaceTypeList n, Object o);
    void visit(ClassBody n, Object o);
    void visit(ClassBodyDeclarationList n, Object o);
    void visit(FieldDeclaration n, Object o);
    void visit(VariableDeclaratorList n, Object o);
    void visit(VariableDeclarator n, Object o);
    void visit(VariableDeclaratorId n, Object o);
    void visit(MethodDeclaration n, Object o);
    void visit(TypedMethodHeader n, Object o);
    void visit(VoidMethodHeader n, Object o);
    void visit(MethodDeclarator n, Object o);
    void visit(FormalParameterList n, Object o);
    void visit(FormalParameter n, Object o);
    void visit(ClassTypeList n, Object o);
    void visit(EmptyMethodBody n, Object o);
    void visit(StaticInitializer n, Object o);
    void visit(ConstructorDeclaration n, Object o);
    void visit(ConstructorDeclarator n, Object o);
    void visit(ConstructorBody n, Object o);
    void visit(ThisCall n, Object o);
    void visit(SuperCall n, Object o);
    void visit(InterfaceDeclaration n, Object o);
    void visit(InterfaceBody n, Object o);
    void visit(InterfaceMemberDeclarationList n, Object o);
    void visit(AbstractMethodDeclaration n, Object o);
    void visit(ArrayInitializer n, Object o);
    void visit(VariableInitializerList n, Object o);
    void visit(Block n, Object o);
    void visit(BlockStatementList n, Object o);
    void visit(LocalVariableDeclarationStatement n, Object o);
    void visit(LocalVariableDeclaration n, Object o);
    void visit(EmptyStatement n, Object o);
    void visit(LabeledStatement n, Object o);
    void visit(ExpressionStatement n, Object o);
    void visit(IfStatement n, Object o);
    void visit(SwitchStatement n, Object o);
    void visit(SwitchBlock n, Object o);
    void visit(SwitchBlockStatementList n, Object o);
    void visit(SwitchBlockStatement n, Object o);
    void visit(SwitchLabelList n, Object o);
    void visit(CaseLabel n, Object o);
    void visit(DefaultLabel n, Object o);
    void visit(WhileStatement n, Object o);
    void visit(DoStatement n, Object o);
    void visit(ForStatement n, Object o);
    void visit(StatementExpressionList n, Object o);
    void visit(BreakStatement n, Object o);
    void visit(ContinueStatement n, Object o);
    void visit(ReturnStatement n, Object o);
    void visit(ThrowStatement n, Object o);
    void visit(SynchronizedStatement n, Object o);
    void visit(TryStatement n, Object o);
    void visit(CatchClauseList n, Object o);
    void visit(CatchClause n, Object o);
    void visit(Finally n, Object o);
    void visit(ParenthesizedExpression n, Object o);
    void visit(PrimaryThis n, Object o);
    void visit(PrimaryClassLiteral n, Object o);
    void visit(PrimaryVoidClassLiteral n, Object o);
    void visit(ClassInstanceCreationExpression n, Object o);
    void visit(ExpressionList n, Object o);
    void visit(ArrayCreationExpression n, Object o);
    void visit(DimExprList n, Object o);
    void visit(DimExpr n, Object o);
    void visit(DimList n, Object o);
    void visit(Dim n, Object o);
    void visit(FieldAccess n, Object o);
    void visit(SuperFieldAccess n, Object o);
    void visit(MethodInvocation n, Object o);
    void visit(PrimaryMethodInvocation n, Object o);
    void visit(SuperMethodInvocation n, Object o);
    void visit(ArrayAccess n, Object o);
    void visit(PostIncrementExpression n, Object o);
    void visit(PostDecrementExpression n, Object o);
    void visit(PlusUnaryExpression n, Object o);
    void visit(MinusUnaryExpression n, Object o);
    void visit(PreIncrementExpression n, Object o);
    void visit(PreDecrementExpression n, Object o);
    void visit(UnaryComplementExpression n, Object o);
    void visit(UnaryNotExpression n, Object o);
    void visit(PrimitiveCastExpression n, Object o);
    void visit(ClassCastExpression n, Object o);
    void visit(MultiplyExpression n, Object o);
    void visit(DivideExpression n, Object o);
    void visit(ModExpression n, Object o);
    void visit(AddExpression n, Object o);
    void visit(SubtractExpression n, Object o);
    void visit(LeftShiftExpression n, Object o);
    void visit(RightShiftExpression n, Object o);
    void visit(UnsignedRightShiftExpression n, Object o);
    void visit(LessExpression n, Object o);
    void visit(GreaterExpression n, Object o);
    void visit(LessEqualExpression n, Object o);
    void visit(GreaterEqualExpression n, Object o);
    void visit(InstanceofExpression n, Object o);
    void visit(EqualExpression n, Object o);
    void visit(NotEqualExpression n, Object o);
    void visit(AndExpression n, Object o);
    void visit(ExclusiveOrExpression n, Object o);
    void visit(InclusiveOrExpression n, Object o);
    void visit(ConditionalAndExpression n, Object o);
    void visit(ConditionalOrExpression n, Object o);
    void visit(ConditionalExpression n, Object o);
    void visit(Assignment n, Object o);
    void visit(EqualOperator n, Object o);
    void visit(MultiplyEqualOperator n, Object o);
    void visit(DivideEqualOperator n, Object o);
    void visit(ModEqualOperator n, Object o);
    void visit(PlusEqualOperator n, Object o);
    void visit(MinusEqualOperator n, Object o);
    void visit(LeftShiftEqualOperator n, Object o);
    void visit(RightShiftEqualOperator n, Object o);
    void visit(UnsignedRightShiftEqualOperator n, Object o);
    void visit(AndEqualOperator n, Object o);
    void visit(ExclusiveOrEqualOperator n, Object o);
    void visit(OrEqualOperator n, Object o);
    void visit(Commaopt n, Object o);
    void visit(IDENTIFIERopt n, Object o);
}

