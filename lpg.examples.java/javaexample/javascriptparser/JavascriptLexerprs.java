package javascriptparser;

public class JavascriptLexerprs implements lpg.javaruntime.ParseTable, JavascriptLexersym {

    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,1,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,1,0,0,
            0,0,0,1,0,1,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            13,53,56,5,24,54,28,29,30,31,
            32,33,8,3,4,12,21,23,25,26,
            27,34,35,36,37,38,39,44,50,62,
            64,2,6,7,9,10,11,14,15,16,
            17,18,19,20,22,40,41,42,43,45,
            46,47,48,49,51,52,55,57,58,59,
            60,61,63,65,66,67,68,69,70,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,3,0,2,
            5,0,3,2,2,1,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,1,1,1,1,1,1,
            1,1,1,1,2,2,2,1,2,2,
            1,2,1,1,1,1,1,1,1,1,
            1,1,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2,3,1,2,
            1,2,2,3,1,1,1,2,1,2,
            2,1,1,2,2,1,3,1,2,1,
            1,2,2,3,1,2,3,1,2,2,
            3,3,4,1,1,1,1,2,2,3,
            1,1,2,2,3,1,1,1,1,2,
            2,3,1,1,1,1,1,1,1,1,
            1,3,1,1,1,2,3,2,1,1,
            1,2,1,1,2,2,1,2,3,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,3,0,2,2,
            0,2,2,1,2,1,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,3,5,2,0,
            2,2,4,1,1,1,1,2,0,2,
            1,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            32,14,14,14,14,4,4,4,33,34,
            34,35,36,36,36,36,37,37,16,16,
            16,16,16,16,13,13,13,13,13,13,
            13,38,38,38,38,32,32,32,32,32,
            32,32,32,39,44,44,44,44,45,45,
            5,17,17,19,19,19,21,21,21,21,
            21,21,18,18,22,22,23,23,23,23,
            23,23,23,23,23,23,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,41,41,
            41,41,41,49,49,48,48,28,28,50,
            50,46,46,53,53,52,52,52,52,51,
            51,55,55,29,54,54,54,6,6,47,
            47,57,57,2,2,56,3,3,3,3,
            3,3,3,3,3,3,42,42,58,58,
            58,59,59,59,60,60,61,61,62,62,
            62,62,62,62,63,63,63,63,63,63,
            30,31,31,31,31,31,31,20,20,43,
            65,65,65,64,66,66,66,66,66,67,
            67,68,68,69,69,69,69,69,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,8,8,8,8,
            8,8,8,8,8,8,8,8,8,10,
            11,9,7,7,7,7,7,7,7,26,
            25,24,24,24,12,27,27,15,728,973,
            205,13,32,432,13,537,537,537,537,537,
            537,922,31,536,160,44,13,51,838,53,
            273,354,338,218,1,541,1034,132,541,183,
            338,41,792,42,799,218,375,36,37,38,
            39,40,376,432,434,331,830,438,157,346,
            380,772,483,477,151,1033,796,403,543,34,
            829,47,371,540,540,540,540,540,540,33,
            33,773,69,542,46,148,542,180,62,540,
            540,540,540,540,843,182,354,186,1014,212,
            392,540,540,540,540,540,540,533,187,137,
            15,377,211,15,834,771,62,540,540,540,
            540,540,890,455,875,15,404,49,1040,537,
            537,537,537,537,537,220,221,187,187,45,
            344,51,179,53,184,1041,320,157,877,828,
            157,501,598,185,483,491,131,468,10,891,
            891,157,157,663,222,506,511,1023,1044,152,
            10,836,130,883,1044,158,222,147,319,1056,
            1076,934,185,185,159,419,946,958,52,502,
            507,982,970,158,63,514,1082,987,158,142,
            207,1085,1057,158,999,467,1011,516,1066,208,
            1062,1064,1088,1072,1089,1101,1103,1108,1078,1113,
            1114,1077,1115,1119,1120,859,881,925,937,949,
            961,1002,1045,1051,546,546
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            0,0,0,3,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,0,65,66,67,0,1,2,0,4,
            5,6,7,8,9,10,11,12,13,14,
            15,41,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,0,0,0,
            1,2,4,0,6,0,3,0,43,44,
            45,46,0,1,2,16,4,5,6,7,
            8,9,10,11,12,13,14,15,0,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,0,42,0,1,2,5,
            0,7,0,1,2,43,44,45,46,0,
            0,1,2,4,5,6,7,8,9,10,
            11,12,13,14,15,68,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,0,1,2,0,4,5,6,7,8,
            9,10,11,0,1,2,0,4,5,6,
            7,8,9,10,11,0,1,2,0,4,
            5,6,7,8,9,10,11,0,1,2,
            0,4,5,6,7,8,9,10,11,0,
            1,2,0,4,5,6,7,8,9,10,
            11,0,1,2,12,13,0,1,2,68,
            4,5,6,7,8,9,10,11,0,1,
            2,0,4,5,6,7,8,9,10,11,
            0,1,2,0,4,5,6,7,8,9,
            10,11,0,1,2,12,13,14,15,16,
            17,18,0,0,12,13,14,15,16,0,
            0,1,2,0,0,12,13,14,15,16,
            0,12,13,14,15,0,0,14,3,3,
            17,0,19,0,3,0,3,35,36,37,
            0,0,32,33,3,0,0,0,3,47,
            3,0,1,2,0,1,2,0,0,34,
            3,3,16,0,33,32,40,65,66,67,
            0,0,0,3,39,3,0,0,0,38,
            3,34,0,0,0,3,3,3,0,0,
            0,3,3,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            546,541,541,541,541,541,541,541,541,541,
            541,541,541,541,541,541,541,541,541,541,
            541,417,541,541,541,541,541,541,541,541,
            541,541,541,541,541,541,541,541,541,541,
            541,541,541,541,541,541,541,541,541,723,
            541,541,541,541,541,541,541,541,541,541,
            541,541,541,541,541,541,541,541,546,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,462,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,722,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,546,561,561,561,
            561,561,561,561,561,561,561,561,561,561,
            561,561,561,561,561,561,561,561,561,561,
            561,561,561,561,561,561,561,561,561,561,
            561,561,561,561,561,561,561,561,561,561,
            561,561,561,561,561,561,561,561,561,561,
            562,561,560,561,561,561,561,561,561,561,
            561,561,561,561,546,559,559,559,559,559,
            559,559,559,559,559,559,559,559,559,559,
            559,559,559,559,559,559,559,559,559,559,
            559,559,559,559,559,559,559,559,559,559,
            559,559,559,559,559,559,559,559,559,559,
            559,559,559,559,559,559,559,559,563,559,
            557,559,559,559,559,559,559,559,559,559,
            559,559,546,354,354,354,354,354,354,354,
            354,354,354,354,354,354,354,354,354,354,
            354,354,354,342,354,354,354,354,354,354,
            354,354,354,354,354,354,354,354,354,354,
            354,354,354,354,354,354,354,354,354,354,
            354,354,354,354,354,354,459,354,481,354,
            354,354,354,354,354,354,354,546,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,546,543,543,543,543,543,543,543,
            543,543,543,543,543,543,543,543,543,543,
            543,543,543,473,543,543,543,543,543,543,
            543,543,543,543,543,543,543,543,543,543,
            543,543,543,543,543,543,543,543,543,543,
            543,543,543,543,543,543,543,543,759,543,
            543,543,543,543,543,543,543,8,556,556,
            556,556,556,556,556,556,556,556,556,556,
            556,556,556,556,556,556,556,556,556,556,
            556,556,556,556,556,556,556,556,556,556,
            556,556,556,556,556,556,556,556,556,556,
            556,556,556,556,556,556,556,556,556,556,
            556,556,556,556,556,556,556,556,556,556,
            556,556,546,733,733,733,733,733,733,733,
            733,733,733,733,733,733,733,733,733,733,
            733,596,733,733,733,733,733,733,733,733,
            733,733,733,733,733,733,733,733,733,733,
            733,733,733,733,733,733,733,733,733,733,
            733,733,733,733,733,733,733,733,733,733,
            733,733,733,733,733,733,733,546,731,731,
            731,731,731,731,731,731,731,731,731,731,
            731,731,731,731,731,731,596,731,731,731,
            731,731,731,731,731,731,731,731,731,731,
            731,731,731,731,731,731,731,731,731,731,
            731,731,731,731,731,731,731,731,731,731,
            731,731,731,731,731,731,731,731,731,731,
            731,731,546,768,768,768,768,768,768,768,
            768,768,768,768,768,768,768,768,768,768,
            768,768,768,768,768,768,768,768,768,768,
            768,768,768,768,768,768,768,768,768,768,
            768,768,768,768,768,768,768,768,768,768,
            768,768,768,768,768,768,768,768,768,768,
            768,768,768,768,768,768,768,546,408,538,
            490,537,537,537,537,537,537,537,537,537,
            537,537,537,366,537,537,601,600,478,537,
            537,537,537,537,537,537,537,537,537,521,
            520,489,536,536,536,523,518,512,425,424,
            117,210,181,664,536,525,391,524,352,631,
            632,522,638,340,646,660,661,662,667,672,
            673,178,535,535,535,36,540,540,219,540,
            540,540,540,540,540,540,540,540,540,540,
            540,527,540,540,540,540,484,540,540,540,
            540,540,540,540,540,540,540,12,141,96,
            539,539,455,122,455,9,669,546,540,540,
            540,540,209,540,540,531,540,540,540,540,
            540,540,540,540,540,540,540,540,32,540,
            540,540,540,484,540,540,540,540,540,540,
            540,540,540,540,128,526,146,539,539,676,
            31,676,153,704,704,540,540,540,540,546,
            546,539,539,537,537,537,537,537,537,537,
            537,537,537,537,537,545,537,537,601,600,
            478,537,537,537,537,537,537,537,537,537,
            537,134,706,706,53,706,706,706,706,706,
            706,706,706,546,705,705,151,705,705,705,
            705,705,705,705,705,546,502,502,157,502,
            502,502,502,502,502,502,502,546,507,507,
            62,507,507,507,507,507,507,507,507,546,
            514,514,546,514,514,514,514,514,514,514,
            514,154,704,704,678,678,546,753,753,129,
            753,753,753,753,753,753,753,753,546,516,
            516,186,516,516,516,516,516,516,516,516,
            546,754,754,145,754,754,754,754,754,754,
            754,754,145,698,698,133,133,133,133,149,
            491,491,35,145,133,133,133,133,150,546,
            546,539,539,546,184,133,133,133,133,458,
            221,677,677,319,319,108,101,496,655,648,
            497,93,596,89,641,98,637,579,579,579,
            546,81,470,469,629,105,546,110,529,579,
            657,156,704,704,155,704,704,87,79,528,
            634,626,643,546,640,636,530,580,580,580,
            76,546,124,533,645,671,546,119,546,532,
            666,534,106,103,82,653,650,630,77,112,
            546,624,659
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 79,
           NT_OFFSET         = 69,
           LA_STATE_OFFSET   = 863,
           MAX_LA            = 1,
           NUM_RULES         = 317,
           NUM_NONTERMINALS  = 70,
           NUM_SYMBOLS       = 139,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 318,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 68,
           EOLT_SYMBOL       = 70,
           ACCEPT_ACTION     = 545,
           ERROR_ACTION      = 546;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
