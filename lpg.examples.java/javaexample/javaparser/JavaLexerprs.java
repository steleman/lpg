package javaparser;

public class JavaLexerprs implements lpg.runtime.java.ParseTable, JavaLexersym {

    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            24,25,32,28,29,30,13,18,20,27,
            31,14,19,21,26,35,38,2,3,4,
            5,6,7,8,9,10,11,12,15,16,
            17,22,23,33,34,36,37,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,5,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,2,2,2,2,2,2,
            2,3,2,2,2,2,2,2,2,2,
            3,3,4,2,2,1,2,3,4,1,
            2,2,3,2,3,2,2,3,3,2,
            3,2,2,0,1,2,2,2,0,2,
            1,2,1,2,2,2,3,2,3,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,3,1,1,1,
            1,1,1,1,1,1,1,1,2,1,
            2,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,6,2,1,1,1,1,
            1,1,1,6,2,2,2,2,2,2,
            2,2,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,22,22,22,22,
            24,24,24,24,24,24,24,23,23,23,
            23,25,25,25,25,26,26,27,27,20,
            20,7,7,30,30,31,31,31,13,13,
            13,10,10,10,10,10,4,4,4,4,
            4,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,1,1,1,1,1,1,1,
            1,1,1,11,11,11,11,11,11,11,
            11,3,3,3,3,3,3,3,3,3,
            3,3,3,2,2,34,34,34,8,8,
            9,9,12,12,15,15,29,29,28,28,
            19,19,19,35,35,35,35,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,14,14,14,14,
            32,32,32,32,32,32,32,32,33,33,
            33,33,33,33,33,33,33,21,21,21,
            21,21,21,21,21,21,17,17,17,17,
            17,17,17,17,506,534,1062,82,533,533,
            533,441,608,202,535,1164,201,201,201,922,
            1110,82,374,362,583,199,4,5,6,1051,
            356,434,365,1,73,452,356,73,73,73,
            407,531,962,73,531,531,531,73,443,73,
            308,80,960,451,80,80,80,531,959,414,
            1170,531,202,632,103,71,1168,80,71,71,
            71,63,68,699,71,1169,345,531,71,1013,
            71,65,69,80,205,78,80,383,78,78,
            78,931,82,715,474,474,474,1171,100,66,
            70,1030,1163,57,423,1172,457,1040,370,996,
            61,67,517,1173,370,413,78,457,400,78,
            336,1121,82,474,684,84,84,84,739,482,
            482,482,763,491,491,491,59,787,495,495,
            495,811,499,499,499,835,503,503,503,859,
            344,344,344,883,507,507,507,907,335,335,
            335,1077,471,1088,523,1099,525,1154,471,972,
            523,979,525,1132,82,1143,82,1167,187,977,
            1178,730,1179,1189,1190,1191,778,826,874,947,
            952,957,958,1192,546,546
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,97,98,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,0,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,0,0,0,0,100,101,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,0,16,17,18,19,20,21,22,
            23,0,25,26,27,28,29,30,31,32,
            0,0,11,12,13,14,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            0,99,75,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,0,16,
            17,18,19,20,21,22,23,0,25,11,
            12,13,14,30,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,0,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,24,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,0,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,24,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,24,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,0,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,24,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,0,17,18,0,
            0,0,31,32,0,25,0,0,0,0,
            30,0,1,2,3,4,5,6,7,8,
            24,0,11,15,15,24,0,16,0,0,
            24,24,0,0,0,24,15,26,27,28,
            29,15,34,15,33,0,1,2,3,4,
            5,6,7,8,0,0,11,36,78,0,
            34,16,0,35,0,0,0,0,0,24,
            99,26,27,28,29,0,0,15,33,0,
            1,2,3,4,5,6,7,8,77,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,77,0,35,36,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,0,0,0,0,0,0,0,0,
            0,0,0,11,12,13,14,0,0,17,
            18,15,15,15,15,15,15,15,0,0,
            0,0,15,15,0,0,0,0,0,0,
            37,38,0,0,0,0,0,0,0,0,
            0,0,0,0,0,24,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,73,0,0,0,
            0,0,74,76,0,0,80,81,79,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,100,101,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,99,99,99,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            546,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,619,
            618,414,619,619,619,619,619,619,619,619,
            619,619,619,619,619,619,619,619,619,79,
            619,619,546,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,553,622,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,74,617,617,8,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,624,624,624,624,624,624,624,
            624,624,624,546,546,546,624,546,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            548,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,459,626,626,626,626,626,
            626,626,626,626,626,626,626,626,626,626,
            626,626,626,626,626,626,546,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            546,531,531,531,531,531,531,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            531,531,531,392,531,531,531,531,531,531,
            531,531,531,531,531,531,531,531,531,531,
            531,531,531,531,531,546,369,534,534,534,
            534,534,534,534,534,534,533,533,533,533,
            455,533,533,533,533,533,533,533,533,390,
            533,533,533,533,533,533,533,533,448,408,
            521,519,535,535,533,533,533,533,533,533,
            533,533,533,533,533,533,533,533,533,533,
            533,533,533,533,533,533,533,533,533,533,
            533,533,533,533,533,533,533,533,535,425,
            533,416,546,379,410,527,463,429,402,568,
            447,564,565,577,578,575,576,579,563,560,
            561,546,546,546,546,535,535,1,748,748,
            748,748,748,748,748,748,748,748,747,747,
            747,747,546,747,747,747,747,747,747,747,
            747,62,747,747,747,747,747,747,747,747,
            546,546,614,609,609,614,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            546,545,747,58,630,630,630,630,630,630,
            630,630,630,630,630,630,630,630,64,630,
            630,630,630,630,630,630,630,546,605,615,
            611,611,615,605,546,474,474,474,474,474,
            474,474,474,474,474,474,474,474,474,546,
            474,474,474,474,474,474,474,474,546,482,
            482,482,482,482,482,482,482,482,482,482,
            482,482,482,549,482,482,482,482,482,482,
            482,482,546,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,163,491,491,
            491,491,491,491,491,491,546,495,495,495,
            495,495,495,495,495,495,495,495,495,495,
            495,185,495,495,495,495,495,495,495,495,
            546,499,499,499,499,499,499,499,499,499,
            499,499,499,499,499,164,499,499,499,499,
            499,499,499,499,546,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,185,
            503,503,503,503,503,503,503,503,546,890,
            890,890,890,890,890,890,890,890,890,890,
            890,890,890,165,890,890,890,890,890,890,
            890,890,546,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,185,507,507,
            507,507,507,507,507,507,546,881,881,881,
            881,881,881,881,881,881,881,881,881,881,
            881,81,881,881,881,881,881,881,881,881,
            4,628,628,628,628,628,628,628,628,628,
            628,616,612,612,616,546,166,457,457,546,
            546,167,443,443,546,603,168,169,26,28,
            603,546,536,537,538,539,540,541,542,543,
            185,11,895,584,585,185,41,892,10,546,
            185,185,546,546,546,898,590,894,896,893,
            478,598,529,589,897,546,882,882,882,882,
            882,882,882,882,546,546,895,581,511,546,
            532,892,21,580,546,546,546,546,546,898,
            4,894,896,893,487,546,546,596,897,185,
            517,517,517,517,517,517,517,517,899,546,
            370,370,370,370,370,370,370,370,370,370,
            27,356,356,356,356,356,356,356,356,356,
            356,85,628,628,628,628,628,628,628,628,
            628,628,899,546,513,515,86,471,471,471,
            471,471,471,471,471,471,471,546,523,523,
            523,523,523,523,523,523,523,523,546,525,
            525,525,525,525,525,525,525,525,525,88,
            628,628,628,628,628,628,628,628,628,628,
            87,628,628,628,628,628,628,628,628,628,
            628,90,628,628,628,628,628,628,628,628,
            628,628,89,628,628,628,628,628,628,628,
            628,628,628,186,733,733,733,733,733,733,
            733,733,6,9,546,546,13,24,23,25,
            20,16,12,613,607,607,613,40,42,457,
            457,592,593,594,583,595,582,591,200,81,
            198,170,597,599,546,546,546,546,546,546,
            745,745,546,546,546,546,546,546,546,546,
            546,546,546,546,546,185,546,546,546,546,
            546,546,546,546,546,546,546,546,546,546,
            546,546,546,546,546,546,745,546,546,546,
            546,546,600,601,546,546,623,412,530,546,
            546,546,546,546,546,546,546,546,546,546,
            546,546,546,745,745,546,546,546,546,546,
            546,546,546,546,546,546,546,546,546,546,
            546,546,546,546,546,546,546,1,4,9
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 67,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 899,
           MAX_LA            = 1,
           NUM_RULES         = 353,
           NUM_NONTERMINALS  = 38,
           NUM_SYMBOLS       = 140,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 354,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 545,
           ERROR_ACTION      = 546;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
