/*********************************************************************************
*
*  IBM CONFIDENTIAL
*  OCO SOURCE MATERIALS
*
*  COPYRIGHT:  (C) COPYRIGHT IBM CORPORATION 1999 - 2002              
*
*  The source code for this program is not published or otherwise divested of
*  its trade secrets, irrespective of what has been deposited with the U.S.
*  Copyright Office.
*
*       Module: 04
*       Version 1.12
*   Get:  04/10/18  15:54:22
*   Updated: 04/08/11  18:42:11*
*
***********************************************************************************/
package com.ibm.db2.tools.mtk.translation.source.tsql;

  
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.util.Vector;

import antlr.LLkParser;
import antlr.RecognitionException;
import antlr.TokenStreamException;

import com.ibm.db2.tools.mtk.translation.source.common.Translator;
import com.ibm.db2.tools.mtk.translation.source.common.grammars.ExtendedLexerSharedInputState;
import com.ibm.db2.tools.mtk.translation.source.common.grammars.SrcAST;
import com.ibm.db2.tools.mtk.translation.source.common.st.NameUtil;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.TsqlASTWalker;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.TsqlLexer;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.TsqlPTokenTypes;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.TsqlParser;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.lpgparser.SybasePrsStream;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.lpgparser.SybaseLexer;
import com.ibm.db2.tools.mtk.translation.source.tsql.grammars.lpgparser.SybaseParser;
import com.ibm.db2.tools.mtk.translation.source.tsql.st.TsqlNameRules;
import com.ibm.db2.tools.mtk.translation.util.FileOptions;
import com.ibm.db2.tools.mtk.translation.util.InputFileInfo;
import com.ibm.db2.tools.mtk.translation.util.InputFileManager;


public class TsqlTranslator extends Translator
       implements TsqlPTokenTypes {

	private static final String copyright = com.ibm.db2.tools.mtk.util.MTKConstants.copyright;
	private static final String TSQL_ROOT = "TSQL AST";
	private boolean delimident = false;
	/** The name of the message file (MTKTSQL.messages in the current directory)*/
	private static final String CATALOG_NAMES[]=
    	{"MTKTSQL.messages"};

	/**
	 * The constructor.
	 */ 
	public TsqlTranslator(TsqlGlobalOptions options)
	{
		globalOptions = options;  //set options for this conversion
		rootNode = TSQL_AST;
		rootName = TSQL_ROOT;
		catalogNames = CATALOG_NAMES;

		sourceFiles = new InputFileManager();
		NameUtil.init(new TsqlNameRules(options));
	}

 
	/**
	 * Adds a File to the set of files that the translator will process as input.
	 * It reads the input file, and stores the characters in a buffer in a
	 * fileInfo record.
	 *
	 *  @param f       a File object.
	 *  @param options the fileOptions for the file.
	 *  @throws java.io.FileNotFoundException
	 */
	public void addInputFile(File f, FileOptions options) throws FileNotFoundException, IOException
	{
		addInputFile(f,options, "");
	}

	/**
	 * Parses the contents of inputBuf, returning the parser used in the parse.
	 * 
	 * @param inputBuf the text to be parsed.
	 * @param fileInfo information about the file whose contents are in inputBuf
	 * @return LLkParser the parser that performed the parse.
	 * @throws RecognitionException
	 * @throws TokenStreamException
	 */
	protected LLkParser parse(String inputBuf, InputFileInfo fileInfo) 
		throws RecognitionException, TokenStreamException {
			
		TsqlParser parser;
		// Create the Tsql lexer
		TsqlLexer lexer;
		
        ExtendedLexerSharedInputState sharedState = 
					new ExtendedLexerSharedInputState(new StringReader(inputBuf));
		lexer = new TsqlLexer(
		                   	sharedState,
		                   	fileInfo,
		                   	rptFile,
		                   	debugOptions);
	
		// Create a parser that reads from the scanner
		parser = new TsqlParser(lexer,
					  			    fileInfo,
		                            rptFile,
		                            debugOptions,
		                            globalOptions);
		parser.setASTNodeClass(ASTNodeType);
	  
		// start parsing at the start rule for a file: dofile
		// Note: parser invokes setASTNodeClass(getASTNodeType())
		parser.dofile();
	
		return parser;
	} 

	/**
	 * Parses the contents of the current file.
	 * Uses the LPG sybase lexer and parser
	 * @return the ast (an object) generated by the parser
	 * @param fileInfo information about the file whose contents are in inputBuf
	 */	
	protected  Object LALRkParser(InputFileInfo fileInfo, Vector srcStmtList, Vector db2StmtList)
	{
        SybaseLexer sybaseLexer;
        SybaseParser sybaseParser;
        //LexStream lexStream;
        SybasePrsStream prsStream;
        Object ast;

		transEnv = new TsqlTransEnv(rptFile, globalOptions, debugOptions);

		//lexStream = new LexStream(fileInfo, transEnv);			// Create the input stream

		sybaseLexer = new SybaseLexer(fileInfo, transEnv);		// Create the lexer

		prsStream = sybaseLexer.lexer();			// Lex the stream to produce the token stream

		sybaseParser = new SybaseParser(prsStream);		// Create the parser

		ast = sybaseParser.TsqlParser(srcStmtList, db2StmtList);			// Parse the token stream to produce an AST

		return ast;
	}

	/**
	 * Walks the tree rooted at tree, producing a DB2 file.  Fills in the source
	 * and DB2 statement lists.
	 * 
	 * @param tree the ast node at the root of the tree to be walked.
	 * @param srcStmtList the src statements generated by the walk.
	 * @param db2StmtList the DB2 statements generated by the walk.
	 * @throws RecognitionException
	 */
	protected void walkTree(SrcAST tree, Vector srcStmtList, Vector db2StmtList)
		throws RecognitionException {
		//Walk the tree, do the translation
		transEnv = new TsqlTransEnv(rptFile, globalOptions, debugOptions);
		TsqlASTWalker tparse = new TsqlASTWalker(sourceFiles.getCurrentFileInfo(),
																 rptFile, globalOptions, debugOptions,
																 transEnv,
																 srcStmtList,
																 db2StmtList);
		
				tparse.tsql_ast(tree);
	}
	
}
