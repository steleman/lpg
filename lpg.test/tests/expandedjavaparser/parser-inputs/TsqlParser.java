// $ANTLR : "TsqlParser.g" -> "TsqlParser.java"$

	package com.ibm.db2.tools.mtk.translation.source.tsql.grammars;
	
	import com.ibm.db2.tools.mtk.translation.source.common.grammars.*;
	import com.ibm.db2.tools.mtk.translation.util.*;
	import com.ibm.db2.tools.mtk.translation.source.tsql.*;
	import java.util.*;
	import java.io.*;
	import antlr.*; 

import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.collections.AST;
import java.util.Hashtable;
import antlr.ASTFactory;
import antlr.ASTPair;
import antlr.collections.impl.ASTArray;

public class TsqlParser extends antlr.LLkParser       implements TsqlPTokenTypes
 {

    private static final String ASTNodeType = "com.ibm.db2.tools.mtk.translation.source.common.grammars.SrcAST";
	private boolean debugging = false;

	//used to hold the message descriptor to be attached to the error_stmt node
	private MessageDescriptor errorMsg;

   	private InputFileInfo fileInfo = null;
   	private PrintWriter rptPtr = null;
   	private DebugOptions debugOpts = null;   	
   	private GlobalOptions globalOpts = null;

	/**
	  * Constructs a parser from the given components.
	  *
	  * @param selectorIn  the TokenStreamSelector that performs the switch between the
	  *                    lexers (used by the parser to get the next token).
	  * @param fi          the InputFileInfo used for reporting errors.
	  * @param rp          the PrintWriter used ffor reporting errors.
	  * @param dopt	       the DebugOptions used to determine how to report errors.
	  */
   	public TsqlParser (TokenStream lexer,
   	                     InputFileInfo fi,
   	                     PrintWriter rp,
   	                     DebugOptions dopt,
   	                     GlobalOptions gOpt) {
   		this(lexer);
   		fileInfo = fi;
   		debugging = dopt.getDebugAST();
   		rptPtr = rp;
   		debugOpts = dopt;
   		globalOpts = gOpt;
   	}

	/**
	 * Outputs error to report file.
	 *
	 * @param ex a RecognitionException generated by Antlr
	 */
	public void reportError(RecognitionException ex) {
	System.out.println (ex);

		MessageDescriptor message = new MessageDescriptor(
 			MessageConstants.UNEXPECTED_TOKEN,
			fileInfo,
			ex );

		errorMsg = message;
   	}
   	
   	private String getText(AST ast)
	{
		return SrcAST.getText( ast );
	}
	
	private void addText(AST ast, String str)
	{	
		ast.setText(ast.getText() + str);
	}
	
	private AST getRightMostNode(AST[] nodes)
	{
		int i=nodes.length - 1;
		while (i>0 && nodes[i]==null)
			--i;
		if(i>=0)
			return nodes[i];
		else return null;
	}

	/**
	 * Outputs syntax error to report file and generates an error statement
	 * AST node.
	 *
	 * @param ex a RecognitionException generated by Antlr
	 * @return the ERROR_STMT node with UNEXPECTED_TOKEN error message
	 */
	public AST reportSyntaxError(RecognitionException ex) throws RecognitionException, TokenStreamException  {
System.out.println(ex);

		MessageDescriptor message = new MessageDescriptor(
 			MessageConstants.UNEXPECTED_TOKEN,
			fileInfo,
			ex );

		AST us = error_statement();
        ((SrcAST)us).setErrorMsg(message);
        return us;
   	}
   	
   	/**
   	 *  Skips over tokens until a token following a statement is found.
   	 *  This function is not coded as a rule in the grammar because it causes
   	 *  too many non-determinism errors when added as a statement rule alternative.
   	 *  This is due to the fact that there is no required statement ender like semicolon
   	 *  in tsql, and the end of a statement is determined generally by the beginning
   	 *  of a new statement.
   	 *
   	 *  @return an ERROR_STMT node
   	 */
   	protected AST error_statement() throws RecognitionException, TokenStreamException  {
   		AST e = astFactory.create(ERROR_STMT,"ERROR_STMT");
	    AST firstNode = new SrcAST(LT(1));
	    AST lastNode = null;
	    boolean foundEnd = false; 

		consume();  //consume first token
		while (!foundEnd) {
			switch ( LA(1)) {
			//these tokens are in the follow set of tsql_stmt, they include the statement
			//start tokens.  If you add a new statement, please add the start token to this list.
			case ALTER: 
			case BACKUP:
			case BEGIN: 
			case BREAK:
			case BULK:
			case CHECKPOINT:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case DUMP:
			case ELSE:
			case EOF:
			case END:
			case EXEC:
			case EXECUTE:
			case FETCH:
			case GO:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KILL:
			case LOCK:
			case LPAREN:
			case OPEN:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case PRINT:
			case RAISERROR:
			case READTEXT:
			case RECONFIGURE:
			case RESTORE:
			case RETURN:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SEMI_COLON:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UPDATE:
			case UPDATETEXT:
			case USE:
			case WAITFOR:
			case WHILE:
			case WRITETEXT:
				foundEnd = true;
				break;
			default:
				consume();
			}
		}
	    lastNode = new SrcAST(LT(0));
	    SrcAST.setSpan( e, firstNode, lastNode);
		return e;
	 }

	/**
	 * Determines if the next token in the stream is in a follow set (an ordered
	 *   array of int).
	 *
	 * @param followSet an ordered array of token types (ints).
	 * @return true if the followSet contains the next token in the input stream.
	 */
	protected boolean containsNextToken (int [] followSet) throws antlr.TokenStreamException {
     		return (Arrays.binarySearch(followSet,LA(1))>=0);
     	}
    
    /* If we have to merge the union_list with a select_stmt or sub_query */ 	
    protected AST merge_union_list (AST select_stmt_ast, AST union_list)
	{
		boolean toADD = true;
	  	AST child = select_stmt_ast.getFirstChild();
	  	   while (child != null) {
	  	    	// Want to append the union list
	  	    	if ((child.getType() == UNION_LIST) && (toADD == true))
		  	    {
		  	 		// Append the union_stmts in the union_list to the union_list in the
		  	 		// select_stmt_head
		  	    	AST union_stmt = union_list.getFirstChild();
		  	    	while (union_stmt != null) {
			  	    	child.addChild(union_stmt);
			  	    	union_stmt = union_list.getNextSibling();
		  	    	}
		  	    	toADD = false;
		  	    }
		  	    child = child.getNextSibling();
		  	}
		  	if (toADD == true)
		  		select_stmt_ast.addChild (union_list);
		  	return select_stmt_ast;
	}
	
	protected AST merge_stmts (AST into, AST from)
	{
		AST child = from.getFirstChild();
		while (child!=null) {
			into.addChild(child);
			child = child.getNextSibling();
		}
		return into;
	}

protected TsqlParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
  buildTokenTypeASTClassMap();
  astFactory = new ASTFactory(getTokenTypeToASTClassMap());
}

public TsqlParser(TokenBuffer tokenBuf) {
  this(tokenBuf,2);
}

protected TsqlParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
  buildTokenTypeASTClassMap();
  astFactory = new ASTFactory(getTokenTypeToASTClassMap());
}

public TsqlParser(TokenStream lexer) {
  this(lexer,2);
}

public TsqlParser(ParserSharedInputState state) {
  super(state,2);
  tokenNames = _tokenNames;
  buildTokenTypeASTClassMap();
  astFactory = new ASTFactory(getTokenTypeToASTClassMap());
}

	public final void dofile() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dofile_AST = null;
		AST sl_AST = null;
		AST dofile = astFactory.create(DOFILE,"DOFILE");
		
		try {      // for error handling
			stmt_go_list(dofile);
			sl_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				dofile_AST = (AST)currentAST.root;
				dofile.addChild(astFactory.create(END_OF_FILE,"END_OF_FILE"));
				dofile.setText("File " + fileInfo.getFilename());
				dofile_AST = dofile;
				
				currentAST.root = dofile_AST;
				currentAST.child = dofile_AST!=null &&dofile_AST.getFirstChild()!=null ?
					dofile_AST.getFirstChild() : dofile_AST;
				currentAST.advanceChildToEnd();
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				
				reportError(ex);
				
			} else {
				throw ex;
			}
		}
		returnAST = dofile_AST;
	}
	
	public final void stmt_go_list(
		AST ast
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST stmt_go_list_AST = null;
		AST cp_AST = null;
		AST lcp_AST = null;
		AST lct_AST = null;
		AST spc_AST = null;
		AST pc_AST = null;
		
		try {      // for error handling
			boolean synPredMatched251 = false;
			if (((LA(1)==CREATE) && (LA(2)==PROCEDURE||LA(2)==PROC))) {
				int _m251 = mark();
				synPredMatched251 = true;
				inputState.guessing++;
				try {
					{
					match(CREATE);
					{
					switch ( LA(1)) {
					case PROC:
					{
						match(PROC);
						break;
					}
					case PROCEDURE:
					{
						match(PROCEDURE);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					}
				}
				catch (RecognitionException pe) {
					synPredMatched251 = false;
				}
				rewind(_m251);
				inputState.guessing--;
			}
			if ( synPredMatched251 ) {
				create_procedure_stmt_list();
				cp_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					ast.addChild(cp_AST);
				}
				{
				switch ( LA(1)) {
				case GO:
				{
					go_stmt();
					stmt_go_list(ast);
					break;
				}
				case EOF:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
			}
			else {
				boolean synPredMatched258 = false;
				if (((_tokenSet_0.member(LA(1))) && (_tokenSet_1.member(LA(2))))) {
					int _m258 = mark();
					synPredMatched258 = true;
					inputState.guessing++;
					try {
						{
						label();
						match(COLON);
						{
						switch ( LA(1)) {
						case CREATE:
						{
							match(CREATE);
							break;
						}
						case ALTER:
						{
							match(ALTER);
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
						{
						switch ( LA(1)) {
						case PROC:
						{
							match(PROC);
							break;
						}
						case PROCEDURE:
						{
							match(PROCEDURE);
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
						}
					}
					catch (RecognitionException pe) {
						synPredMatched258 = false;
					}
					rewind(_m258);
					inputState.guessing--;
				}
				if ( synPredMatched258 ) {
					labelled_create_procedure_stmt();
					lcp_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						ast.addChild(lcp_AST);
					}
					{
					switch ( LA(1)) {
					case GO:
					{
						go_stmt();
						stmt_go_list(ast);
						break;
					}
					case EOF:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else {
					boolean synPredMatched265 = false;
					if (((_tokenSet_0.member(LA(1))) && (LA(2)==TRIGGER||LA(2)==COLON))) {
						int _m265 = mark();
						synPredMatched265 = true;
						inputState.guessing++;
						try {
							{
							{
							if ((_tokenSet_2.member(LA(1)))) {
								label();
								match(COLON);
							}
							else if ((LA(1)==CREATE||LA(1)==ALTER)) {
							}
							else {
								throw new NoViableAltException(LT(1), getFilename());
							}
							
							}
							{
							switch ( LA(1)) {
							case CREATE:
							{
								match(CREATE);
								break;
							}
							case ALTER:
							{
								match(ALTER);
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
							match(TRIGGER);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched265 = false;
						}
						rewind(_m265);
						inputState.guessing--;
					}
					if ( synPredMatched265 ) {
						labelled_create_trigger_stmt();
						lct_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							ast.addChild(lct_AST);
						}
						{
						switch ( LA(1)) {
						case GO:
						{
							go_stmt();
							stmt_go_list(ast);
							break;
						}
						case EOF:
						{
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
					}
					else {
						boolean synPredMatched270 = false;
						if (((_tokenSet_3.member(LA(1))) && (_tokenSet_4.member(LA(2))))) {
							int _m270 = mark();
							synPredMatched270 = true;
							inputState.guessing++;
							try {
								{
								sp_proc_call_stmt();
								}
							}
							catch (RecognitionException pe) {
								synPredMatched270 = false;
							}
							rewind(_m270);
							inputState.guessing--;
						}
						if ( synPredMatched270 ) {
							sp_proc_call_stmt();
							spc_AST = (AST)returnAST;
							if ( inputState.guessing==0 ) {
								ast.addChild(spc_AST);
							}
							{
							switch ( LA(1)) {
							case DUMP:
							case DEALLOCATE:
							case TRUNCATE:
							case OPEN:
							case FETCH:
							case EXEC:
							case EXECUTE:
							case CREATE:
							case CHECKPOINT:
							case ALTER:
							case DROP:
							case SELECT:
							case DECLARE:
							case UPDATE:
							case DELETE:
							case INSERT:
							case SET:
							case BEGIN:
							case WHILE:
							case BREAK:
							case CONTINUE:
							case GOTO:
							case RETURN:
							case PRINT:
							case RAISERROR:
							case IF:
							case WAITFOR:
							case USE:
							case SETUSER:
							case COMMIT:
							case ROLLBACK:
							case SAVE:
							case CLOSE:
							case GRANT:
							case REVOKE:
							case READTEXT:
							case WRITETEXT:
							case KILL:
							case DBCC:
							case RECONFIGURE:
							case DENY:
							case UPDATETEXT:
							case SHUTDOWN:
							case BACKUP:
							case RESTORE:
							case BULK:
							case LOCK:
							case PRAGMA_ML_COMMENT:
							case PRAGMA_SL_COMMENT:
							case LPAREN:
							{
								stmt_space_list(ast);
								break;
							}
							case EOF:
							case GO:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
							{
							switch ( LA(1)) {
							case GO:
							{
								go_stmt();
								stmt_go_list(ast);
								break;
							}
							case EOF:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
						}
						else if ((_tokenSet_5.member(LA(1))) && (_tokenSet_6.member(LA(2)))) {
							proc_call_stmt();
							pc_AST = (AST)returnAST;
							if ( inputState.guessing==0 ) {
								ast.addChild(pc_AST);
							}
							{
							switch ( LA(1)) {
							case DUMP:
							case DEALLOCATE:
							case TRUNCATE:
							case OPEN:
							case FETCH:
							case EXEC:
							case EXECUTE:
							case CREATE:
							case CHECKPOINT:
							case ALTER:
							case DROP:
							case SELECT:
							case DECLARE:
							case UPDATE:
							case DELETE:
							case INSERT:
							case SET:
							case BEGIN:
							case WHILE:
							case BREAK:
							case CONTINUE:
							case GOTO:
							case RETURN:
							case PRINT:
							case RAISERROR:
							case IF:
							case WAITFOR:
							case USE:
							case SETUSER:
							case COMMIT:
							case ROLLBACK:
							case SAVE:
							case CLOSE:
							case GRANT:
							case REVOKE:
							case READTEXT:
							case WRITETEXT:
							case KILL:
							case DBCC:
							case RECONFIGURE:
							case DENY:
							case UPDATETEXT:
							case SHUTDOWN:
							case BACKUP:
							case RESTORE:
							case BULK:
							case LOCK:
							case PRAGMA_ML_COMMENT:
							case PRAGMA_SL_COMMENT:
							case LPAREN:
							{
								stmt_space_list(ast);
								break;
							}
							case EOF:
							case GO:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
							{
							switch ( LA(1)) {
							case GO:
							{
								go_stmt();
								stmt_go_list(ast);
								break;
							}
							case EOF:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
						}
						else if ((_tokenSet_7.member(LA(1))) && (_tokenSet_8.member(LA(2)))) {
							{
							switch ( LA(1)) {
							case DUMP:
							case DEALLOCATE:
							case TRUNCATE:
							case OPEN:
							case FETCH:
							case EXEC:
							case EXECUTE:
							case CREATE:
							case CHECKPOINT:
							case ALTER:
							case DROP:
							case SELECT:
							case DECLARE:
							case UPDATE:
							case DELETE:
							case INSERT:
							case SET:
							case BEGIN:
							case WHILE:
							case BREAK:
							case CONTINUE:
							case GOTO:
							case RETURN:
							case PRINT:
							case RAISERROR:
							case IF:
							case WAITFOR:
							case USE:
							case SETUSER:
							case COMMIT:
							case ROLLBACK:
							case SAVE:
							case CLOSE:
							case GRANT:
							case REVOKE:
							case READTEXT:
							case WRITETEXT:
							case KILL:
							case DBCC:
							case RECONFIGURE:
							case DENY:
							case UPDATETEXT:
							case SHUTDOWN:
							case BACKUP:
							case RESTORE:
							case BULK:
							case LOCK:
							case PRAGMA_ML_COMMENT:
							case PRAGMA_SL_COMMENT:
							case LPAREN:
							{
								stmt_space_list(ast);
								break;
							}
							case EOF:
							case GO:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
							{
							switch ( LA(1)) {
							case GO:
							{
								go_stmt();
								stmt_go_list(ast);
								break;
							}
							case EOF:
							{
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
						}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						}}}
					}
					catch (RecognitionException ex) {
						if (inputState.guessing==0) {
							
							//	   	System.out.println("stmt_go_list: "+ex);
									   	AST us = error_statement();
										MessageDescriptor message = new MessageDescriptor(
											MessageConstants.UNKNOWN_STATEMENT_IGNORED,
											((SrcAST)us).getNodeInfo());
								  
										((SrcAST)us).setErrorMsg(message);
										ast.addChild(us);
								  
										//parse more stmts
										if (LA(1)!=EOF) {
											stmt_go_list(ast);
										}
										stmt_go_list_AST = ast;
								
						} else {
							throw ex;
						}
					}
					returnAST = stmt_go_list_AST;
				}
				
	public final void tsql_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST tsql_stmt_AST = null;
		SrcAST firstNode = new SrcAST(LT(1)); //to get spaninfo in case of error
		AST bs=null;
		
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case INSERT:
			{
				insert_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case OPEN:
			{
				open_cursor_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case CLOSE:
			{
				close_cursor_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case CHECKPOINT:
			{
				checkpoint_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case DEALLOCATE:
			{
				deallocate_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case FETCH:
			{
				fetch_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case TRUNCATE:
			{
				truncate_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SETUSER:
			{
				setuser_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case COMMIT:
			{
				commit_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case CONTINUE:
			{
				continue_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case BREAK:
			{
				break_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case GOTO:
			{
				goto_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RAISERROR:
			{
				raiserror_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case PRINT:
			{
				print_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RETURN:
			{
				return_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case IF:
			{
				if_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case WHILE:
			{
				while_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case USE:
			{
				use_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SAVE:
			{
				save_transaction_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case WAITFOR:
			{
				waitfor_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case READTEXT:
			{
				readtext_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case WRITETEXT:
			{
				writetext_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case UPDATETEXT:
			{
				updatetext_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case KILL:
			{
				kill_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case DBCC:
			{
				dbcc_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RECONFIGURE:
			{
				reconfigure_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SHUTDOWN:
			{
				shutdown_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case BACKUP:
			{
				backup_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RESTORE:
			{
				restore_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case BULK:
			{
				bulk_insert_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LOCK:
			{
				lock_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case GRANT:
			{
				grant_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case REVOKE:
			{
				revoke_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case DENY:
			{
				deny_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			{
				pragma_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case DUMP:
			{
				dump_stmt();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
				if ((LA(1)==CREATE) && (LA(2)==TABLE)) {
					create_table_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==ALTER) && (LA(2)==TABLE)) {
					alter_table_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==DROP) && (LA(2)==TABLE)) {
					drop_table_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==CREATE) && (_tokenSet_9.member(LA(2)))) {
					create_index_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==CREATE) && (LA(2)==DATABASE)) {
					create_database_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==CREATE) && (LA(2)==DEFAULT)) {
					create_default_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==DROP) && (LA(2)==DEFAULT)) {
					drop_default_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==UPDATE) && (_tokenSet_10.member(LA(2)))) {
					update_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==DELETE) && (_tokenSet_11.member(LA(2)))) {
					delete_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==BEGIN) && (_tokenSet_12.member(LA(2)))) {
					bs=block_stmt();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					boolean synPredMatched243 = false;
					if (((LA(1)==SET) && (_tokenSet_13.member(LA(2))))) {
						int _m243 = mark();
						synPredMatched243 = true;
						inputState.guessing++;
						try {
							{
							set_stmt();
							}
						}
						catch (RecognitionException pe) {
							synPredMatched243 = false;
						}
						rewind(_m243);
						inputState.guessing--;
					}
					if ( synPredMatched243 ) {
						set_stmt();
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_14.member(LA(1))) && (_tokenSet_15.member(LA(2)))) {
						select_stmt();
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((LA(1)==CREATE||LA(1)==ALTER) && (LA(2)==VIEW)) {
						create_view_stmt();
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((LA(1)==DROP) && (LA(2)==VIEW)) {
						drop_view_stmt();
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						boolean synPredMatched245 = false;
						if (((LA(1)==DECLARE) && (LA(2)==LOCAL))) {
							int _m245 = mark();
							synPredMatched245 = true;
							inputState.guessing++;
							try {
								{
								match(DECLARE);
								match(LOCAL);
								match(TEMPORARY);
								}
							}
							catch (RecognitionException pe) {
								synPredMatched245 = false;
							}
							rewind(_m245);
							inputState.guessing--;
						}
						if ( synPredMatched245 ) {
							declare_loc_temp_table();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==DECLARE) && (_tokenSet_2.member(LA(2)))) {
							declare_cursor_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==ROLLBACK) && (_tokenSet_16.member(LA(2)))) {
							rollback_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==CREATE) && (LA(2)==ROLE)) {
							create_role_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==ALTER) && (LA(2)==ROLE)) {
							alter_role_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==DROP) && (LA(2)==ROLE)) {
							drop_role_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==DECLARE) && (LA(2)==AT_IDENT)) {
							variable_declaration_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==DROP) && (LA(2)==TRIGGER)) {
							drop_trigger_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==DROP) && (LA(2)==INDEX)) {
							drop_index_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==EXEC||LA(1)==EXECUTE) && (LA(2)==LPAREN)) {
							exec_string_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==DROP) && (LA(2)==PROCEDURE||LA(2)==PROC)) {
							drop_procedure_stmt();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else {
							boolean synPredMatched247 = false;
							if (((LA(1)==EXEC||LA(1)==EXECUTE) && (_tokenSet_3.member(LA(2))))) {
								int _m247 = mark();
								synPredMatched247 = true;
								inputState.guessing++;
								try {
									{
									exec_sp_proc_call_stmt();
									}
								}
								catch (RecognitionException pe) {
									synPredMatched247 = false;
								}
								rewind(_m247);
								inputState.guessing--;
							}
							if ( synPredMatched247 ) {
								exec_sp_proc_call_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==EXEC||LA(1)==EXECUTE) && (_tokenSet_5.member(LA(2)))) {
								exec_proc_call_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==ROLLBACK) && (LA(2)==TRIGGER)) {
								rollback_trigger_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==BEGIN) && (_tokenSet_17.member(LA(2)))) {
								begin_transaction_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==CREATE) && (LA(2)==FUNCTION)) {
								create_function_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==DROP) && (LA(2)==FUNCTION)) {
								drop_function_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==CREATE) && (LA(2)==DOMAIN||LA(2)==DATATYPE)) {
								create_domain_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==CREATE) && (LA(2)==STATISTICS)) {
								create_statistics_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==UPDATE) && (LA(2)==STATISTICS)) {
								update_statistics_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==DROP||LA(1)==DELETE) && (LA(2)==STATISTICS||LA(2)==SHARED)) {
								drop_statistics_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==CREATE) && (LA(2)==SCHEMA)) {
								create_schema_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==DROP) && (LA(2)==DATABASE)) {
								drop_database_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==CREATE) && (LA(2)==RULE)) {
								create_rule_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA(1)==DROP) && (LA(2)==RULE)) {
								drop_rule_stmt();
								astFactory.addASTChild(currentAST, returnAST);
							}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						}}}}
						}
						tsql_stmt_AST = (AST)currentAST.root;
					}
					catch (RecognitionException ex) {
						if (inputState.guessing==0) {
							
							//	   	System.out.println("tsql_stmt: "+ex);
								   	if (LA(1)==BEGIN) {
								   		tsql_stmt_AST=block_stmt();
								   	}
								   	else {
								   	 AST us = reportSyntaxError(ex);
								     tsql_stmt_AST = us;
								     SrcAST.setSpan( tsql_stmt_AST, firstNode, us);
								   	}
									
						} else {
							throw ex;
						}
					}
					returnAST = tsql_stmt_AST;
				}
				
	public final void create_table_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_table_stmt_AST = null;
		AST cr_AST = null;
		AST qt_AST = null;
		AST tcdef_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST l_AST = null;
		AST w_AST = null;
		AST o_AST = null;
		AST t_AST = null;
		AST e_AST = null;
		
		create_table();
		cr_AST = (AST)returnAST;
		qualified_table_name();
		qt_AST = (AST)returnAST;
		AST tmp1_AST = null;
		tmp1_AST = astFactory.create(LT(1));
		match(LPAREN);
		col_or_table_constr_def_list();
		tcdef_AST = (AST)returnAST;
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		{
		boolean synPredMatched442 = false;
		if (((LA(1)==LOCK) && (_tokenSet_18.member(LA(2))))) {
			int _m442 = mark();
			synPredMatched442 = true;
			inputState.guessing++;
			try {
				{
				lock_clause();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched442 = false;
			}
			rewind(_m442);
			inputState.guessing--;
		}
		if ( synPredMatched442 ) {
			lock_clause();
			l_AST = (AST)returnAST;
		}
		else if ((_tokenSet_19.member(LA(1))) && (_tokenSet_20.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_clause();
			w_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case ON:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case EXTERNAL:
		case TEXTIMAGE_ON:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ON:
		{
			on_segment_clause();
			o_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case EXTERNAL:
		case TEXTIMAGE_ON:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case TEXTIMAGE_ON:
		{
			textimage_clause();
			t_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case EXTERNAL:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case EXTERNAL:
		{
			external_table_clause();
			e_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_table_stmt_AST = (AST)currentAST.root;
			create_table_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CREATE_TABLE,"create_table")).add(qt_AST).add(tcdef_AST)); 
				  AST[] left = {cr_AST};
				  AST[] right = {rp_AST,l_AST,w_AST,o_AST,t_AST,e_AST};
				  SrcAST.setSpan(create_table_stmt_AST,left,right);
				
			currentAST.root = create_table_stmt_AST;
			currentAST.child = create_table_stmt_AST!=null &&create_table_stmt_AST.getFirstChild()!=null ?
				create_table_stmt_AST.getFirstChild() : create_table_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_table_stmt_AST;
	}
	
/********* ALTER TABLE STMT ***********/
	public final void alter_table_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alter_table_stmt_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST qt_AST = null;
		AST alt_AST = null;
		
		a = LT(1);
		a_AST = astFactory.create(a);
		match(ALTER);
		AST tmp2_AST = null;
		tmp2_AST = astFactory.create(LT(1));
		match(TABLE);
		qualified_table_name();
		qt_AST = (AST)returnAST;
		alteration();
		alt_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			alter_table_stmt_AST = (AST)currentAST.root;
			alter_table_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(ALTER_TABLE_STMT,"alter_table_stmt")).add(qt_AST).add(alt_AST));
				  	SrcAST.setSpan(alter_table_stmt_AST,a_AST,alt_AST);
				
			currentAST.root = alter_table_stmt_AST;
			currentAST.child = alter_table_stmt_AST!=null &&alter_table_stmt_AST.getFirstChild()!=null ?
				alter_table_stmt_AST.getFirstChild() : alter_table_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = alter_table_stmt_AST;
	}
	
/********* DROP TABLE ***********/
	public final void drop_table_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_table_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST qt_list_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp3_AST = null;
		tmp3_AST = astFactory.create(LT(1));
		match(TABLE);
		qual_table_name_list();
		qt_list_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_table_stmt_AST = (AST)currentAST.root;
			drop_table_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_TABLE_STMT,"drop_table_stmt")).add(qt_list_AST));
				  	SrcAST.setSpan(drop_table_stmt_AST,d_AST,qt_list_AST);
				
			currentAST.root = drop_table_stmt_AST;
			currentAST.child = drop_table_stmt_AST!=null &&drop_table_stmt_AST.getFirstChild()!=null ?
				drop_table_stmt_AST.getFirstChild() : drop_table_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_table_stmt_AST;
	}
	
	public final void create_index_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_index_stmt_AST = null;
		Token  cr = null;
		AST cr_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST c_AST = null;
		Token  in = null;
		AST in_AST = null;
		AST i_AST = null;
		Token  on = null;
		AST on_AST = null;
		AST qt_AST = null;
		AST clist_AST = null;
		AST w_AST = null;
		AST o_AST = null;
		
		cr = LT(1);
		cr_AST = astFactory.create(cr);
		match(CREATE);
		{
		switch ( LA(1)) {
		case UNIQUE:
		{
			u = LT(1);
			u_AST = astFactory.create(u);
			match(UNIQUE);
			break;
		}
		case CLUSTERED:
		case NONCLUSTERED:
		case INDEX:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case CLUSTERED:
		case NONCLUSTERED:
		{
			cluster_clause();
			c_AST = (AST)returnAST;
			break;
		}
		case INDEX:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		in = LT(1);
		in_AST = astFactory.create(in);
		match(INDEX);
		index_name();
		i_AST = (AST)returnAST;
		on = LT(1);
		on_AST = astFactory.create(on);
		match(ON);
		qualified_table_name();
		qt_AST = (AST)returnAST;
		column_name_order_list();
		clist_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_clause_index();
			w_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case ON:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ON:
		{
			on_segment_clause();
			o_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_index_stmt_AST = (AST)currentAST.root;
			create_index_stmt_AST = (AST)astFactory.make( (new ASTArray(6)).add(astFactory.create(CREATE_INDEX_STMT,"create_index_stmt")).add(u_AST).add(c_AST).add(i_AST).add(qt_AST).add(clist_AST)); 
				    SrcAST.setSpan(create_index_stmt_AST,cr_AST, ((o_AST!=null)? o_AST : ((w_AST!=null)? w_AST : clist_AST)));  
				
			currentAST.root = create_index_stmt_AST;
			currentAST.child = create_index_stmt_AST!=null &&create_index_stmt_AST.getFirstChild()!=null ?
				create_index_stmt_AST.getFirstChild() : create_index_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_index_stmt_AST;
	}
	
/********* CREATE DATABASE STMT ************/
	public final void create_database_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_database_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST db_AST = null;
		AST opt_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CREATE);
		AST tmp4_AST = null;
		tmp4_AST = astFactory.create(LT(1));
		match(DATABASE);
		database_name();
		db_AST = (AST)returnAST;
		db_opts();
		opt_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			create_database_stmt_AST = (AST)currentAST.root;
			create_database_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CREATE_DATABASE_STMT,"create_database_stmt")).add(db_AST)); 
				    SrcAST.setSpan(create_database_stmt_AST,c_AST,opt_AST);
				
			currentAST.root = create_database_stmt_AST;
			currentAST.child = create_database_stmt_AST!=null &&create_database_stmt_AST.getFirstChild()!=null ?
				create_database_stmt_AST.getFirstChild() : create_database_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_database_stmt_AST;
	}
	
/******** CREATE DEFAULT STMT **********/
	public final void create_default_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_default_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST dn_AST = null;
		AST dExp_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CREATE);
		AST tmp5_AST = null;
		tmp5_AST = astFactory.create(LT(1));
		match(DEFAULT);
		ownerDOTname();
		dn_AST = (AST)returnAST;
		AST tmp6_AST = null;
		tmp6_AST = astFactory.create(LT(1));
		match(AS);
		expr();
		dExp_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			create_default_stmt_AST = (AST)currentAST.root;
			create_default_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CREATE_DEFAULT_STMT,"create_default_stmt")).add(dn_AST).add(dExp_AST)); 
				    SrcAST.setSpan(create_default_stmt_AST,c_AST,dExp_AST);
				
			currentAST.root = create_default_stmt_AST;
			currentAST.child = create_default_stmt_AST!=null &&create_default_stmt_AST.getFirstChild()!=null ?
				create_default_stmt_AST.getFirstChild() : create_default_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_default_stmt_AST;
	}
	
	public final void drop_default_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_default_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST dname_list_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp7_AST = null;
		tmp7_AST = astFactory.create(LT(1));
		match(DEFAULT);
		ownerDOTname_list();
		dname_list_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_default_stmt_AST = (AST)currentAST.root;
			drop_default_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_DEFAULT_STMT,"drop_default_stmt")).add(dname_list_AST));
				  	SrcAST.setSpan(drop_default_stmt_AST,d_AST,dname_list_AST);
				
			currentAST.root = drop_default_stmt_AST;
			currentAST.child = drop_default_stmt_AST!=null &&drop_default_stmt_AST.getFirstChild()!=null ?
				drop_default_stmt_AST.getFirstChild() : drop_default_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_default_stmt_AST;
	}
	
	public final void update_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST update_stmt_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST t_AST = null;
		AST upd_list_AST = null;
		AST fe_list_AST = null;
		AST w_AST = null;
		AST p_AST = null;
		AST cur_AST = null;
		AST w1_AST = null;
		AST p1_AST = null;
		
		u = LT(1);
		u_AST = astFactory.create(u);
		match(UPDATE);
		table_reference();
		t_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			mssql_table_hints();
			break;
		}
		case SET:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp8_AST = null;
		tmp8_AST = astFactory.create(LT(1));
		match(SET);
		update_assignment_list();
		upd_list_AST = (AST)returnAST;
		{
		boolean synPredMatched939 = false;
		if (((LA(1)==FROM))) {
			int _m939 = mark();
			synPredMatched939 = true;
			inputState.guessing++;
			try {
				{
				match(FROM);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched939 = false;
			}
			rewind(_m939);
			inputState.guessing--;
		}
		if ( synPredMatched939 ) {
			AST tmp9_AST = null;
			tmp9_AST = astFactory.create(LT(1));
			match(FROM);
			from_elem_list();
			fe_list_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case WHERE:
			{
				where_clause();
				w_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case PLAN:
			{
				plan_clause();
				p_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				update_stmt_AST = (AST)currentAST.root;
				AST joinUpd = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(JOINED_UPDATE,"joined_update")).add(t_AST).add(upd_list_AST).add(fe_list_AST).add(w_AST));
					       update_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UPDATE_STMT,"update_stmt")).add(joinUpd));
					
				currentAST.root = update_stmt_AST;
				currentAST.child = update_stmt_AST!=null &&update_stmt_AST.getFirstChild()!=null ?
					update_stmt_AST.getFirstChild() : update_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			boolean synPredMatched943 = false;
			if (((LA(1)==WHERE) && (LA(2)==CURRENT))) {
				int _m943 = mark();
				synPredMatched943 = true;
				inputState.guessing++;
				try {
					{
					match(WHERE);
					match(CURRENT);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched943 = false;
				}
				rewind(_m943);
				inputState.guessing--;
			}
			if ( synPredMatched943 ) {
				{
				where_cursor_clause();
				cur_AST = (AST)returnAST;
				}
				if ( inputState.guessing==0 ) {
					update_stmt_AST = (AST)currentAST.root;
					AST cursorUpd = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(CURSOR_UPDATE,"cursor_update")).add(t_AST).add(upd_list_AST).add(cur_AST));
						       update_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UPDATE_STMT,"update_stmt")).add(cursorUpd));
						
					currentAST.root = update_stmt_AST;
					currentAST.child = update_stmt_AST!=null &&update_stmt_AST.getFirstChild()!=null ?
						update_stmt_AST.getFirstChild() : update_stmt_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_21.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
				{
				switch ( LA(1)) {
				case WHERE:
				{
					where_clause();
					w1_AST = (AST)returnAST;
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case CHECKPOINT:
				case ALTER:
				case DROP:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case PLAN:
				case DENY:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case SEMI_COLON:
				case LPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case PLAN:
				{
					plan_clause();
					p1_AST = (AST)returnAST;
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case CHECKPOINT:
				case ALTER:
				case DROP:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case DENY:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case SEMI_COLON:
				case LPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				if ( inputState.guessing==0 ) {
					update_stmt_AST = (AST)currentAST.root;
					AST simpleUpd = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(SIMPLE_UPDATE,"simple_update")).add(t_AST).add(upd_list_AST).add(w1_AST));
						       update_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UPDATE_STMT,"update_stmt")).add(simpleUpd));
						
					currentAST.root = update_stmt_AST;
					currentAST.child = update_stmt_AST!=null &&update_stmt_AST.getFirstChild()!=null ?
						update_stmt_AST.getFirstChild() : update_stmt_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				update_stmt_AST = (AST)currentAST.root;
				
					 	AST[] left = {u_AST};
					 	AST[] right = {upd_list_AST,fe_list_AST,w_AST,p_AST,cur_AST,w1_AST,p1_AST};
					 	SrcAST.setSpan(update_stmt_AST,left,right);
					
			}
			returnAST = update_stmt_AST;
		}
		
	public final void insert_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST insert_stmt_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST t_AST = null;
		AST clist_AST = null;
		AST sel_AST = null;
		AST elist_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST ex_AST = null;
		AST ex2_AST = null;
		
		i = LT(1);
		i_AST = astFactory.create(i);
		match(INSERT);
		{
		if ((LA(1)==INTO)) {
			AST tmp10_AST = null;
			tmp10_AST = astFactory.create(LT(1));
			match(INTO);
		}
		else if ((_tokenSet_10.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		table_reference();
		t_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			mssql_table_hints();
			break;
		}
		case EXEC:
		case EXECUTE:
		case SELECT:
		case VALUES:
		case SET:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		boolean synPredMatched927 = false;
		if (((LA(1)==LPAREN) && (_tokenSet_2.member(LA(2))))) {
			int _m927 = mark();
			synPredMatched927 = true;
			inputState.guessing++;
			try {
				{
				match(LPAREN);
				qualified_column_name();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched927 = false;
			}
			rewind(_m927);
			inputState.guessing--;
		}
		if ( synPredMatched927 ) {
			AST tmp11_AST = null;
			tmp11_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_column_name_list();
			clist_AST = (AST)returnAST;
			AST tmp12_AST = null;
			tmp12_AST = astFactory.create(LT(1));
			match(RPAREN);
		}
		else if ((_tokenSet_23.member(LA(1))) && (_tokenSet_15.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case SELECT:
		case SET:
		case LPAREN:
		{
			select_stmt();
			sel_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				insert_stmt_AST = (AST)currentAST.root;
				AST insert_select = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(INSERT_SELECT,"insert_select")).add(t_AST).add(clist_AST).add(sel_AST));
					  		insert_stmt_AST  = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(INSERT_STMT,"insert_stmt")).add(insert_select));
					  	
				currentAST.root = insert_stmt_AST;
				currentAST.child = insert_stmt_AST!=null &&insert_stmt_AST.getFirstChild()!=null ?
					insert_stmt_AST.getFirstChild() : insert_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case VALUES:
		{
			AST tmp13_AST = null;
			tmp13_AST = astFactory.create(LT(1));
			match(VALUES);
			AST tmp14_AST = null;
			tmp14_AST = astFactory.create(LT(1));
			match(LPAREN);
			{
			if ((_tokenSet_24.member(LA(1)))) {
				expr_list();
				elist_AST = (AST)returnAST;
			}
			else if ((LA(1)==RPAREN)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				insert_stmt_AST = (AST)currentAST.root;
				
					      	 AST insert_values = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(INSERT_VALUES,"insert_values")).add(t_AST).add(clist_AST).add(elist_AST));
					      	 insert_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(INSERT_STMT,"insert_stmt")).add(insert_values));
					
				currentAST.root = insert_stmt_AST;
				currentAST.child = insert_stmt_AST!=null &&insert_stmt_AST.getFirstChild()!=null ?
					insert_stmt_AST.getFirstChild() : insert_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case EXEC:
		case EXECUTE:
		{
			{
			if ((LA(1)==EXEC||LA(1)==EXECUTE) && (LA(2)==LPAREN)) {
				exec_string_stmt();
				ex_AST = (AST)returnAST;
			}
			else if ((LA(1)==EXEC||LA(1)==EXECUTE) && (_tokenSet_5.member(LA(2)))) {
				exec_proc_call_stmt();
				ex2_AST = (AST)returnAST;
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				insert_stmt_AST = (AST)currentAST.root;
				
					      	 insert_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(INSERT_STMT,"insert_stmt")).add((AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(INSERT_EXEC,"insert_exec")).add(t_AST).add(clist_AST).add(ex_AST).add(ex2_AST)))); 
					
				currentAST.root = insert_stmt_AST;
				currentAST.child = insert_stmt_AST!=null &&insert_stmt_AST.getFirstChild()!=null ?
					insert_stmt_AST.getFirstChild() : insert_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			insert_stmt_AST = (AST)currentAST.root;
			insert_stmt_AST.setText("INSERT_STMT"); 
				     AST[] left = {i_AST};
				     AST[] right = {sel_AST,rp_AST,ex_AST,ex2_AST};
				     SrcAST.setSpan(insert_stmt_AST,left,right);
				
		}
		returnAST = insert_stmt_AST;
	}
	
	public final void delete_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST delete_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST t_AST = null;
		AST cursor_AST = null;
		AST w_AST = null;
		AST p_AST = null;
		AST fe_AST = null;
		AST w1_AST = null;
		AST p2_AST = null;
		AST delete = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DELETE);
		{
		if ((LA(1)==FROM)) {
			AST tmp15_AST = null;
			tmp15_AST = astFactory.create(LT(1));
			match(FROM);
		}
		else if ((_tokenSet_10.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		table_reference();
		t_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			mssql_table_hints();
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case FROM:
		case DECLARE:
		case WHERE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case PLAN:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		boolean synPredMatched957 = false;
		if (((LA(1)==WHERE) && (LA(2)==CURRENT))) {
			int _m957 = mark();
			synPredMatched957 = true;
			inputState.guessing++;
			try {
				{
				where_cursor_clause();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched957 = false;
			}
			rewind(_m957);
			inputState.guessing--;
		}
		if ( synPredMatched957 ) {
			where_cursor_clause();
			cursor_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				delete =  (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CURSOR_DELETE,"cursor_delete")).add(cursor_AST));
			}
		}
		else if ((_tokenSet_21.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
			{
			switch ( LA(1)) {
			case WHERE:
			{
				where_clause();
				w_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case PLAN:
			{
				plan_clause();
				p_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				delete = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SIMPLE_DELETE,"simple_delete")).add(w_AST));
			}
		}
		else if ((LA(1)==FROM)) {
			AST tmp16_AST = null;
			tmp16_AST = astFactory.create(LT(1));
			match(FROM);
			from_elem_list();
			fe_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case WHERE:
			{
				where_clause();
				w1_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case PLAN:
			{
				plan_clause();
				p2_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				delete = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(JOINED_DELETE,"joined_delete")).add(fe_AST).add(w1_AST));
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			delete_stmt_AST = (AST)currentAST.root;
			delete_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(DELETE_STMT,"delete_stmt")).add(t_AST).add(delete)); 
				     AST[] left = {d_AST};
				     AST[] right = {t_AST,cursor_AST,w_AST,p_AST,fe_AST,w1_AST,p2_AST};
				     SrcAST.setSpan(delete_stmt_AST,left,right);
				
			currentAST.root = delete_stmt_AST;
			currentAST.child = delete_stmt_AST!=null &&delete_stmt_AST.getFirstChild()!=null ?
				delete_stmt_AST.getFirstChild() : delete_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = delete_stmt_AST;
	}
	
	public final AST  block_stmt() throws RecognitionException, TokenStreamException {
		AST b;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST block_stmt_AST = null;
		Token  beg = null;
		AST beg_AST = null;
		AST stmts_AST = null;
		Token  en = null;
		AST en_AST = null;
		b = astFactory.create(BLOCK_STMT,"block_stmt");
		
		try {      // for error handling
			beg = LT(1);
			beg_AST = astFactory.create(beg);
			match(BEGIN);
			{
			switch ( LA(1)) {
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case LPAREN:
			{
				stmt_space_list(b);
				stmts_AST = (AST)returnAST;
				break;
			}
			case END:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			en = LT(1);
			en_AST = astFactory.create(en);
			match(END);
			if ( inputState.guessing==0 ) {
				block_stmt_AST = (AST)currentAST.root;
				block_stmt_AST = b; 
					    SrcAST.setSpan(block_stmt_AST,beg_AST,en_AST);
					
				currentAST.root = block_stmt_AST;
				currentAST.child = block_stmt_AST!=null &&block_stmt_AST.getFirstChild()!=null ?
					block_stmt_AST.getFirstChild() : block_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				
				//	   	System.out.println("block_stmt: "+ex);
					   		if (LA(1)==END) {
					   			consume();
					   		}
					   		else {
							   	AST us = error_statement();
								MessageDescriptor message = new MessageDescriptor(
									MessageConstants.UNKNOWN_STATEMENT_IGNORED,
									((SrcAST)us).getNodeInfo());
						
								((SrcAST)us).setErrorMsg(message);
								b.addChild(us);
								
								//parse more stmts
								if (LA(1)!=EOF && LA(1)!=END && LA(1)!=GO) {
									pure_stmt_space_list(b);
								}
								if (LA(1)==END)
									consume();
					   		}
					   		block_stmt_AST=b;
					
			} else {
				throw ex;
			}
		}
		returnAST = block_stmt_AST;
		return b;
	}
	
	public final void set_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST set_stmt_AST = null;
		Token  s2 = null;
		AST s2_AST = null;
		AST o1_AST = null;
		Token  s3 = null;
		AST s3_AST = null;
		AST s1_AST = null;
		AST w1_AST = null;
		Token  s4 = null;
		AST s4_AST = null;
		AST ilist_AST = null;
		Token  on = null;
		AST on_AST = null;
		Token  off = null;
		AST off_AST = null;
		AST w2_AST = null;
		Token  s5 = null;
		AST s5_AST = null;
		AST n_AST = null;
		Token  atID = null;
		AST atID_AST = null;
		AST cname_AST = null;
		Token  s6 = null;
		AST s6_AST = null;
		AST qt_AST = null;
		Token  on1 = null;
		AST on1_AST = null;
		Token  off1 = null;
		AST off1_AST = null;
		Token  s7 = null;
		AST s7_AST = null;
		AST r1_AST = null;
		Token  s8 = null;
		AST s8_AST = null;
		AST w3_AST = null;
		Token  s9 = null;
		AST s9_AST = null;
		AST o3_AST = null;
		Token  s10 = null;
		AST s10_AST = null;
		AST n1_AST = null;
		Token  s11 = null;
		AST s11_AST = null;
		AST o4_AST = null;
		Token  s12 = null;
		AST s12_AST = null;
		AST i1_AST = null;
		Token  s13 = null;
		AST s13_AST = null;
		AST i2_AST = null;
		Token  s14 = null;
		AST s14_AST = null;
		AST d4_AST = null;
		AST st = astFactory.create(SET_STMT,"set_stmt");
		
		{
		boolean synPredMatched1362 = false;
		if (((LA(1)==SET) && (LA(2)==ROLE))) {
			int _m1362 = mark();
			synPredMatched1362 = true;
			inputState.guessing++;
			try {
				{
				match(SET);
				match(ROLE);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1362 = false;
			}
			rewind(_m1362);
			inputState.guessing--;
		}
		if ( synPredMatched1362 ) {
			s2 = LT(1);
			s2_AST = astFactory.create(s2);
			match(SET);
			AST tmp17_AST = null;
			tmp17_AST = astFactory.create(LT(1));
			match(ROLE);
			{
			switch ( LA(1)) {
			case WITH:
			{
				opt_with_clause();
				break;
			}
			case ON:
			case OFF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case ON:
			{
				AST tmp18_AST = null;
				tmp18_AST = astFactory.create(LT(1));
				match(ON);
				break;
			}
			case OFF:
			{
				AST tmp19_AST = null;
				tmp19_AST = astFactory.create(LT(1));
				match(OFF);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				AST c1 = astFactory.create(UNSUPPORTED_SET_STMT,"unsupported_set_stmt");
						   	 SrcAST.setSpan(c1,s2_AST,o1_AST); st.addChild(c1); SrcAST.setSpan(st,c1);
						
			}
		}
		else {
			boolean synPredMatched1366 = false;
			if (((LA(1)==SET) && (_tokenSet_25.member(LA(2))))) {
				int _m1366 = mark();
				synPredMatched1366 = true;
				inputState.guessing++;
				try {
					{
					match(SET);
					set_pair();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1366 = false;
				}
				rewind(_m1366);
				inputState.guessing--;
			}
			if ( synPredMatched1366 ) {
				s3 = LT(1);
				s3_AST = astFactory.create(s3);
				match(SET);
				set_pair_list();
				s1_AST = (AST)returnAST;
				{
				switch ( LA(1)) {
				case WITH:
				{
					with_rollback_or_ident();
					w1_AST = (AST)returnAST;
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case CHECKPOINT:
				case ALTER:
				case DROP:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case DENY:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case SEMI_COLON:
				case LPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				if ( inputState.guessing==0 ) {
					st.addChild(s1_AST); 
						  	     SrcAST.setSpan(st,s3_AST,(w1_AST!=null)? w1_AST : s1_AST);
						  	
				}
			}
			else if ((LA(1)==SET) && (_tokenSet_25.member(LA(2)))) {
				s4 = LT(1);
				s4_AST = astFactory.create(s4);
				match(SET);
				identifier_or_string_list();
				ilist_AST = (AST)returnAST;
				{
				switch ( LA(1)) {
				case ON:
				{
					on = LT(1);
					on_AST = astFactory.create(on);
					match(ON);
					break;
				}
				case OFF:
				{
					off = LT(1);
					off_AST = astFactory.create(off);
					match(OFF);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case WITH:
				{
					with_rollback_or_ident();
					w2_AST = (AST)returnAST;
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case CHECKPOINT:
				case ALTER:
				case DROP:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case DENY:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case SEMI_COLON:
				case LPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				if ( inputState.guessing==0 ) {
					
						  	   	  AST[] left = {s4_AST}; AST[] right = {on_AST,off_AST,w2_AST};
						  	   	  AST i = ilist_AST.getFirstChild();
						  	 	  String opt = i.getText();
						  	 	  if (opt.equals("quoted_identifier")) {
						  	 	  	if (on != null)
						  	 	   		 TsqlGlobalOptions.SET_QUOTED_IDENTIFIER_ON = true;
						  	 	 	else TsqlGlobalOptions.SET_QUOTED_IDENTIFIER_ON = false;
						  	 	 	AST c7 = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SET_QUOTED_ID_STMT,"set_quoted_id_stmt")).add(on_AST).add(off_AST));
						  	 	 	SrcAST.setSpan(c7,left,right); st.addChild(c7); SrcAST.setSpan(st,c7);
						  	      }
						  		 else if (opt.equals("ansi_nulls") || opt.equals("ansinull"))
						  	 		{ AST c2 = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SET_ANSI_NULL,"set_ansi_null")).add(on_AST).add(off_AST)); 
						  	 		  SrcAST.setSpan(c2,left,right); st.addChild(c2); SrcAST.setSpan(st,c2);
						  	 		 }
						  		 else if (opt.equals("ansi_null_dflt_on"))
						  	 		{ AST c3 = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SET_ANSI_NULL_DFLT_ON,"set_ansi_null_dflt_on")).add(on_AST).add(off_AST)); 
						  	 		  SrcAST.setSpan(c3,left,right); st.addChild(c3); SrcAST.setSpan(st,c3);
						  	 		}
						  	 	 else if (opt.equals("ansi_null_dflt_off"))
						  	 		{ AST c4 = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SET_ANSI_NULL_DFLT_OFF,"set_ansi_null_dflt_off")).add(on_AST).add(off_AST));
						  	 		  SrcAST.setSpan(c4,left,right); st.addChild(c4); SrcAST.setSpan(st,c4);
						  	 		}
						  	 	 else if (opt.equals("nocount"))
						  	 		{ AST c5 = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SET_NOCOUNT,"set_nocount")).add(on_AST).add(off_AST)); 
						  	 		  SrcAST.setSpan(c5,left,right); st.addChild(c5); SrcAST.setSpan(st,c5);
						  	 		}
						  	 	 else { AST c6 = astFactory.create(UNSUPPORTED_SET_STMT,"unsupported_set_stmt");
						  	 	 	    SrcAST.setSpan(c6,left,right); st.addChild(c6); SrcAST.setSpan(st,c6);
						  	 		  }
						  	
				}
			}
			else if ((LA(1)==SET) && (LA(2)==CURSOR)) {
				s5 = LT(1);
				s5_AST = astFactory.create(s5);
				match(SET);
				AST tmp20_AST = null;
				tmp20_AST = astFactory.create(LT(1));
				match(CURSOR);
				AST tmp21_AST = null;
				tmp21_AST = astFactory.create(LT(1));
				match(ROWS);
				{
				switch ( LA(1)) {
				case NUM_INT:
				case PLUS:
				case MINUS:
				{
					unsigned_num_int();
					n_AST = (AST)returnAST;
					break;
				}
				case AT_IDENT:
				{
					atID = LT(1);
					atID_AST = astFactory.create(atID);
					match(AT_IDENT);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				AST tmp22_AST = null;
				tmp22_AST = astFactory.create(LT(1));
				match(FOR);
				name();
				cname_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					AST c10 = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(SET_CURSOR,"set_cursor")).add(n_AST).add(atID_AST).add(cname_AST)); 
						  	     SrcAST.setSpan(c10,s5_AST,cname_AST); st.addChild(c10); SrcAST.setSpan(st,c10);
						  	
				}
			}
			else if ((LA(1)==SET) && (LA(2)==IDENTITY_INSERT)) {
				s6 = LT(1);
				s6_AST = astFactory.create(s6);
				match(SET);
				AST tmp23_AST = null;
				tmp23_AST = astFactory.create(LT(1));
				match(IDENTITY_INSERT);
				qualified_table_name();
				qt_AST = (AST)returnAST;
				{
				switch ( LA(1)) {
				case ON:
				{
					on1 = LT(1);
					on1_AST = astFactory.create(on1);
					match(ON);
					break;
				}
				case OFF:
				{
					off1 = LT(1);
					off1_AST = astFactory.create(off1);
					match(OFF);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				if ( inputState.guessing==0 ) {
					AST c8 = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(SET_IDENTITY_INSERT,"set_identity_insert")).add(qt_AST).add(on1_AST).add(off1_AST)); 
						  	   	 AST[] l1 = {s6_AST}; AST[] r1 = {qt_AST,on1_AST,off1_AST};
						  	     SrcAST.setSpan(c8,l1,r1); st.addChild(c8); SrcAST.setSpan(st,c8);
						  	
				}
			}
			else if ((LA(1)==SET) && (LA(2)==ROWCOUNT||LA(2)==TEXTSIZE)) {
				s7 = LT(1);
				s7_AST = astFactory.create(s7);
				match(SET);
				rowcount_textsize_list();
				r1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					st.addChild(r1_AST); 
						  	     SrcAST.setSpan(st,s7_AST,r1_AST);
						  	
				}
			}
			else if ((LA(1)==SET) && (_tokenSet_26.member(LA(2)))) {
				{
				if ((LA(1)==SET) && (LA(2)==LOCK)) {
					s8 = LT(1);
					s8_AST = astFactory.create(s8);
					match(SET);
					AST tmp24_AST = null;
					tmp24_AST = astFactory.create(LT(1));
					match(LOCK);
					{
					switch ( LA(1)) {
					case WAIT:
					{
						AST tmp25_AST = null;
						tmp25_AST = astFactory.create(LT(1));
						match(WAIT);
						unsigned_num_int();
						break;
					}
					case NOWAIT:
					{
						AST tmp26_AST = null;
						tmp26_AST = astFactory.create(LT(1));
						match(NOWAIT);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else if ((LA(1)==SET) && (LA(2)==OFFSETS)) {
					s9 = LT(1);
					s9_AST = astFactory.create(s9);
					match(SET);
					AST tmp27_AST = null;
					tmp27_AST = astFactory.create(LT(1));
					match(OFFSETS);
					offset_var_list();
					{
					switch ( LA(1)) {
					case ON:
					{
						AST tmp28_AST = null;
						tmp28_AST = astFactory.create(LT(1));
						match(ON);
						break;
					}
					case OFF:
					{
						AST tmp29_AST = null;
						tmp29_AST = astFactory.create(LT(1));
						match(OFF);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else if ((LA(1)==SET) && (LA(2)==SESSION)) {
					s10 = LT(1);
					s10_AST = astFactory.create(s10);
					match(SET);
					AST tmp30_AST = null;
					tmp30_AST = astFactory.create(LT(1));
					match(SESSION);
					AST tmp31_AST = null;
					tmp31_AST = astFactory.create(LT(1));
					match(AUTHORIZATION);
					name();
					n1_AST = (AST)returnAST;
				}
				else if ((LA(1)==SET) && (LA(2)==STATISTICS)) {
					s11 = LT(1);
					s11_AST = astFactory.create(s11);
					match(SET);
					AST tmp32_AST = null;
					tmp32_AST = astFactory.create(LT(1));
					match(STATISTICS);
					identifier_list();
					{
					switch ( LA(1)) {
					case ON:
					{
						AST tmp33_AST = null;
						tmp33_AST = astFactory.create(LT(1));
						match(ON);
						break;
					}
					case OFF:
					{
						AST tmp34_AST = null;
						tmp34_AST = astFactory.create(LT(1));
						match(OFF);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else if ((LA(1)==SET) && (LA(2)==TABLE)) {
					s12 = LT(1);
					s12_AST = astFactory.create(s12);
					match(SET);
					AST tmp35_AST = null;
					tmp35_AST = astFactory.create(LT(1));
					match(TABLE);
					AST tmp36_AST = null;
					tmp36_AST = astFactory.create(LT(1));
					match(COUNT);
					unsigned_num_int();
					i1_AST = (AST)returnAST;
				}
				else if ((LA(1)==SET) && (LA(2)==TRANSACTION||LA(2)==TRAN)) {
					s13 = LT(1);
					s13_AST = astFactory.create(s13);
					match(SET);
					{
					switch ( LA(1)) {
					case TRANSACTION:
					{
						AST tmp37_AST = null;
						tmp37_AST = astFactory.create(LT(1));
						match(TRANSACTION);
						break;
					}
					case TRAN:
					{
						AST tmp38_AST = null;
						tmp38_AST = astFactory.create(LT(1));
						match(TRAN);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					AST tmp39_AST = null;
					tmp39_AST = astFactory.create(LT(1));
					match(ISOLATION);
					AST tmp40_AST = null;
					tmp40_AST = astFactory.create(LT(1));
					match(LEVEL);
					isolation_level();
					i2_AST = (AST)returnAST;
				}
				else if ((LA(1)==SET) && (LA(2)==PLAN)) {
					s14 = LT(1);
					s14_AST = astFactory.create(s14);
					match(SET);
					AST tmp41_AST = null;
					tmp41_AST = astFactory.create(LT(1));
					match(PLAN);
					{
					switch ( LA(1)) {
					case DUMP:
					case LOAD:
					{
						{
						switch ( LA(1)) {
						case DUMP:
						{
							AST tmp42_AST = null;
							tmp42_AST = astFactory.create(LT(1));
							match(DUMP);
							break;
						}
						case LOAD:
						{
							AST tmp43_AST = null;
							tmp43_AST = astFactory.create(LT(1));
							match(LOAD);
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
						{
						if ((_tokenSet_2.member(LA(1)))) {
							name();
						}
						else if ((LA(1)==ON||LA(1)==OFF)) {
						}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						
						}
						{
						switch ( LA(1)) {
						case ON:
						{
							AST tmp44_AST = null;
							tmp44_AST = astFactory.create(LT(1));
							match(ON);
							break;
						}
						case OFF:
						{
							AST tmp45_AST = null;
							tmp45_AST = astFactory.create(LT(1));
							match(OFF);
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
						break;
					}
					case EXISTS:
					{
						AST tmp46_AST = null;
						tmp46_AST = astFactory.create(LT(1));
						match(EXISTS);
						AST tmp47_AST = null;
						tmp47_AST = astFactory.create(LT(1));
						match(CHECK);
						{
						switch ( LA(1)) {
						case ON:
						{
							AST tmp48_AST = null;
							tmp48_AST = astFactory.create(LT(1));
							match(ON);
							break;
						}
						case OFF:
						{
							AST tmp49_AST = null;
							tmp49_AST = astFactory.create(LT(1));
							match(OFF);
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
						break;
					}
					case REPLACE:
					{
						AST tmp50_AST = null;
						tmp50_AST = astFactory.create(LT(1));
						match(REPLACE);
						{
						switch ( LA(1)) {
						case ON:
						{
							AST tmp51_AST = null;
							tmp51_AST = astFactory.create(LT(1));
							match(ON);
							break;
						}
						case OFF:
						{
							AST tmp52_AST = null;
							tmp52_AST = astFactory.create(LT(1));
							match(OFF);
							break;
						}
						default:
						{
							throw new NoViableAltException(LT(1), getFilename());
						}
						}
						}
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					AST c9 = astFactory.create(UNSUPPORTED_SET_STMT,"unsupported_set_stmt");
						  	   	 AST[] l2 = { s8_AST,s9_AST,s10_AST,s11_AST,s12_AST,s13_AST,s14_AST };
						  	   	 AST[] r2 = { w3_AST,o3_AST,n1_AST,o4_AST,i1_AST,i2_AST,d4_AST};
						  	   	 SrcAST.setSpan (c9,l2,r2); st.addChild(c9); SrcAST.setSpan(st,c9);
						  	
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				set_stmt_AST = (AST)currentAST.root;
				set_stmt_AST = st;
				currentAST.root = set_stmt_AST;
				currentAST.child = set_stmt_AST!=null &&set_stmt_AST.getFirstChild()!=null ?
					set_stmt_AST.getFirstChild() : set_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			returnAST = set_stmt_AST;
		}
		
/************* RULE FOR SELECT STMT *******************/
	public final void select_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST select_stmt_AST = null;
		Token  s = null;
		AST s_AST = null;
		AST pr_AST = null;
		AST d_AST = null;
		AST tnp_AST = null;
		AST vl_AST = null;
		AST f_AST = null;
		AST w_AST = null;
		AST g_AST = null;
		AST h_AST = null;
		AST ord_AST = null;
		AST cc_AST = null;
		AST upd_AST = null;
		AST is_AST = null;
		AST br_AST = null;
		AST op_AST = null;
		AST pl_AST = null;
		AST sh_AST = null;
		AST ord1_AST = null;
		AST cc1_AST = null;
		AST upd1_AST = null;
		AST a_AST = null;
		AST f1_AST = null;
		AST o_AST = null;
		AST p_AST = null;
		Token  set = null;
		AST set_AST = null;
		AST v_AST = null;
		
		boolean synPredMatched704 = false;
		if (((LA(1)==SELECT) && (_tokenSet_27.member(LA(2))))) {
			int _m704 = mark();
			synPredMatched704 = true;
			inputState.guessing++;
			try {
				{
				match(SELECT);
				{
				switch ( LA(1)) {
				case ALL:
				case DISTINCT:
				{
					distinct_clause();
					break;
				}
				case TOP:
				case AT_IDENT:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case TOP:
				{
					top_n_percent();
					break;
				}
				case AT_IDENT:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				variable_assignment_list();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched704 = false;
			}
			rewind(_m704);
			inputState.guessing--;
		}
		if ( synPredMatched704 ) {
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SELECT);
			{
			switch ( LA(1)) {
			case SINGLE_ROW:
			{
				single_row_pragma();
				pr_AST = (AST)returnAST;
				break;
			}
			case ALL:
			case DISTINCT:
			case TOP:
			case AT_IDENT:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case ALL:
			case DISTINCT:
			{
				distinct_clause();
				d_AST = (AST)returnAST;
				break;
			}
			case TOP:
			case AT_IDENT:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case TOP:
			{
				top_n_percent();
				tnp_AST = (AST)returnAST;
				break;
			}
			case AT_IDENT:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			variable_assignment_list();
			vl_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case FROM:
			{
				from_clause();
				f_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WHERE:
			{
				where_clause();
				w_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case GROUP:
			{
				group_by_clause();
				g_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case HAVING:
			{
				having_clause();
				h_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case ORDER:
			{
				order_by_clause();
				ord_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case COMPUTE:
			{
				compute_clause_list();
				cc_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			boolean synPredMatched716 = false;
			if (((LA(1)==FOR) && (LA(2)==READ||LA(2)==UPDATE))) {
				int _m716 = mark();
				synPredMatched716 = true;
				inputState.guessing++;
				try {
					{
					for_readonly();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched716 = false;
				}
				rewind(_m716);
				inputState.guessing--;
			}
			if ( synPredMatched716 ) {
				for_readonly();
				upd_AST = (AST)returnAST;
			}
			else if ((_tokenSet_28.member(LA(1))) && (_tokenSet_29.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			switch ( LA(1)) {
			case AT:
			{
				at_isolation_clause();
				is_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case FOR:
			{
				for_browse();
				br_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPTION:
			{
				option_clause();
				op_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case PLAN:
			{
				plan_clause();
				pl_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				select_stmt_AST = (AST)currentAST.root;
				AST var_sel = (AST)astFactory.make( (new ASTArray(12)).add(astFactory.create(VARIABLE_ASSIGN_SELECT,"variable_assign_select")).add(pr_AST).add(d_AST).add(tnp_AST).add(vl_AST).add(f_AST).add(w_AST).add(g_AST).add(h_AST).add(ord_AST).add(cc_AST).add(upd_AST));
					   select_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SELECT_STMT,"select_stmt")).add(var_sel));
					   AST[] left = {s_AST};
					   AST[] right = {vl_AST,f_AST,w_AST,g_AST,h_AST,ord_AST,cc_AST,upd_AST,is_AST,br_AST,op_AST,pl_AST};
					   SrcAST.setSpan (select_stmt_AST,left,right);
					
				currentAST.root = select_stmt_AST;
				currentAST.child = select_stmt_AST!=null &&select_stmt_AST.getFirstChild()!=null ?
					select_stmt_AST.getFirstChild() : select_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==SELECT||LA(1)==LPAREN) && (_tokenSet_15.member(LA(2)))) {
			select_stmt_head();
			sh_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case ORDER:
			{
				order_by_clause();
				ord1_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case COMPUTE:
			{
				compute_clause_list();
				cc1_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			boolean synPredMatched725 = false;
			if (((LA(1)==FOR) && (LA(2)==READ||LA(2)==UPDATE))) {
				int _m725 = mark();
				synPredMatched725 = true;
				inputState.guessing++;
				try {
					{
					for_readonly();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched725 = false;
				}
				rewind(_m725);
				inputState.guessing--;
			}
			if ( synPredMatched725 ) {
				for_readonly();
				upd1_AST = (AST)returnAST;
			}
			else if ((_tokenSet_28.member(LA(1))) && (_tokenSet_29.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			switch ( LA(1)) {
			case AT:
			{
				at_isolation_clause();
				a_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case FOR:
			{
				for_browse();
				f1_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OPTION:
			{
				option_clause();
				o_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case PLAN:
			{
				plan_clause();
				p_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				select_stmt_AST = (AST)currentAST.root;
				sh_AST.addChild(ord1_AST);      	
					sh_AST.addChild(cc1_AST);
					sh_AST.addChild(upd1_AST);
					select_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SELECT_STMT,"select_stmt")).add(sh_AST));
					AST[] left = {sh_AST};
					AST[] right = {ord1_AST,cc1_AST,upd1_AST,a_AST,f1_AST,o_AST,p_AST};
					SrcAST.setSpan(select_stmt_AST,left,right);
				
				currentAST.root = select_stmt_AST;
				currentAST.child = select_stmt_AST!=null &&select_stmt_AST.getFirstChild()!=null ?
					select_stmt_AST.getFirstChild() : select_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==SET)) {
			set = LT(1);
			set_AST = astFactory.create(set);
			match(SET);
			variable_or_cursor_assignment();
			v_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				select_stmt_AST = (AST)currentAST.root;
				
					  AST var_list = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(VARIABLE_ASSIGNMENT_LIST,"variable_assignment_list")).add(v_AST));
					  AST var_sel2 = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(VARIABLE_ASSIGN_SELECT,"variable_assign_select")).add(var_list));
					  select_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SELECT_STMT,"select_stmt")).add(var_sel2));
					  SrcAST.setSpan(select_stmt_AST,set_AST,v_AST);
				
				currentAST.root = select_stmt_AST;
				currentAST.child = select_stmt_AST!=null &&select_stmt_AST.getFirstChild()!=null ?
					select_stmt_AST.getFirstChild() : select_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = select_stmt_AST;
	}
	
	public final void create_view_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_view_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST vname_AST = null;
		AST cols_AST = null;
		AST sel_AST = null;
		Token  o = null;
		AST o_AST = null;
		
		{
		switch ( LA(1)) {
		case CREATE:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			match(CREATE);
			break;
		}
		case ALTER:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ALTER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp53_AST = null;
		tmp53_AST = astFactory.create(LT(1));
		match(VIEW);
		ownerDOTname();
		vname_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case LPAREN:
		{
			AST tmp54_AST = null;
			tmp54_AST = astFactory.create(LT(1));
			match(LPAREN);
			column_list();
			cols_AST = (AST)returnAST;
			AST tmp55_AST = null;
			tmp55_AST = astFactory.create(LT(1));
			match(RPAREN);
			break;
		}
		case WITH:
		case AS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_view_attr();
			break;
		}
		case AS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp56_AST = null;
		tmp56_AST = astFactory.create(LT(1));
		match(AS);
		select_stmt();
		sel_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			AST tmp57_AST = null;
			tmp57_AST = astFactory.create(LT(1));
			match(WITH);
			AST tmp58_AST = null;
			tmp58_AST = astFactory.create(LT(1));
			match(CHECK);
			o = LT(1);
			o_AST = astFactory.create(o);
			match(OPTION);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_view_stmt_AST = (AST)currentAST.root;
			if (c!=null)
				  		create_view_stmt_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(CREATE_VIEW_STMT,"create_view_stmt")).add(vname_AST).add(cols_AST).add(sel_AST));
				  	else create_view_stmt_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(ALTER_VIEW_STMT,"alter_view_stmt")).add(vname_AST).add(cols_AST).add(sel_AST));
				  	SrcAST.setSpan(create_view_stmt_AST, ((c_AST!=null)? c_AST : a_AST), ((o_AST!=null)? o_AST : sel_AST));
				
			currentAST.root = create_view_stmt_AST;
			currentAST.child = create_view_stmt_AST!=null &&create_view_stmt_AST.getFirstChild()!=null ?
				create_view_stmt_AST.getFirstChild() : create_view_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_view_stmt_AST;
	}
	
	public final void drop_view_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_view_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST vname_list_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp59_AST = null;
		tmp59_AST = astFactory.create(LT(1));
		match(VIEW);
		ownerDOTname_list();
		vname_list_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_view_stmt_AST = (AST)currentAST.root;
			drop_view_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_VIEW_STMT,"drop_view_stmt")).add(vname_list_AST)); 
				    SrcAST.setSpan(drop_view_stmt_AST,d_AST,vname_list_AST);
				
			currentAST.root = drop_view_stmt_AST;
			currentAST.child = drop_view_stmt_AST!=null &&drop_view_stmt_AST.getFirstChild()!=null ?
				drop_view_stmt_AST.getFirstChild() : drop_view_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_view_stmt_AST;
	}
	
	public final void declare_loc_temp_table() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declare_loc_temp_table_AST = null;
		AST tname_AST = null;
		AST tcdef_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  p = null;
		AST p_AST = null;
		
		AST tmp60_AST = null;
		tmp60_AST = astFactory.create(LT(1));
		match(DECLARE);
		AST tmp61_AST = null;
		tmp61_AST = astFactory.create(LT(1));
		match(LOCAL);
		AST tmp62_AST = null;
		tmp62_AST = astFactory.create(LT(1));
		match(TEMPORARY);
		AST tmp63_AST = null;
		tmp63_AST = astFactory.create(LT(1));
		match(TABLE);
		name();
		tname_AST = (AST)returnAST;
		AST tmp64_AST = null;
		tmp64_AST = astFactory.create(LT(1));
		match(LPAREN);
		col_or_table_constr_def_list();
		tcdef_AST = (AST)returnAST;
		AST tmp65_AST = null;
		tmp65_AST = astFactory.create(LT(1));
		match(RPAREN);
		{
		switch ( LA(1)) {
		case ON:
		{
			AST tmp66_AST = null;
			tmp66_AST = astFactory.create(LT(1));
			match(ON);
			AST tmp67_AST = null;
			tmp67_AST = astFactory.create(LT(1));
			match(COMMIT);
			{
			switch ( LA(1)) {
			case DELETE:
			{
				d = LT(1);
				d_AST = astFactory.create(d);
				match(DELETE);
				break;
			}
			case PRESERVE:
			{
				p = LT(1);
				p_AST = astFactory.create(p);
				match(PRESERVE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp68_AST = null;
			tmp68_AST = astFactory.create(LT(1));
			match(ROWS);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			declare_loc_temp_table_AST = (AST)currentAST.root;
			declare_loc_temp_table_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(DECLARE_LOC_TEMP_TABLE,"declare_loc_temp_table")).add(tname_AST).add(tcdef_AST).add(d_AST).add(p_AST));
			currentAST.root = declare_loc_temp_table_AST;
			currentAST.child = declare_loc_temp_table_AST!=null &&declare_loc_temp_table_AST.getFirstChild()!=null ?
				declare_loc_temp_table_AST.getFirstChild() : declare_loc_temp_table_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = declare_loc_temp_table_AST;
	}
	
	public final void declare_cursor_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declare_cursor_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST n_AST = null;
		AST sel_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DECLARE);
		name();
		n_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case INSENSITIVE:
		{
			match(INSENSITIVE);
			break;
		}
		case CURSOR:
		case SCROLL:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case SCROLL:
		{
			match(SCROLL);
			break;
		}
		case CURSOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp71_AST = null;
		tmp71_AST = astFactory.create(LT(1));
		match(CURSOR);
		sql_server_cursor_options();
		AST tmp72_AST = null;
		tmp72_AST = astFactory.create(LT(1));
		match(FOR);
		select_stmt();
		sel_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			declare_cursor_stmt_AST = (AST)currentAST.root;
			declare_cursor_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(DECLARE_CURSOR_STMT,"declare_cursor_stmt")).add(n_AST).add(sel_AST)); 
				    SrcAST.setSpan(declare_cursor_stmt_AST,d_AST,sel_AST);
				
			currentAST.root = declare_cursor_stmt_AST;
			currentAST.child = declare_cursor_stmt_AST!=null &&declare_cursor_stmt_AST.getFirstChild()!=null ?
				declare_cursor_stmt_AST.getFirstChild() : declare_cursor_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = declare_cursor_stmt_AST;
	}
	
	public final void open_cursor_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST open_cursor_stmt_AST = null;
		Token  o = null;
		AST o_AST = null;
		AST c_AST = null;
		
		o = LT(1);
		o_AST = astFactory.create(o);
		match(OPEN);
		cursor_ref();
		c_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			open_cursor_stmt_AST = (AST)currentAST.root;
			open_cursor_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(OPEN_CURSOR_STMT,"open_cursor_stmt")).add(c_AST));
				  SrcAST.setSpan(open_cursor_stmt_AST,o_AST,c_AST);
				
			currentAST.root = open_cursor_stmt_AST;
			currentAST.child = open_cursor_stmt_AST!=null &&open_cursor_stmt_AST.getFirstChild()!=null ?
				open_cursor_stmt_AST.getFirstChild() : open_cursor_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = open_cursor_stmt_AST;
	}
	
	public final void close_cursor_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST close_cursor_stmt_AST = null;
		Token  cl = null;
		AST cl_AST = null;
		AST c_AST = null;
		
		cl = LT(1);
		cl_AST = astFactory.create(cl);
		match(CLOSE);
		cursor_ref();
		c_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			close_cursor_stmt_AST = (AST)currentAST.root;
			close_cursor_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CLOSE_CURSOR_STMT,"close_cursor_stmt")).add(c_AST)); 
				  SrcAST.setSpan(close_cursor_stmt_AST,cl_AST,c_AST);
				
			currentAST.root = close_cursor_stmt_AST;
			currentAST.child = close_cursor_stmt_AST!=null &&close_cursor_stmt_AST.getFirstChild()!=null ?
				close_cursor_stmt_AST.getFirstChild() : close_cursor_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = close_cursor_stmt_AST;
	}
	
	public final void checkpoint_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST checkpoint_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		astFactory.addASTChild(currentAST, c_AST);
		match(CHECKPOINT);
		if ( inputState.guessing==0 ) {
			checkpoint_stmt_AST = (AST)currentAST.root;
			checkpoint_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(checkpoint_stmt_AST));
				    SrcAST.setSpan(checkpoint_stmt_AST,c_AST);
				
			currentAST.root = checkpoint_stmt_AST;
			currentAST.child = checkpoint_stmt_AST!=null &&checkpoint_stmt_AST.getFirstChild()!=null ?
				checkpoint_stmt_AST.getFirstChild() : checkpoint_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		checkpoint_stmt_AST = (AST)currentAST.root;
		returnAST = checkpoint_stmt_AST;
	}
	
	public final void deallocate_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST deallocate_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST c_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DEALLOCATE);
		{
		if ((LA(1)==CURSOR)) {
			AST tmp73_AST = null;
			tmp73_AST = astFactory.create(LT(1));
			match(CURSOR);
		}
		else if ((_tokenSet_5.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		cursor_ref();
		c_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			deallocate_stmt_AST = (AST)currentAST.root;
			deallocate_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DEALLOCATE_STMT,"deallocate_stmt")).add(c_AST)); 
				  SrcAST.setSpan(deallocate_stmt_AST,d_AST,c_AST);
				
			currentAST.root = deallocate_stmt_AST;
			currentAST.child = deallocate_stmt_AST!=null &&deallocate_stmt_AST.getFirstChild()!=null ?
				deallocate_stmt_AST.getFirstChild() : deallocate_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = deallocate_stmt_AST;
	}
	
	public final void fetch_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fetch_stmt_AST = null;
		Token  f = null;
		AST f_AST = null;
		AST fi_AST = null;
		AST c_AST = null;
		AST ftl_AST = null;
		
		f = LT(1);
		f_AST = astFactory.create(f);
		match(FETCH);
		{
		if ((_tokenSet_30.member(LA(1))) && (_tokenSet_31.member(LA(2)))) {
			fetch_index();
			fi_AST = (AST)returnAST;
		}
		else if ((_tokenSet_5.member(LA(1))) && (_tokenSet_32.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		cursor_ref();
		c_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case INTO:
		{
			AST tmp74_AST = null;
			tmp74_AST = astFactory.create(LT(1));
			match(INTO);
			fetch_target_list();
			ftl_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			fetch_stmt_AST = (AST)currentAST.root;
			fetch_stmt_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(FETCH_STMT,"fetch_stmt")).add(c_AST).add(fi_AST).add(ftl_AST)); 
				    AST[] left = {f_AST};
				    AST[] right = {c_AST,ftl_AST};
				    SrcAST.setSpan(fetch_stmt_AST,left,right);
				
			currentAST.root = fetch_stmt_AST;
			currentAST.child = fetch_stmt_AST!=null &&fetch_stmt_AST.getFirstChild()!=null ?
				fetch_stmt_AST.getFirstChild() : fetch_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = fetch_stmt_AST;
	}
	
	public final void truncate_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST truncate_stmt_AST = null;
		Token  t = null;
		AST t_AST = null;
		AST qt_AST = null;
		
		t = LT(1);
		t_AST = astFactory.create(t);
		match(TRUNCATE);
		AST tmp75_AST = null;
		tmp75_AST = astFactory.create(LT(1));
		match(TABLE);
		qualified_table_name();
		qt_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			truncate_stmt_AST = (AST)currentAST.root;
			truncate_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TRUNCATE_STMT,"truncate_stmt")).add(qt_AST)); 
				    SrcAST.setSpan(truncate_stmt_AST,t_AST,qt_AST);
				
			currentAST.root = truncate_stmt_AST;
			currentAST.child = truncate_stmt_AST!=null &&truncate_stmt_AST.getFirstChild()!=null ?
				truncate_stmt_AST.getFirstChild() : truncate_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = truncate_stmt_AST;
	}
	
	public final void setuser_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST setuser_stmt_AST = null;
		Token  s = null;
		AST s_AST = null;
		Token  ss = null;
		AST ss_AST = null;
		AST user_AST = null;
		
		if ((LA(1)==SETUSER) && (_tokenSet_33.member(LA(2)))) {
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SETUSER);
			if ( inputState.guessing==0 ) {
				setuser_stmt_AST = (AST)currentAST.root;
				setuser_stmt_AST = astFactory.create(SETUSER_STMT,"setuser_stmt"); 
					    SrcAST.setSpan(setuser_stmt_AST,s_AST);
				currentAST.root = setuser_stmt_AST;
				currentAST.child = setuser_stmt_AST!=null &&setuser_stmt_AST.getFirstChild()!=null ?
					setuser_stmt_AST.getFirstChild() : setuser_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==SETUSER) && (_tokenSet_34.member(LA(2)))) {
			ss = LT(1);
			ss_AST = astFactory.create(ss);
			match(SETUSER);
			char_string_lit();
			user_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				setuser_stmt_AST = (AST)currentAST.root;
				setuser_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SETUSER_STMT,"set_user_stmt")).add(user_AST));
					  	SrcAST.setSpan(setuser_stmt_AST,ss_AST,user_AST);
				currentAST.root = setuser_stmt_AST;
				currentAST.child = setuser_stmt_AST!=null &&setuser_stmt_AST.getFirstChild()!=null ?
					setuser_stmt_AST.getFirstChild() : setuser_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = setuser_stmt_AST;
	}
	
	public final void commit_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST commit_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  t1 = null;
		AST t1_AST = null;
		Token  t2 = null;
		AST t2_AST = null;
		AST n_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(COMMIT);
		{
		switch ( LA(1)) {
		case TRANSACTION:
		{
			t1 = LT(1);
			t1_AST = astFactory.create(t1);
			match(TRANSACTION);
			break;
		}
		case TRAN:
		{
			t2 = LT(1);
			t2_AST = astFactory.create(t2);
			match(TRAN);
			break;
		}
		default:
			if ((_tokenSet_35.member(LA(1)))) {
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((_tokenSet_2.member(LA(1)))) {
			name();
			n_AST = (AST)returnAST;
		}
		else if ((_tokenSet_33.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			commit_stmt_AST = (AST)currentAST.root;
			commit_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COMMIT_STMT,"commit_stmt")).add(n_AST)); 
				    AST[] left = {c_AST};
				    AST[] right = {t1_AST,t2_AST,n_AST};
				    SrcAST.setSpan(commit_stmt_AST,left,right);
				
			currentAST.root = commit_stmt_AST;
			currentAST.child = commit_stmt_AST!=null &&commit_stmt_AST.getFirstChild()!=null ?
				commit_stmt_AST.getFirstChild() : commit_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = commit_stmt_AST;
	}
	
	public final void rollback_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST rollback_stmt_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  t1 = null;
		AST t1_AST = null;
		Token  t2 = null;
		AST t2_AST = null;
		AST n_AST = null;
		
		r = LT(1);
		r_AST = astFactory.create(r);
		match(ROLLBACK);
		{
		switch ( LA(1)) {
		case TRANSACTION:
		{
			t1 = LT(1);
			t1_AST = astFactory.create(t1);
			match(TRANSACTION);
			break;
		}
		case TRAN:
		{
			t2 = LT(1);
			t2_AST = astFactory.create(t2);
			match(TRAN);
			break;
		}
		default:
			if ((_tokenSet_35.member(LA(1)))) {
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((_tokenSet_2.member(LA(1)))) {
			name();
			n_AST = (AST)returnAST;
		}
		else if ((_tokenSet_33.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			rollback_stmt_AST = (AST)currentAST.root;
			rollback_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ROLLBACK_STMT,"rollback_stmt")).add(n_AST)); 
				    AST[] left = {r_AST};
				    AST[] right = {t1_AST,t2_AST,n_AST};
				    SrcAST.setSpan(rollback_stmt_AST,left,right);
				
			currentAST.root = rollback_stmt_AST;
			currentAST.child = rollback_stmt_AST!=null &&rollback_stmt_AST.getFirstChild()!=null ?
				rollback_stmt_AST.getFirstChild() : rollback_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = rollback_stmt_AST;
	}
	
	public final void create_role_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_role_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST n_AST = null;
		AST o_AST = null;
		Token  num = null;
		AST num_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CREATE);
		AST tmp76_AST = null;
		tmp76_AST = astFactory.create(LT(1));
		match(ROLE);
		name();
		n_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			opt_with_clause();
			o_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case COMMA:
		{
			match(COMMA);
			alter_role_set_options();
			num = LT(1);
			num_AST = astFactory.create(num);
			match(NUM_INT);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_role_stmt_AST = (AST)currentAST.root;
			create_role_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CREATE_ROLE_STMT,"create_role_stmt")).add(n_AST)); 
				   AST[] left = {c_AST};
				   AST[] right = {n_AST,o_AST,num_AST};
				   SrcAST.setSpan(create_role_stmt_AST,left,right);
				
			currentAST.root = create_role_stmt_AST;
			currentAST.child = create_role_stmt_AST!=null &&create_role_stmt_AST.getFirstChild()!=null ?
				create_role_stmt_AST.getFirstChild() : create_role_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_role_stmt_AST;
	}
	
	public final void alter_role_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alter_role_stmt_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST n_AST = null;
		AST n2_AST = null;
		AST q_AST = null;
		Token  p = null;
		AST p_AST = null;
		Token  l = null;
		AST l_AST = null;
		Token  ul = null;
		AST ul_AST = null;
		Token  num = null;
		AST num_AST = null;
		
		a = LT(1);
		a_AST = astFactory.create(a);
		match(ALTER);
		AST tmp78_AST = null;
		tmp78_AST = astFactory.create(LT(1));
		match(ROLE);
		{
		if ((_tokenSet_2.member(LA(1)))) {
			name();
			n_AST = (AST)returnAST;
			{
			if ((_tokenSet_36.member(LA(1))) && (_tokenSet_37.member(LA(2)))) {
				{
				switch ( LA(1)) {
				case ADD:
				{
					AST tmp79_AST = null;
					tmp79_AST = astFactory.create(LT(1));
					match(ADD);
					break;
				}
				case DROP:
				{
					AST tmp80_AST = null;
					tmp80_AST = astFactory.create(LT(1));
					match(DROP);
					break;
				}
				case EXCLUSIVE:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(EXCLUSIVE);
				{
				switch ( LA(1)) {
				case MEMBERSHIP:
				{
					match(MEMBERSHIP);
					break;
				}
				case ACTIVATION:
				{
					match(ACTIVATION);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				name();
				n2_AST = (AST)returnAST;
			}
			else if ((LA(1)==ADD) && (LA(2)==PASSWD)) {
				AST tmp84_AST = null;
				tmp84_AST = astFactory.create(LT(1));
				match(ADD);
				match(PASSWD);
				quoted_string_lit();
				q_AST = (AST)returnAST;
			}
			else if ((LA(1)==DROP) && (LA(2)==PASSWD)) {
				AST tmp86_AST = null;
				tmp86_AST = astFactory.create(LT(1));
				match(DROP);
				p = LT(1);
				p_AST = astFactory.create(p);
				match(PASSWD);
			}
			else if ((LA(1)==LOCK||LA(1)==LITERAL_unlock)) {
				{
				switch ( LA(1)) {
				case LOCK:
				{
					l = LT(1);
					l_AST = astFactory.create(l);
					match(LOCK);
					break;
				}
				case LITERAL_unlock:
				{
					ul = LT(1);
					ul_AST = astFactory.create(ul);
					match(LITERAL_unlock);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				alter_role_stmt_AST = (AST)currentAST.root;
				alter_role_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ALTER_ROLE_STMT,"alter_role_stmt")).add(n_AST)); 
							  AST[] left = {a_AST};
							  AST[] right = {n2_AST,q_AST,p_AST,l_AST,ul_AST};
							  SrcAST.setSpan(alter_role_stmt_AST,left,right);  
							
				currentAST.root = alter_role_stmt_AST;
				currentAST.child = alter_role_stmt_AST!=null &&alter_role_stmt_AST.getFirstChild()!=null ?
					alter_role_stmt_AST.getFirstChild() : alter_role_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==DOUBLE_QUOTED_STRING_LIT||LA(1)==SINGLE_QUOTED_STRING_LIT)) {
			quoted_string_lit();
			AST tmp87_AST = null;
			tmp87_AST = astFactory.create(LT(1));
			match(SET);
			alter_role_set_options();
			num = LT(1);
			num_AST = astFactory.create(num);
			match(NUM_INT);
			if ( inputState.guessing==0 ) {
				alter_role_stmt_AST = (AST)currentAST.root;
				alter_role_stmt_AST = astFactory.create(ALTER_ROLE_STMT,"alter_role_stmt"); 
						      SrcAST.setSpan(alter_role_stmt_AST,a_AST,num_AST);  
						
				currentAST.root = alter_role_stmt_AST;
				currentAST.child = alter_role_stmt_AST!=null &&alter_role_stmt_AST.getFirstChild()!=null ?
					alter_role_stmt_AST.getFirstChild() : alter_role_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		returnAST = alter_role_stmt_AST;
	}
	
	public final void drop_role_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_role_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST n_AST = null;
		AST w_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		astFactory.addASTChild(currentAST, d_AST);
		match(DROP);
		AST tmp88_AST = null;
		tmp88_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp88_AST);
		match(ROLE);
		name();
		n_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			w_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			drop_role_stmt_AST = (AST)currentAST.root;
			drop_role_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_ROLE_STMT,"drop_role_stmt")).add(n_AST));
				  	SrcAST.setSpan(drop_role_stmt_AST,d_AST,(w_AST!=null)? w_AST : n_AST);
				
			currentAST.root = drop_role_stmt_AST;
			currentAST.child = drop_role_stmt_AST!=null &&drop_role_stmt_AST.getFirstChild()!=null ?
				drop_role_stmt_AST.getFirstChild() : drop_role_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		drop_role_stmt_AST = (AST)currentAST.root;
		returnAST = drop_role_stmt_AST;
	}
	
/********** Variable Declaration Stmt *********/
	public final void variable_declaration_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_declaration_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST dcl_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DECLARE);
		declaration_list();
		dcl_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			variable_declaration_stmt_AST = (AST)currentAST.root;
			variable_declaration_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(VARIABLE_DECL_STMT,"variable_decl_stmt")).add(dcl_AST)); 
				    SrcAST.setSpan(variable_declaration_stmt_AST,d_AST,dcl_AST);
				
			currentAST.root = variable_declaration_stmt_AST;
			currentAST.child = variable_declaration_stmt_AST!=null &&variable_declaration_stmt_AST.getFirstChild()!=null ?
				variable_declaration_stmt_AST.getFirstChild() : variable_declaration_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = variable_declaration_stmt_AST;
	}
	
	public final void drop_trigger_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_trigger_stmt_AST = null;
		AST trgrs_AST = null;
		
		AST tmp89_AST = null;
		tmp89_AST = astFactory.create(LT(1));
		match(DROP);
		AST tmp90_AST = null;
		tmp90_AST = astFactory.create(LT(1));
		match(TRIGGER);
		ownerDOTname_list();
		trgrs_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_trigger_stmt_AST = (AST)currentAST.root;
			drop_trigger_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_TRIGGER_STMT,"drop_trigger_stmt")).add(trgrs_AST));
			currentAST.root = drop_trigger_stmt_AST;
			currentAST.child = drop_trigger_stmt_AST!=null &&drop_trigger_stmt_AST.getFirstChild()!=null ?
				drop_trigger_stmt_AST.getFirstChild() : drop_trigger_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_trigger_stmt_AST;
	}
	
	public final void drop_index_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_index_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST ilist_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp91_AST = null;
		tmp91_AST = astFactory.create(LT(1));
		match(INDEX);
		tableDOTname_list();
		ilist_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_index_stmt_AST = (AST)currentAST.root;
			drop_index_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_INDEX_STMT,"drop_index_stmt")).add(ilist_AST)); 
				    SrcAST.setSpan(drop_index_stmt_AST,d_AST,ilist_AST);
				
			currentAST.root = drop_index_stmt_AST;
			currentAST.child = drop_index_stmt_AST!=null &&drop_index_stmt_AST.getFirstChild()!=null ?
				drop_index_stmt_AST.getFirstChild() : drop_index_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_index_stmt_AST;
	}
	
	public final void exec_string_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exec_string_stmt_AST = null;
		AST slist_AST = null;
		
		{
		switch ( LA(1)) {
		case EXEC:
		{
			AST tmp92_AST = null;
			tmp92_AST = astFactory.create(LT(1));
			match(EXEC);
			break;
		}
		case EXECUTE:
		{
			AST tmp93_AST = null;
			tmp93_AST = astFactory.create(LT(1));
			match(EXECUTE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp94_AST = null;
		tmp94_AST = astFactory.create(LT(1));
		match(LPAREN);
		string_or_var_list();
		slist_AST = (AST)returnAST;
		AST tmp95_AST = null;
		tmp95_AST = astFactory.create(LT(1));
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			exec_string_stmt_AST = (AST)currentAST.root;
			exec_string_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(EXEC_STRING_STMT,"exec_string_stmt")).add(slist_AST));
			currentAST.root = exec_string_stmt_AST;
			currentAST.child = exec_string_stmt_AST!=null &&exec_string_stmt_AST.getFirstChild()!=null ?
				exec_string_stmt_AST.getFirstChild() : exec_string_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = exec_string_stmt_AST;
	}
	
	public final void continue_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST continue_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CONTINUE);
		if ( inputState.guessing==0 ) {
			continue_stmt_AST = (AST)currentAST.root;
			continue_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(continue_stmt_AST));
				  SrcAST.setSpanAndText( continue_stmt_AST, c_AST, c_AST, "CONTINUE" );
				
			currentAST.root = continue_stmt_AST;
			currentAST.child = continue_stmt_AST!=null &&continue_stmt_AST.getFirstChild()!=null ?
				continue_stmt_AST.getFirstChild() : continue_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = continue_stmt_AST;
	}
	
	public final void break_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST break_stmt_AST = null;
		Token  b = null;
		AST b_AST = null;
		
		b = LT(1);
		b_AST = astFactory.create(b);
		astFactory.addASTChild(currentAST, b_AST);
		match(BREAK);
		if ( inputState.guessing==0 ) {
			break_stmt_AST = (AST)currentAST.root;
			break_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(break_stmt_AST));
				    SrcAST.setSpanAndText( break_stmt_AST,b_AST,b_AST, "BREAK" );
				
			currentAST.root = break_stmt_AST;
			currentAST.child = break_stmt_AST!=null &&break_stmt_AST.getFirstChild()!=null ?
				break_stmt_AST.getFirstChild() : break_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		break_stmt_AST = (AST)currentAST.root;
		returnAST = break_stmt_AST;
	}
	
	public final void goto_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST goto_stmt_AST = null;
		AST l_AST = null;
		
		AST tmp96_AST = null;
		tmp96_AST = astFactory.create(LT(1));
		match(GOTO);
		label();
		l_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			goto_stmt_AST = (AST)currentAST.root;
			goto_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(GOTO_STMT,"goto_stmt")).add(l_AST));
			currentAST.root = goto_stmt_AST;
			currentAST.child = goto_stmt_AST!=null &&goto_stmt_AST.getFirstChild()!=null ?
				goto_stmt_AST.getFirstChild() : goto_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = goto_stmt_AST;
	}
	
	public final void raiserror_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST raiserror_stmt_AST = null;
		Token  r1 = null;
		AST r1_AST = null;
		AST n_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST f_AST = null;
		AST el_AST = null;
		AST w1_AST = null;
		Token  r2 = null;
		AST r2_AST = null;
		AST l_AST = null;
		AST s_AST = null;
		Token  m = null;
		AST m_AST = null;
		Token  n1 = null;
		AST n1_AST = null;
		AST el1_AST = null;
		Token  rp2 = null;
		AST rp2_AST = null;
		AST w2_AST = null;
		
		if ((LA(1)==RAISERROR) && (_tokenSet_38.member(LA(2)))) {
			r1 = LT(1);
			r1_AST = astFactory.create(r1);
			match(RAISERROR);
			{
			switch ( LA(1)) {
			case NUM_INT:
			case PLUS:
			case MINUS:
			{
				unsigned_num_int();
				n_AST = (AST)returnAST;
				break;
			}
			case AT_IDENT:
			{
				id = LT(1);
				id_AST = astFactory.create(id);
				match(AT_IDENT);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			if ((_tokenSet_39.member(LA(1)))) {
				format_str_or_var();
				f_AST = (AST)returnAST;
			}
			else if ((_tokenSet_40.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			switch ( LA(1)) {
			case COMMA:
			{
				AST tmp97_AST = null;
				tmp97_AST = astFactory.create(LT(1));
				match(COMMA);
				expr_list();
				el_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WITH:
			{
				with_error_data_options();
				w1_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				raiserror_stmt_AST = (AST)currentAST.root;
				raiserror_stmt_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(RAISERROR_STMT,"raiserror_stmt")).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(ERROR_NUM,"error_num")).add(n_AST).add(id_AST))).add(f_AST).add(el_AST));
					  	AST[] left = {r1_AST};
					  	AST[] right = {n_AST,id_AST,f_AST,el_AST,w1_AST};
					  	SrcAST.setSpan(raiserror_stmt_AST,left,right);
					
				currentAST.root = raiserror_stmt_AST;
				currentAST.child = raiserror_stmt_AST!=null &&raiserror_stmt_AST.getFirstChild()!=null ?
					raiserror_stmt_AST.getFirstChild() : raiserror_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==RAISERROR) && (LA(2)==LPAREN)) {
			r2 = LT(1);
			r2_AST = astFactory.create(r2);
			match(RAISERROR);
			AST tmp98_AST = null;
			tmp98_AST = astFactory.create(LT(1));
			match(LPAREN);
			{
			switch ( LA(1)) {
			case NUM_INT:
			case PLUS:
			case MINUS:
			{
				unsigned_num_int();
				l_AST = (AST)returnAST;
				break;
			}
			case AT_IDENT:
			case DOUBLE_QUOTED_STRING_LIT:
			case SINGLE_QUOTED_STRING_LIT:
			{
				string_or_var();
				s_AST = (AST)returnAST;
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp99_AST = null;
			tmp99_AST = astFactory.create(LT(1));
			match(COMMA);
			m = LT(1);
			m_AST = astFactory.create(m);
			match(NUM_INT);
			AST tmp100_AST = null;
			tmp100_AST = astFactory.create(LT(1));
			match(COMMA);
			n1 = LT(1);
			n1_AST = astFactory.create(n1);
			match(NUM_INT);
			{
			switch ( LA(1)) {
			case COMMA:
			{
				AST tmp101_AST = null;
				tmp101_AST = astFactory.create(LT(1));
				match(COMMA);
				expr_list();
				el1_AST = (AST)returnAST;
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			rp2 = LT(1);
			rp2_AST = astFactory.create(rp2);
			match(RPAREN);
			{
			switch ( LA(1)) {
			case WITH:
			{
				with_error_options();
				w2_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				raiserror_stmt_AST = (AST)currentAST.root;
				raiserror_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(RAISERROR_STMT,"raiserror_stmt")).add((AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(SQL_SERVER_FORMAT,"sql_server_format")).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ERROR_NUM,"error_num")).add(l_AST))).add(s_AST).add(el1_AST))));
					  	AST[] left2 = {r2_AST};
					  	AST[] right2 = {rp2_AST,w2_AST};
					  	SrcAST.setSpan(raiserror_stmt_AST,left2,right2);
					
				currentAST.root = raiserror_stmt_AST;
				currentAST.child = raiserror_stmt_AST!=null &&raiserror_stmt_AST.getFirstChild()!=null ?
					raiserror_stmt_AST.getFirstChild() : raiserror_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = raiserror_stmt_AST;
	}
	
	public final void print_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST print_stmt_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST elist_AST = null;
		
		p = LT(1);
		p_AST = astFactory.create(p);
		match(PRINT);
		expr_list();
		elist_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			print_stmt_AST = (AST)currentAST.root;
			print_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(PRINT_STMT,"print_stmt")).add(elist_AST)); 
				    SrcAST.setSpan(print_stmt_AST,p_AST,elist_AST);
				
			currentAST.root = print_stmt_AST;
			currentAST.child = print_stmt_AST!=null &&print_stmt_AST.getFirstChild()!=null ?
				print_stmt_AST.getFirstChild() : print_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = print_stmt_AST;
	}
	
	public final void return_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST return_stmt_AST = null;
		AST e_AST = null;
		
		AST tmp102_AST = null;
		tmp102_AST = astFactory.create(LT(1));
		match(RETURN);
		{
		boolean synPredMatched1118 = false;
		if (((_tokenSet_41.member(LA(1))) && (_tokenSet_42.member(LA(2))))) {
			int _m1118 = mark();
			synPredMatched1118 = true;
			inputState.guessing++;
			try {
				{
				expr();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1118 = false;
			}
			rewind(_m1118);
			inputState.guessing--;
		}
		if ( synPredMatched1118 ) {
			expr();
			e_AST = (AST)returnAST;
		}
		else if ((_tokenSet_33.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			return_stmt_AST = (AST)currentAST.root;
			return_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(RETURN_STMT,"return_stmt")).add(e_AST));
			currentAST.root = return_stmt_AST;
			currentAST.child = return_stmt_AST!=null &&return_stmt_AST.getFirstChild()!=null ?
				return_stmt_AST.getFirstChild() : return_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = return_stmt_AST;
	}
	
/*********** IF THEN ELSE stmt **************/
	public final void if_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST if_stmt_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST cond_AST = null;
		AST s1_AST = null;
		AST el = null;
		
		try {      // for error handling
			i = LT(1);
			i_AST = astFactory.create(i);
			match(IF);
			cond_expr();
			cond_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case PLAN:
			{
				plan_clause();
				break;
			}
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			tsql_stmt();
			s1_AST = (AST)returnAST;
			{
			boolean synPredMatched1141 = false;
			if (((LA(1)==ELSE||LA(1)==SEMI_COLON) && (_tokenSet_43.member(LA(2))))) {
				int _m1141 = mark();
				synPredMatched1141 = true;
				inputState.guessing++;
				try {
					{
					{
					switch ( LA(1)) {
					case SEMI_COLON:
					{
						match(SEMI_COLON);
						break;
					}
					case ELSE:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					match(ELSE);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1141 = false;
				}
				rewind(_m1141);
				inputState.guessing--;
			}
			if ( synPredMatched1141 ) {
				el=else_block();
			}
			else if ((_tokenSet_33.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				if_stmt_AST = (AST)currentAST.root;
				if_stmt_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(IF_STMT,"if_stmt")).add(cond_AST).add(s1_AST).add(el)); 
					    SrcAST.setSpan(if_stmt_AST,i_AST,(el!=null)? el : s1_AST);
					
				currentAST.root = if_stmt_AST;
				currentAST.child = if_stmt_AST!=null &&if_stmt_AST.getFirstChild()!=null ?
					if_stmt_AST.getFirstChild() : if_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				
				//	   	System.out.println("if_stmt: "+ex);
						AST ifs = null;
						if (cond_AST==null)
							throw(ex);
					   	else if (s1_AST!=null) {  //next stmt has error, do nothing
					   		ifs =(AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(IF_STMT,"if_stmt")).add(cond_AST).add(s1_AST));
					   		if (LA(1) == ELSE) //error is in else part
								ifs.addChild(else_block());
					   	}
					   	else { //error is in tsql_stmt
					   		ifs = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(IF_STMT,"if_stmt")).add(cond_AST));
						   	AST us = error_statement();
							MessageDescriptor message = new MessageDescriptor(
								MessageConstants.UNKNOWN_STATEMENT_IGNORED,
								((SrcAST)us).getNodeInfo());
					
							((SrcAST)us).setErrorMsg(message);
							ifs.addChild(us);
							
							//check for else
							if (LA(1)==ELSE || (LA(1)==SEMI_COLON&&LA(2)==ELSE)) {
								ifs.addChild(else_block());
							}
					   	}
					   	if_stmt_AST = ifs;
						
			} else {
				throw ex;
			}
		}
		returnAST = if_stmt_AST;
	}
	
	public final void while_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST while_stmt_AST = null;
		Token  w = null;
		AST w_AST = null;
		AST cond_AST = null;
		AST s_AST = null;
		
		w = LT(1);
		w_AST = astFactory.create(w);
		match(WHILE);
		cond_expr();
		cond_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case PLAN:
		{
			plan_clause();
			break;
		}
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		tsql_stmt();
		s_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			while_stmt_AST = (AST)currentAST.root;
			while_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(WHILE_STMT,"while_stmt")).add(cond_AST).add(s_AST)); 
				  SrcAST.setSpan(while_stmt_AST,w_AST,s_AST);
				
			currentAST.root = while_stmt_AST;
			currentAST.child = while_stmt_AST!=null &&while_stmt_AST.getFirstChild()!=null ?
				while_stmt_AST.getFirstChild() : while_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = while_stmt_AST;
	}
	
	public final void drop_procedure_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_procedure_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST plist_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		{
		switch ( LA(1)) {
		case PROC:
		{
			AST tmp103_AST = null;
			tmp103_AST = astFactory.create(LT(1));
			match(PROC);
			break;
		}
		case PROCEDURE:
		{
			AST tmp104_AST = null;
			tmp104_AST = astFactory.create(LT(1));
			match(PROCEDURE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		ownerDOTname_list();
		plist_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_procedure_stmt_AST = (AST)currentAST.root;
			drop_procedure_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_PROCEDURE_STMT,"drop_procedure_stmt")).add(plist_AST));
				    SrcAST.setSpan(drop_procedure_stmt_AST,d_AST,plist_AST); 	
				
			currentAST.root = drop_procedure_stmt_AST;
			currentAST.child = drop_procedure_stmt_AST!=null &&drop_procedure_stmt_AST.getFirstChild()!=null ?
				drop_procedure_stmt_AST.getFirstChild() : drop_procedure_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_procedure_stmt_AST;
	}
	
/********** PROCEDURE CALLS ****************/
	public final void exec_sp_proc_call_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exec_sp_proc_call_stmt_AST = null;
		
		{
		switch ( LA(1)) {
		case EXEC:
		{
			match(EXEC);
			break;
		}
		case EXECUTE:
		{
			match(EXECUTE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		sp_proc_call_stmt();
		astFactory.addASTChild(currentAST, returnAST);
		exec_sp_proc_call_stmt_AST = (AST)currentAST.root;
		returnAST = exec_sp_proc_call_stmt_AST;
	}
	
	public final void exec_proc_call_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exec_proc_call_stmt_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST pname_AST = null;
		AST n_AST = null;
		AST args_AST = null;
		
		{
		switch ( LA(1)) {
		case EXEC:
		{
			AST tmp107_AST = null;
			tmp107_AST = astFactory.create(LT(1));
			match(EXEC);
			break;
		}
		case EXECUTE:
		{
			AST tmp108_AST = null;
			tmp108_AST = astFactory.create(LT(1));
			match(EXECUTE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((LA(1)==AT_IDENT)) {
			id = LT(1);
			id_AST = astFactory.create(id);
			match(AT_IDENT);
			AST tmp109_AST = null;
			tmp109_AST = astFactory.create(LT(1));
			match(EQUAL);
		}
		else if ((_tokenSet_2.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		remote_proc_name();
		pname_AST = (AST)returnAST;
		{
		boolean synPredMatched1169 = false;
		if (((LA(1)==SEMI_COLON) && (_tokenSet_44.member(LA(2))))) {
			int _m1169 = mark();
			synPredMatched1169 = true;
			inputState.guessing++;
			try {
				{
				match(SEMI_COLON);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1169 = false;
			}
			rewind(_m1169);
			inputState.guessing--;
		}
		if ( synPredMatched1169 ) {
			AST tmp110_AST = null;
			tmp110_AST = astFactory.create(LT(1));
			match(SEMI_COLON);
			unsigned_num_int();
			n_AST = (AST)returnAST;
		}
		else if ((_tokenSet_45.member(LA(1))) && (_tokenSet_46.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		if ((_tokenSet_47.member(LA(1)))) {
			proc_arg_list();
			args_AST = (AST)returnAST;
		}
		else if ((_tokenSet_48.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			exec_proc_call_stmt_AST = (AST)currentAST.root;
			exec_proc_call_stmt_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(PROC_CALL_STMT,"proc_call_stmt")).add(id_AST).add(pname_AST).add(n_AST).add(args_AST));
			currentAST.root = exec_proc_call_stmt_AST;
			currentAST.child = exec_proc_call_stmt_AST!=null &&exec_proc_call_stmt_AST.getFirstChild()!=null ?
				exec_proc_call_stmt_AST.getFirstChild() : exec_proc_call_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = exec_proc_call_stmt_AST;
	}
	
/************************************/
	public final void use_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST use_stmt_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST d_AST = null;
		
		u = LT(1);
		u_AST = astFactory.create(u);
		match(USE);
		database_name();
		d_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			use_stmt_AST = (AST)currentAST.root;
			use_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(USE_STMT,"use_stmt")).add(d_AST)); 
				    SrcAST.setSpan(use_stmt_AST,u_AST,d_AST);
				
			currentAST.root = use_stmt_AST;
			currentAST.child = use_stmt_AST!=null &&use_stmt_AST.getFirstChild()!=null ?
				use_stmt_AST.getFirstChild() : use_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = use_stmt_AST;
	}
	
	public final void rollback_trigger_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST rollback_trigger_stmt_AST = null;
		Token  ro = null;
		AST ro_AST = null;
		Token  t = null;
		AST t_AST = null;
		AST r_AST = null;
		
		ro = LT(1);
		ro_AST = astFactory.create(ro);
		match(ROLLBACK);
		t = LT(1);
		t_AST = astFactory.create(t);
		match(TRIGGER);
		{
		switch ( LA(1)) {
		case WITH:
		{
			AST tmp111_AST = null;
			tmp111_AST = astFactory.create(LT(1));
			match(WITH);
			raiserror_stmt();
			r_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			rollback_trigger_stmt_AST = (AST)currentAST.root;
			rollback_trigger_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ROLLBACK_TRIGGER_STMT,"rollback_trigger_stmt")).add(r_AST)); 
				  AST[] left = {ro_AST};
				  AST[] right = {t_AST,r_AST};
				  SrcAST.setSpan(rollback_trigger_stmt_AST,left,right);
				
			currentAST.root = rollback_trigger_stmt_AST;
			currentAST.child = rollback_trigger_stmt_AST!=null &&rollback_trigger_stmt_AST.getFirstChild()!=null ?
				rollback_trigger_stmt_AST.getFirstChild() : rollback_trigger_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = rollback_trigger_stmt_AST;
	}
	
	public final void begin_transaction_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST begin_transaction_stmt_AST = null;
		Token  b = null;
		AST b_AST = null;
		Token  t1 = null;
		AST t1_AST = null;
		Token  t2 = null;
		AST t2_AST = null;
		AST n_AST = null;
		Token  id = null;
		AST id_AST = null;
		
		b = LT(1);
		b_AST = astFactory.create(b);
		match(BEGIN);
		{
		switch ( LA(1)) {
		case DISTRIBUTED:
		{
			match(DISTRIBUTED);
			break;
		}
		case TRANSACTION:
		case TRAN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case TRANSACTION:
		{
			t1 = LT(1);
			t1_AST = astFactory.create(t1);
			match(TRANSACTION);
			break;
		}
		case TRAN:
		{
			t2 = LT(1);
			t2_AST = astFactory.create(t2);
			match(TRAN);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case AT_IDENT:
		{
			id = LT(1);
			id_AST = astFactory.create(id);
			match(AT_IDENT);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				name();
				n_AST = (AST)returnAST;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			begin_transaction_stmt_AST = (AST)currentAST.root;
			begin_transaction_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(BEGIN_TRANSACTION_STMT,"begin_transaction_stmt")).add(n_AST).add(id_AST)); 
				  AST[] left = {b_AST};
				  AST[] right = {t1_AST,t2_AST,n_AST,id_AST};
				  SrcAST.setSpan(begin_transaction_stmt_AST,left,right);
				
			currentAST.root = begin_transaction_stmt_AST;
			currentAST.child = begin_transaction_stmt_AST!=null &&begin_transaction_stmt_AST.getFirstChild()!=null ?
				begin_transaction_stmt_AST.getFirstChild() : begin_transaction_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = begin_transaction_stmt_AST;
	}
	
	public final void save_transaction_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST save_transaction_stmt_AST = null;
		Token  s = null;
		AST s_AST = null;
		Token  t1 = null;
		AST t1_AST = null;
		Token  t2 = null;
		AST t2_AST = null;
		AST n_AST = null;
		
		s = LT(1);
		s_AST = astFactory.create(s);
		match(SAVE);
		{
		switch ( LA(1)) {
		case TRANSACTION:
		{
			t1 = LT(1);
			t1_AST = astFactory.create(t1);
			match(TRANSACTION);
			break;
		}
		case TRAN:
		{
			t2 = LT(1);
			t2_AST = astFactory.create(t2);
			match(TRAN);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((_tokenSet_2.member(LA(1)))) {
			name();
			n_AST = (AST)returnAST;
		}
		else if ((_tokenSet_33.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			save_transaction_stmt_AST = (AST)currentAST.root;
			save_transaction_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SAVE_TRANSACTION_STMT,"save_transaction_stmt")).add(n_AST)); 
				  AST[] left = {s_AST};
				  AST[] right = {t1_AST,t2_AST,n_AST};
				  SrcAST.setSpan(save_transaction_stmt_AST,left,right);
				
			currentAST.root = save_transaction_stmt_AST;
			currentAST.child = save_transaction_stmt_AST!=null &&save_transaction_stmt_AST.getFirstChild()!=null ?
				save_transaction_stmt_AST.getFirstChild() : save_transaction_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = save_transaction_stmt_AST;
	}
	
/**********  CREATE FUNCTION STMT  ***********/
	public final void create_function_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_function_stmt_AST = null;
		AST o_AST = null;
		AST pList_AST = null;
		AST dt_AST = null;
		AST s_AST = null;
		Token  ret = null;
		AST ret_AST = null;
		AST tcdef_AST = null;
		AST bs = null;
		
		AST tmp113_AST = null;
		tmp113_AST = astFactory.create(LT(1));
		match(CREATE);
		AST tmp114_AST = null;
		tmp114_AST = astFactory.create(LT(1));
		match(FUNCTION);
		qual_procedure_name();
		o_AST = (AST)returnAST;
		AST tmp115_AST = null;
		tmp115_AST = astFactory.create(LT(1));
		match(LPAREN);
		{
		switch ( LA(1)) {
		case AT_IDENT:
		{
			function_param_list();
			pList_AST = (AST)returnAST;
			break;
		}
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp116_AST = null;
		tmp116_AST = astFactory.create(LT(1));
		match(RPAREN);
		AST tmp117_AST = null;
		tmp117_AST = astFactory.create(LT(1));
		match(RETURNS);
		{
		switch ( LA(1)) {
		case TABLE:
		{
			AST tmp118_AST = null;
			tmp118_AST = astFactory.create(LT(1));
			match(TABLE);
			{
			switch ( LA(1)) {
			case WITH:
			{
				AST tmp119_AST = null;
				tmp119_AST = astFactory.create(LT(1));
				match(WITH);
				function_option_list();
				break;
			}
			case AS:
			case RETURN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case AS:
			{
				AST tmp120_AST = null;
				tmp120_AST = astFactory.create(LT(1));
				match(AS);
				break;
			}
			case RETURN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp121_AST = null;
			tmp121_AST = astFactory.create(LT(1));
			match(RETURN);
			select_stmt();
			s_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				create_function_stmt_AST = (AST)currentAST.root;
				create_function_stmt_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(CREATE_FUNCTION_STMT,"create_function_stmt")).add(o_AST).add(pList_AST).add(s_AST));
				currentAST.root = create_function_stmt_AST;
				currentAST.child = create_function_stmt_AST!=null &&create_function_stmt_AST.getFirstChild()!=null ?
					create_function_stmt_AST.getFirstChild() : create_function_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case AT_IDENT:
		{
			ret = LT(1);
			ret_AST = astFactory.create(ret);
			match(AT_IDENT);
			AST tmp122_AST = null;
			tmp122_AST = astFactory.create(LT(1));
			match(TABLE);
			AST tmp123_AST = null;
			tmp123_AST = astFactory.create(LT(1));
			match(LPAREN);
			col_or_table_constr_def_list();
			tcdef_AST = (AST)returnAST;
			AST tmp124_AST = null;
			tmp124_AST = astFactory.create(LT(1));
			match(RPAREN);
			{
			switch ( LA(1)) {
			case WITH:
			{
				AST tmp125_AST = null;
				tmp125_AST = astFactory.create(LT(1));
				match(WITH);
				function_option_list();
				break;
			}
			case AS:
			case BEGIN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case AS:
			{
				AST tmp126_AST = null;
				tmp126_AST = astFactory.create(LT(1));
				match(AS);
				break;
			}
			case BEGIN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			bs=block_stmt();
			if ( inputState.guessing==0 ) {
				create_function_stmt_AST = (AST)currentAST.root;
				create_function_stmt_AST = (AST)astFactory.make( (new ASTArray(6)).add(astFactory.create(CREATE_FUNCTION_STMT,"create_function_stmt")).add(o_AST).add(pList_AST).add(ret_AST).add(tcdef_AST).add(bs));
				currentAST.root = create_function_stmt_AST;
				currentAST.child = create_function_stmt_AST!=null &&create_function_stmt_AST.getFirstChild()!=null ?
					create_function_stmt_AST.getFirstChild() : create_function_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
			if ((_tokenSet_49.member(LA(1)))) {
				datatype();
				dt_AST = (AST)returnAST;
				{
				switch ( LA(1)) {
				case WITH:
				{
					AST tmp127_AST = null;
					tmp127_AST = astFactory.create(LT(1));
					match(WITH);
					function_option_list();
					break;
				}
				case AS:
				case BEGIN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case AS:
				{
					AST tmp128_AST = null;
					tmp128_AST = astFactory.create(LT(1));
					match(AS);
					break;
				}
				case BEGIN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				bs=block_stmt();
				if ( inputState.guessing==0 ) {
					create_function_stmt_AST = (AST)currentAST.root;
					create_function_stmt_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(CREATE_FUNCTION_STMT,"create_function_stmt")).add(o_AST).add(pList_AST).add(dt_AST).add(bs));
					currentAST.root = create_function_stmt_AST;
					currentAST.child = create_function_stmt_AST!=null &&create_function_stmt_AST.getFirstChild()!=null ?
						create_function_stmt_AST.getFirstChild() : create_function_stmt_AST;
					currentAST.advanceChildToEnd();
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		returnAST = create_function_stmt_AST;
	}
	
	public final void drop_function_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_function_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST qflist_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp129_AST = null;
		tmp129_AST = astFactory.create(LT(1));
		match(FUNCTION);
		ownerDOTname_list();
		qflist_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_function_stmt_AST = (AST)currentAST.root;
			drop_function_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_FUNCTION_STMT,"drop_function_stmt")).add(qflist_AST));
				  	SrcAST.setSpan(drop_function_stmt_AST,d_AST,qflist_AST);
				
			currentAST.root = drop_function_stmt_AST;
			currentAST.child = drop_function_stmt_AST!=null &&drop_function_stmt_AST.getFirstChild()!=null ?
				drop_function_stmt_AST.getFirstChild() : drop_function_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_function_stmt_AST;
	}
	
/********** CREATE DOMAIN STMT *************/
	public final void create_domain_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_domain_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST n_AST = null;
		AST dt_AST = null;
		Token  n1 = null;
		AST n1_AST = null;
		Token  n2 = null;
		AST n2_AST = null;
		AST d_AST = null;
		AST ce_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CREATE);
		{
		switch ( LA(1)) {
		case DOMAIN:
		{
			AST tmp130_AST = null;
			tmp130_AST = astFactory.create(LT(1));
			match(DOMAIN);
			break;
		}
		case DATATYPE:
		{
			AST tmp131_AST = null;
			tmp131_AST = astFactory.create(LT(1));
			match(DATATYPE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((LA(1)==AS)) {
			AST tmp132_AST = null;
			tmp132_AST = astFactory.create(LT(1));
			match(AS);
		}
		else if ((_tokenSet_2.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		name();
		n_AST = (AST)returnAST;
		datatype();
		dt_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case NULL:
		case NOT:
		{
			{
			switch ( LA(1)) {
			case NOT:
			{
				n1 = LT(1);
				n1_AST = astFactory.create(n1);
				match(NOT);
				break;
			}
			case NULL:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			n2 = LT(1);
			n2_AST = astFactory.create(n2);
			match(NULL);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECK:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case DEFAULT:
		{
			AST tmp133_AST = null;
			tmp133_AST = astFactory.create(LT(1));
			match(DEFAULT);
			default_exp();
			d_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECK:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case CHECK:
		{
			AST tmp134_AST = null;
			tmp134_AST = astFactory.create(LT(1));
			match(CHECK);
			AST tmp135_AST = null;
			tmp135_AST = astFactory.create(LT(1));
			match(LPAREN);
			cond_expr();
			ce_AST = (AST)returnAST;
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_domain_stmt_AST = (AST)currentAST.root;
			create_domain_stmt_AST = (AST)astFactory.make( (new ASTArray(6)).add(astFactory.create(CREATE_DOMAIN_STMT,"create_domain_stmt")).add(n_AST).add(n1_AST).add(n2_AST).add(dt_AST).add(d_AST)); 
				  	if (ce_AST!=null)
				  		create_domain_stmt_AST.addChild((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CHECK_CONSTR,"check_constr")).add(ce_AST)));
				  	AST[] left = {c_AST};
				  	AST[] right = {dt_AST,n1_AST,n2_AST,d_AST,rp_AST};
				  	SrcAST.setSpan(create_domain_stmt_AST,left,right);
				
			currentAST.root = create_domain_stmt_AST;
			currentAST.child = create_domain_stmt_AST!=null &&create_domain_stmt_AST.getFirstChild()!=null ?
				create_domain_stmt_AST.getFirstChild() : create_domain_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_domain_stmt_AST;
	}
	
	public final void waitfor_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST waitfor_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  t = null;
		AST t_AST = null;
		AST s_AST = null;
		Token  e = null;
		AST e_AST = null;
		Token  m = null;
		AST m_AST = null;
		Token  p = null;
		AST p_AST = null;
		
		AST tmp136_AST = null;
		tmp136_AST = astFactory.create(LT(1));
		match(WAITFOR);
		{
		switch ( LA(1)) {
		case DELAY:
		case TIME:
		{
			{
			switch ( LA(1)) {
			case DELAY:
			{
				d = LT(1);
				d_AST = astFactory.create(d);
				match(DELAY);
				break;
			}
			case TIME:
			{
				t = LT(1);
				t_AST = astFactory.create(t);
				match(TIME);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			string_or_var();
			s_AST = (AST)returnAST;
			break;
		}
		case ERROREXIT:
		{
			e = LT(1);
			e_AST = astFactory.create(e);
			match(ERROREXIT);
			break;
		}
		case MIRROREXIT:
		{
			m = LT(1);
			m_AST = astFactory.create(m);
			match(MIRROREXIT);
			break;
		}
		case PROCESSEXIT:
		{
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PROCESSEXIT);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			waitfor_stmt_AST = (AST)currentAST.root;
			waitfor_stmt_AST = (AST)astFactory.make( (new ASTArray(7)).add(astFactory.create(WAITFOR_STMT,"waitfor_stmt")).add(d_AST).add(t_AST).add(s_AST).add(e_AST).add(m_AST).add(p_AST));
			currentAST.root = waitfor_stmt_AST;
			currentAST.child = waitfor_stmt_AST!=null &&waitfor_stmt_AST.getFirstChild()!=null ?
				waitfor_stmt_AST.getFirstChild() : waitfor_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = waitfor_stmt_AST;
	}
	
	public final void create_statistics_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_statistics_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST sname_AST = null;
		AST qtname_AST = null;
		AST clist_AST = null;
		AST s_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		astFactory.addASTChild(currentAST, c_AST);
		match(CREATE);
		AST tmp137_AST = null;
		tmp137_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp137_AST);
		match(STATISTICS);
		name();
		sname_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp138_AST = null;
		tmp138_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp138_AST);
		match(ON);
		qualified_table_name();
		qtname_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp139_AST = null;
		tmp139_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp139_AST);
		match(LPAREN);
		name_list();
		clist_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp140_AST = null;
		tmp140_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp140_AST);
		match(RPAREN);
		statistics_option();
		s_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			create_statistics_stmt_AST = (AST)currentAST.root;
			create_statistics_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(create_statistics_stmt_AST));
				    SrcAST.setSpanAndText( create_statistics_stmt_AST, c_AST, s_AST, "CREATE STATISTICS " );
				
			currentAST.root = create_statistics_stmt_AST;
			currentAST.child = create_statistics_stmt_AST!=null &&create_statistics_stmt_AST.getFirstChild()!=null ?
				create_statistics_stmt_AST.getFirstChild() : create_statistics_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		create_statistics_stmt_AST = (AST)currentAST.root;
		returnAST = create_statistics_stmt_AST;
	}
	
	public final void update_statistics_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST update_statistics_stmt_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST tname_AST = null;
		AST index_name_AST = null;
		AST stname_list_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST s_AST = null;
		
		u = LT(1);
		u_AST = astFactory.create(u);
		astFactory.addASTChild(currentAST, u_AST);
		match(UPDATE);
		AST tmp141_AST = null;
		tmp141_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp141_AST);
		match(STATISTICS);
		name();
		tname_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		boolean synPredMatched1233 = false;
		if (((_tokenSet_2.member(LA(1))))) {
			int _m1233 = mark();
			synPredMatched1233 = true;
			inputState.guessing++;
			try {
				{
				name();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1233 = false;
			}
			rewind(_m1233);
			inputState.guessing--;
		}
		if ( synPredMatched1233 ) {
			name();
			index_name_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
		}
		else {
			boolean synPredMatched1235 = false;
			if (((LA(1)==LPAREN) && (_tokenSet_2.member(LA(2))))) {
				int _m1235 = mark();
				synPredMatched1235 = true;
				inputState.guessing++;
				try {
					{
					match(LPAREN);
					name_list();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1235 = false;
				}
				rewind(_m1235);
				inputState.guessing--;
			}
			if ( synPredMatched1235 ) {
				AST tmp142_AST = null;
				tmp142_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp142_AST);
				match(LPAREN);
				name_list();
				stname_list_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				rp = LT(1);
				rp_AST = astFactory.create(rp);
				astFactory.addASTChild(currentAST, rp_AST);
				match(RPAREN);
			}
			else if ((_tokenSet_48.member(LA(1))) && (_tokenSet_50.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WITH:
			{
				statistics_option();
				s_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				update_statistics_stmt_AST = (AST)currentAST.root;
				update_statistics_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(update_statistics_stmt_AST));
					    
					    AST right = null;
					    if(s_AST!=null) right = s_AST; 
					    else if(index_name_AST!=null) right = index_name_AST;
					    else if (rp_AST!=null) right = rp_AST;
					    else right = tname_AST;
					    SrcAST.setSpanAndText(update_statistics_stmt_AST,u_AST,right,"UPDATE STATISTICS ");
					
				currentAST.root = update_statistics_stmt_AST;
				currentAST.child = update_statistics_stmt_AST!=null &&update_statistics_stmt_AST.getFirstChild()!=null ?
					update_statistics_stmt_AST.getFirstChild() : update_statistics_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			update_statistics_stmt_AST = (AST)currentAST.root;
			returnAST = update_statistics_stmt_AST;
		}
		
	public final void drop_statistics_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_statistics_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST names_AST = null;
		Token  d1 = null;
		AST d1_AST = null;
		AST qt_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		switch ( LA(1)) {
		case DROP:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			astFactory.addASTChild(currentAST, d_AST);
			match(DROP);
			AST tmp143_AST = null;
			tmp143_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp143_AST);
			match(STATISTICS);
			tableDOTname_list();
			names_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				drop_statistics_stmt_AST = (AST)currentAST.root;
				drop_statistics_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(drop_statistics_stmt_AST));
					    SrcAST.setSpanAndText( drop_statistics_stmt_AST, d_AST, names_AST, "DROP STATISTICS " );
					
				currentAST.root = drop_statistics_stmt_AST;
				currentAST.child = drop_statistics_stmt_AST!=null &&drop_statistics_stmt_AST.getFirstChild()!=null ?
					drop_statistics_stmt_AST.getFirstChild() : drop_statistics_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			drop_statistics_stmt_AST = (AST)currentAST.root;
			break;
		}
		case DELETE:
		{
			d1 = LT(1);
			d1_AST = astFactory.create(d1);
			astFactory.addASTChild(currentAST, d1_AST);
			match(DELETE);
			{
			switch ( LA(1)) {
			case SHARED:
			{
				AST tmp144_AST = null;
				tmp144_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp144_AST);
				match(SHARED);
				break;
			}
			case STATISTICS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp145_AST = null;
			tmp145_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp145_AST);
			match(STATISTICS);
			qualified_table_name();
			qt_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			{
			boolean synPredMatched1241 = false;
			if (((LA(1)==LPAREN) && (_tokenSet_2.member(LA(2))))) {
				int _m1241 = mark();
				synPredMatched1241 = true;
				inputState.guessing++;
				try {
					{
					match(LPAREN);
					name_list();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1241 = false;
				}
				rewind(_m1241);
				inputState.guessing--;
			}
			if ( synPredMatched1241 ) {
				AST tmp146_AST = null;
				tmp146_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp146_AST);
				match(LPAREN);
				name_list();
				astFactory.addASTChild(currentAST, returnAST);
				rp = LT(1);
				rp_AST = astFactory.create(rp);
				astFactory.addASTChild(currentAST, rp_AST);
				match(RPAREN);
			}
			else if ((_tokenSet_33.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				drop_statistics_stmt_AST = (AST)currentAST.root;
				drop_statistics_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(drop_statistics_stmt_AST));
					    SrcAST.setSpanAndText( drop_statistics_stmt_AST, d1_AST, (rp_AST!=null)? rp_AST : qt_AST, "DROP STATISTICS " );
					
				currentAST.root = drop_statistics_stmt_AST;
				currentAST.child = drop_statistics_stmt_AST!=null &&drop_statistics_stmt_AST.getFirstChild()!=null ?
					drop_statistics_stmt_AST.getFirstChild() : drop_statistics_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			drop_statistics_stmt_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = drop_statistics_stmt_AST;
	}
	
	public final void readtext_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST readtext_stmt_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST s_AST = null;
		Token  b = null;
		AST b_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST i_AST = null;
		
		r = LT(1);
		r_AST = astFactory.create(r);
		astFactory.addASTChild(currentAST, r_AST);
		match(READTEXT);
		qualified_column_name();
		astFactory.addASTChild(currentAST, returnAST);
		expr();
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case NUM_INT:
		{
			AST tmp147_AST = null;
			tmp147_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp147_AST);
			match(NUM_INT);
			break;
		}
		case AT_IDENT:
		{
			AST tmp148_AST = null;
			tmp148_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp148_AST);
			match(AT_IDENT);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case NUM_INT:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			astFactory.addASTChild(currentAST, n_AST);
			match(NUM_INT);
			break;
		}
		case AT_IDENT:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			astFactory.addASTChild(currentAST, a_AST);
			match(AT_IDENT);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		boolean synPredMatched1259 = false;
		if (((_tokenSet_51.member(LA(1))) && (_tokenSet_52.member(LA(2))))) {
			int _m1259 = mark();
			synPredMatched1259 = true;
			inputState.guessing++;
			try {
				{
				syb_lock();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1259 = false;
			}
			rewind(_m1259);
			inputState.guessing--;
		}
		if ( synPredMatched1259 ) {
			syb_lock();
			s_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_53.member(LA(1))) && (_tokenSet_54.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case USING:
		{
			AST tmp149_AST = null;
			tmp149_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp149_AST);
			match(USING);
			{
			switch ( LA(1)) {
			case BYTES:
			{
				b = LT(1);
				b_AST = astFactory.create(b);
				astFactory.addASTChild(currentAST, b_AST);
				match(BYTES);
				break;
			}
			case CHARS:
			{
				c = LT(1);
				c_AST = astFactory.create(c);
				astFactory.addASTChild(currentAST, c_AST);
				match(CHARS);
				break;
			}
			case CHARACTERS:
			{
				d = LT(1);
				d_AST = astFactory.create(d);
				astFactory.addASTChild(currentAST, d_AST);
				match(CHARACTERS);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case AT:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case AT:
		{
			at_isolation_clause();
			i_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			readtext_stmt_AST = (AST)currentAST.root;
			readtext_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(readtext_stmt_AST));
				  	AST right = null;
				  	if (i_AST !=null) right = i_AST;
				  	else if (c_AST!=null) right = c_AST;
				  	else if (b_AST!=null) right = b_AST;
				  	else if (d_AST!=null) right = d_AST;
				  	else if (s_AST!=null) right = s_AST;
				  	else if (n_AST!=null) right = n_AST;
				  	else right = a_AST;
				    SrcAST.setSpanAndText( readtext_stmt_AST, r_AST, right, "READTEXT " );
				
			currentAST.root = readtext_stmt_AST;
			currentAST.child = readtext_stmt_AST!=null &&readtext_stmt_AST.getFirstChild()!=null ?
				readtext_stmt_AST.getFirstChild() : readtext_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		readtext_stmt_AST = (AST)currentAST.root;
		returnAST = readtext_stmt_AST;
	}
	
	public final void writetext_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST writetext_stmt_AST = null;
		Token  w = null;
		AST w_AST = null;
		AST s_AST = null;
		
		w = LT(1);
		w_AST = astFactory.create(w);
		astFactory.addASTChild(currentAST, w_AST);
		match(WRITETEXT);
		qualified_column_name();
		astFactory.addASTChild(currentAST, returnAST);
		expr();
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case READPAST:
		{
			AST tmp150_AST = null;
			tmp150_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp150_AST);
			match(READPAST);
			break;
		}
		case WITH:
		case AT_IDENT:
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			AST tmp151_AST = null;
			tmp151_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp151_AST);
			match(WITH);
			AST tmp152_AST = null;
			tmp152_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp152_AST);
			match(LOG);
			break;
		}
		case AT_IDENT:
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		string_or_var();
		s_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			writetext_stmt_AST = (AST)currentAST.root;
			writetext_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(writetext_stmt_AST));
				    SrcAST.setSpanAndText( writetext_stmt_AST, w_AST, s_AST, "WRITETEXT " );
				
			currentAST.root = writetext_stmt_AST;
			currentAST.child = writetext_stmt_AST!=null &&writetext_stmt_AST.getFirstChild()!=null ?
				writetext_stmt_AST.getFirstChild() : writetext_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		writetext_stmt_AST = (AST)currentAST.root;
		returnAST = writetext_stmt_AST;
	}
	
	public final void updatetext_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST updatetext_stmt_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST n_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  nu = null;
		AST nu_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST i_AST = null;
		
		u = LT(1);
		u_AST = astFactory.create(u);
		astFactory.addASTChild(currentAST, u_AST);
		match(UPDATETEXT);
		qualified_column_name();
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp153_AST = null;
		tmp153_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp153_AST);
		match(AT_IDENT);
		{
		switch ( LA(1)) {
		case NUM_INT:
		case PLUS:
		case MINUS:
		{
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case AT_IDENT:
		{
			AST tmp154_AST = null;
			tmp154_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp154_AST);
			match(AT_IDENT);
			break;
		}
		case NULL:
		{
			AST tmp155_AST = null;
			tmp155_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp155_AST);
			match(NULL);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case NUM_INT:
		case PLUS:
		case MINUS:
		{
			unsigned_num_int();
			n_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case AT_IDENT:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			astFactory.addASTChild(currentAST, a_AST);
			match(AT_IDENT);
			break;
		}
		case NULL:
		{
			nu = LT(1);
			nu_AST = astFactory.create(nu);
			astFactory.addASTChild(currentAST, nu_AST);
			match(NULL);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((LA(1)==WITH)) {
			AST tmp156_AST = null;
			tmp156_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp156_AST);
			match(WITH);
			l = LT(1);
			l_AST = astFactory.create(l);
			astFactory.addASTChild(currentAST, l_AST);
			match(LOG);
		}
		else if ((_tokenSet_55.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		if ((_tokenSet_39.member(LA(1)))) {
			insert_data();
			i_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_33.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			updatetext_stmt_AST = (AST)currentAST.root;
			updatetext_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(updatetext_stmt_AST));
				  	AST right = null;
				  	if (i_AST!=null) right = i_AST;
				  	else if (l_AST!=null) right = l_AST;
				  	else if (nu_AST!=null) right = nu_AST;
				  	else if (a_AST!=null) right = a_AST;
				  	else right = n_AST;
				    SrcAST.setSpanAndText( updatetext_stmt_AST, u_AST, right, "UPDATETEXT " );
				
			currentAST.root = updatetext_stmt_AST;
			currentAST.child = updatetext_stmt_AST!=null &&updatetext_stmt_AST.getFirstChild()!=null ?
				updatetext_stmt_AST.getFirstChild() : updatetext_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		updatetext_stmt_AST = (AST)currentAST.root;
		returnAST = updatetext_stmt_AST;
	}
	
	public final void kill_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST kill_stmt_AST = null;
		
		AST tmp157_AST = null;
		tmp157_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp157_AST);
		match(KILL);
		unsigned_num_int();
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			kill_stmt_AST = (AST)currentAST.root;
			kill_stmt_AST = astFactory.create(KILL_STMT,"kill_stmt");
			currentAST.root = kill_stmt_AST;
			currentAST.child = kill_stmt_AST!=null &&kill_stmt_AST.getFirstChild()!=null ?
				kill_stmt_AST.getFirstChild() : kill_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		kill_stmt_AST = (AST)currentAST.root;
		returnAST = kill_stmt_AST;
	}
	
	public final void dbcc_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dbcc_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST i_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		astFactory.addASTChild(currentAST, d_AST);
		match(DBCC);
		identifier();
		i_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		boolean synPredMatched1276 = false;
		if (((LA(1)==LPAREN) && (_tokenSet_56.member(LA(2))))) {
			int _m1276 = mark();
			synPredMatched1276 = true;
			inputState.guessing++;
			try {
				{
				match(LPAREN);
				dbcc_option_list();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1276 = false;
			}
			rewind(_m1276);
			inputState.guessing--;
		}
		if ( synPredMatched1276 ) {
			AST tmp158_AST = null;
			tmp158_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp158_AST);
			match(LPAREN);
			dbcc_option_list();
			astFactory.addASTChild(currentAST, returnAST);
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			astFactory.addASTChild(currentAST, rp_AST);
			match(RPAREN);
		}
		else if ((_tokenSet_33.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			dbcc_stmt_AST = (AST)currentAST.root;
			dbcc_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(dbcc_stmt_AST));
				  	AST right = null;
				  	if (rp_AST!=null) right = rp_AST;
				  	else right = i_AST;
				    SrcAST.setSpanAndText( dbcc_stmt_AST, d_AST, right, "DBCC " );
				
			currentAST.root = dbcc_stmt_AST;
			currentAST.child = dbcc_stmt_AST!=null &&dbcc_stmt_AST.getFirstChild()!=null ?
				dbcc_stmt_AST.getFirstChild() : dbcc_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		dbcc_stmt_AST = (AST)currentAST.root;
		returnAST = dbcc_stmt_AST;
	}
	
	public final void reconfigure_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST reconfigure_stmt_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST i_AST = null;
		
		r = LT(1);
		r_AST = astFactory.create(r);
		astFactory.addASTChild(currentAST, r_AST);
		match(RECONFIGURE);
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			i_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			reconfigure_stmt_AST = (AST)currentAST.root;
			reconfigure_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(reconfigure_stmt_AST));
				    SrcAST.setSpanAndText( reconfigure_stmt_AST, r_AST, (i_AST!=null)? i_AST : r_AST, "RECONFIGURE " );
				
			currentAST.root = reconfigure_stmt_AST;
			currentAST.child = reconfigure_stmt_AST!=null &&reconfigure_stmt_AST.getFirstChild()!=null ?
				reconfigure_stmt_AST.getFirstChild() : reconfigure_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		reconfigure_stmt_AST = (AST)currentAST.root;
		returnAST = reconfigure_stmt_AST;
	}
	
	public final void create_schema_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_schema_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST ow_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		astFactory.addASTChild(currentAST, c_AST);
		match(CREATE);
		AST tmp159_AST = null;
		tmp159_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp159_AST);
		match(SCHEMA);
		AST tmp160_AST = null;
		tmp160_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp160_AST);
		match(AUTHORIZATION);
		name();
		ow_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			create_schema_stmt_AST = (AST)currentAST.root;
			create_schema_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(create_schema_stmt_AST));
				    SrcAST.setSpanAndText( create_schema_stmt_AST, c_AST, ow_AST, "CREATE SCHEMA " );
				
			currentAST.root = create_schema_stmt_AST;
			currentAST.child = create_schema_stmt_AST!=null &&create_schema_stmt_AST.getFirstChild()!=null ?
				create_schema_stmt_AST.getFirstChild() : create_schema_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		create_schema_stmt_AST = (AST)currentAST.root;
		returnAST = create_schema_stmt_AST;
	}
	
	public final void shutdown_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST shutdown_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST sn_AST = null;
		AST i_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		astFactory.addASTChild(currentAST, d_AST);
		match(SHUTDOWN);
		name();
		sn_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			i_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			shutdown_stmt_AST = (AST)currentAST.root;
			shutdown_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(shutdown_stmt_AST));
				    SrcAST.setSpanAndText( shutdown_stmt_AST, d_AST, (i_AST!=null)? i_AST : sn_AST, "SHUTDOWN " );
				
			currentAST.root = shutdown_stmt_AST;
			currentAST.child = shutdown_stmt_AST!=null &&shutdown_stmt_AST.getFirstChild()!=null ?
				shutdown_stmt_AST.getFirstChild() : shutdown_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		shutdown_stmt_AST = (AST)currentAST.root;
		returnAST = shutdown_stmt_AST;
	}
	
	public final void backup_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST backup_stmt_AST = null;
		Token  b = null;
		AST b_AST = null;
		AST t_AST = null;
		AST w_AST = null;
		
		b = LT(1);
		b_AST = astFactory.create(b);
		astFactory.addASTChild(currentAST, b_AST);
		match(BACKUP);
		{
		switch ( LA(1)) {
		case DATABASE:
		{
			AST tmp161_AST = null;
			tmp161_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp161_AST);
			match(DATABASE);
			break;
		}
		case LOG:
		{
			AST tmp162_AST = null;
			tmp162_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp162_AST);
			match(LOG);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		backup_list();
		astFactory.addASTChild(currentAST, returnAST);
		to_backup();
		t_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_backup();
			w_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			backup_stmt_AST = (AST)currentAST.root;
			backup_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(backup_stmt_AST));
				    SrcAST.setSpanAndText( backup_stmt_AST, b_AST, (w_AST!=null)? w_AST : t_AST, "BACKUP " );
				
			currentAST.root = backup_stmt_AST;
			currentAST.child = backup_stmt_AST!=null &&backup_stmt_AST.getFirstChild()!=null ?
				backup_stmt_AST.getFirstChild() : backup_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		backup_stmt_AST = (AST)currentAST.root;
		returnAST = backup_stmt_AST;
	}
	
	public final void restore_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST restore_stmt_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST b_AST = null;
		AST f_AST = null;
		AST w_AST = null;
		
		r = LT(1);
		r_AST = astFactory.create(r);
		astFactory.addASTChild(currentAST, r_AST);
		match(RESTORE);
		{
		switch ( LA(1)) {
		case DATABASE:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			astFactory.addASTChild(currentAST, d_AST);
			match(DATABASE);
			break;
		}
		case LOG:
		{
			l = LT(1);
			l_AST = astFactory.create(l);
			astFactory.addASTChild(currentAST, l_AST);
			match(LOG);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((_tokenSet_57.member(LA(1)))) {
			backup_list();
			b_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_58.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case FROM:
		{
			from_restore();
			f_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_backup();
			w_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			restore_stmt_AST = (AST)currentAST.root;
			restore_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(restore_stmt_AST));
				  	AST right = null;
				  	if (w_AST!=null) right = w_AST;
				  	else if(f_AST!=null) right = f_AST;
				  	else if(b_AST!=null) right = b_AST;
				  	else if(d_AST!=null) right = d_AST;
				  	else right = l_AST;
				    SrcAST.setSpanAndText( restore_stmt_AST, r_AST,right,"RESTORE " );
				
			currentAST.root = restore_stmt_AST;
			currentAST.child = restore_stmt_AST!=null &&restore_stmt_AST.getFirstChild()!=null ?
				restore_stmt_AST.getFirstChild() : restore_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		restore_stmt_AST = (AST)currentAST.root;
		returnAST = restore_stmt_AST;
	}
	
	public final void bulk_insert_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST bulk_insert_stmt_AST = null;
		Token  b = null;
		AST b_AST = null;
		AST q_AST = null;
		AST w_AST = null;
		
		b = LT(1);
		b_AST = astFactory.create(b);
		astFactory.addASTChild(currentAST, b_AST);
		match(BULK);
		AST tmp163_AST = null;
		tmp163_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp163_AST);
		match(INSERT);
		qualified_table_name();
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp164_AST = null;
		tmp164_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp164_AST);
		match(FROM);
		quoted_string_lit();
		q_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_bulk();
			w_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			bulk_insert_stmt_AST = (AST)currentAST.root;
			bulk_insert_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(bulk_insert_stmt_AST));
				    SrcAST.setSpanAndText( bulk_insert_stmt_AST, b_AST, (w_AST!=null)? w_AST : q_AST, "BULK_INSERT " );
				
			currentAST.root = bulk_insert_stmt_AST;
			currentAST.child = bulk_insert_stmt_AST!=null &&bulk_insert_stmt_AST.getFirstChild()!=null ?
				bulk_insert_stmt_AST.getFirstChild() : bulk_insert_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		bulk_insert_stmt_AST = (AST)currentAST.root;
		returnAST = bulk_insert_stmt_AST;
	}
	
	public final void lock_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lock_stmt_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST qt_AST = null;
		Token  s = null;
		AST s_AST = null;
		Token  e = null;
		AST e_AST = null;
		Token  m = null;
		AST m_AST = null;
		Token  w = null;
		AST w_AST = null;
		Token  nw = null;
		AST nw_AST = null;
		
		l = LT(1);
		l_AST = astFactory.create(l);
		astFactory.addASTChild(currentAST, l_AST);
		match(LOCK);
		AST tmp165_AST = null;
		tmp165_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp165_AST);
		match(TABLE);
		qualified_table_name();
		qt_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp166_AST = null;
		tmp166_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp166_AST);
		match(IN);
		{
		switch ( LA(1)) {
		case SHARE:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			astFactory.addASTChild(currentAST, s_AST);
			match(SHARE);
			break;
		}
		case EXCLUSIVE:
		{
			e = LT(1);
			e_AST = astFactory.create(e);
			astFactory.addASTChild(currentAST, e_AST);
			match(EXCLUSIVE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		m = LT(1);
		m_AST = astFactory.create(m);
		astFactory.addASTChild(currentAST, m_AST);
		match(MODE);
		{
		switch ( LA(1)) {
		case WAIT:
		{
			w = LT(1);
			w_AST = astFactory.create(w);
			astFactory.addASTChild(currentAST, w_AST);
			match(WAIT);
			break;
		}
		case NOWAIT:
		{
			nw = LT(1);
			nw_AST = astFactory.create(nw);
			astFactory.addASTChild(currentAST, nw_AST);
			match(NOWAIT);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			lock_stmt_AST = (AST)currentAST.root;
			lock_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(lock_stmt_AST));
				  	AST right = null;
				  	if (w_AST!=null) right=w_AST;
				  	else if(nw_AST!=null) right = nw_AST;
				  	else right = m_AST;
				    SrcAST.setSpanAndText( lock_stmt_AST, l_AST, right, "LOCK " );
				
			currentAST.root = lock_stmt_AST;
			currentAST.child = lock_stmt_AST!=null &&lock_stmt_AST.getFirstChild()!=null ?
				lock_stmt_AST.getFirstChild() : lock_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		lock_stmt_AST = (AST)currentAST.root;
		returnAST = lock_stmt_AST;
	}
	
	public final void grant_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST grant_stmt_AST = null;
		Token  g1 = null;
		AST g1_AST = null;
		AST p_AST = null;
		AST on_AST = null;
		AST to_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  g = null;
		AST g_AST = null;
		Token  r1 = null;
		AST r1_AST = null;
		Token  g2 = null;
		AST g2_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST users_AST = null;
		AST pwds_AST = null;
		Token  g3 = null;
		AST g3_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST granted_AST = null;
		AST grantee_AST = null;
		
		if ((LA(1)==GRANT) && (_tokenSet_59.member(LA(2)))) {
			g1 = LT(1);
			g1_AST = astFactory.create(g1);
			match(GRANT);
			permissions();
			p_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case ON:
			{
				on_object();
				on_AST = (AST)returnAST;
				break;
			}
			case FROM:
			case TO:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case FROM:
			{
				AST tmp167_AST = null;
				tmp167_AST = astFactory.create(LT(1));
				match(FROM);
				break;
			}
			case TO:
			{
				AST tmp168_AST = null;
				tmp168_AST = astFactory.create(LT(1));
				match(TO);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			permissions_to();
			to_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case WITH:
			{
				AST tmp169_AST = null;
				tmp169_AST = astFactory.create(LT(1));
				match(WITH);
				AST tmp170_AST = null;
				tmp170_AST = astFactory.create(LT(1));
				match(GRANT);
				o = LT(1);
				o_AST = astFactory.create(o);
				match(OPTION);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case AS:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case AS:
			{
				AST tmp171_AST = null;
				tmp171_AST = astFactory.create(LT(1));
				match(AS);
				{
				switch ( LA(1)) {
				case GROUP:
				{
					g = LT(1);
					g_AST = astFactory.create(g);
					match(GROUP);
					break;
				}
				case ROLE:
				{
					r1 = LT(1);
					r1_AST = astFactory.create(r1);
					match(ROLE);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				grant_stmt_AST = (AST)currentAST.root;
				grant_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(GRANT_STMT,"grant_stmt")).add((AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(GRANT_PERMISSIONS,"grant_permissions")).add(p_AST).add(on_AST).add(to_AST).add(o_AST)))); 
					  	AST[] left = {g1_AST};
					  	AST[] right = {to_AST,o_AST,g_AST,r1_AST};
					  	SrcAST.setSpan(grant_stmt_AST,left,right);				
					
				currentAST.root = grant_stmt_AST;
				currentAST.child = grant_stmt_AST!=null &&grant_stmt_AST.getFirstChild()!=null ?
					grant_stmt_AST.getFirstChild() : grant_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==GRANT) && (LA(2)==CONNECT)) {
			g2 = LT(1);
			g2_AST = astFactory.create(g2);
			match(GRANT);
			c = LT(1);
			c_AST = astFactory.create(c);
			match(CONNECT);
			AST tmp172_AST = null;
			tmp172_AST = astFactory.create(LT(1));
			match(TO);
			name_list();
			users_AST = (AST)returnAST;
			{
			if ((_tokenSet_2.member(LA(1))) && (_tokenSet_44.member(LA(2)))) {
				identifier();
				unsigned_num_int();
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==BY)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			identifier();
			AST tmp173_AST = null;
			tmp173_AST = astFactory.create(LT(1));
			match(BY);
			name_list();
			pwds_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				grant_stmt_AST = (AST)currentAST.root;
				grant_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(GRANT_STMT,"grant_stmt")).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(GRANT_CONNECT,"grant_connect")).add(users_AST).add(pwds_AST)))); 
					  	SrcAST.setSpan(grant_stmt_AST,g2_AST,pwds_AST);				
					
				currentAST.root = grant_stmt_AST;
				currentAST.child = grant_stmt_AST!=null &&grant_stmt_AST.getFirstChild()!=null ?
					grant_stmt_AST.getFirstChild() : grant_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==GRANT) && (LA(2)==ROLE)) {
			g3 = LT(1);
			g3_AST = astFactory.create(g3);
			match(GRANT);
			r = LT(1);
			r_AST = astFactory.create(r);
			match(ROLE);
			name_list();
			granted_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case FROM:
			{
				AST tmp174_AST = null;
				tmp174_AST = astFactory.create(LT(1));
				match(FROM);
				break;
			}
			case TO:
			{
				AST tmp175_AST = null;
				tmp175_AST = astFactory.create(LT(1));
				match(TO);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			name_list();
			grantee_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				grant_stmt_AST = (AST)currentAST.root;
				grant_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(GRANT_STMT,"grant_stmt")).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(GRANT_ROLE,"grant_role")).add(granted_AST).add(grantee_AST)))); 
					  	SrcAST.setSpan(grant_stmt_AST,g3_AST,grantee_AST);				
					
				currentAST.root = grant_stmt_AST;
				currentAST.child = grant_stmt_AST!=null &&grant_stmt_AST.getFirstChild()!=null ?
					grant_stmt_AST.getFirstChild() : grant_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = grant_stmt_AST;
	}
	
	public final void revoke_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST revoke_stmt_AST = null;
		Token  r1 = null;
		AST r1_AST = null;
		AST plist_AST = null;
		AST on_AST = null;
		AST to_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  g = null;
		AST g_AST = null;
		Token  ro = null;
		AST ro_AST = null;
		Token  r2 = null;
		AST r2_AST = null;
		AST role_name_AST = null;
		AST grantees_AST = null;
		
		if ((LA(1)==REVOKE) && (_tokenSet_60.member(LA(2)))) {
			r1 = LT(1);
			r1_AST = astFactory.create(r1);
			astFactory.addASTChild(currentAST, r1_AST);
			match(REVOKE);
			{
			switch ( LA(1)) {
			case GRANT:
			{
				AST tmp176_AST = null;
				tmp176_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp176_AST);
				match(GRANT);
				AST tmp177_AST = null;
				tmp177_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp177_AST);
				match(OPTION);
				AST tmp178_AST = null;
				tmp178_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp178_AST);
				match(FOR);
				break;
			}
			case EXEC:
			case EXECUTE:
			case CREATE:
			case REFERENCES:
			case SELECT:
			case ALL:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BACKUP:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			permissions();
			plist_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			on_object();
			on_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case FROM:
			{
				AST tmp179_AST = null;
				tmp179_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp179_AST);
				match(FROM);
				break;
			}
			case TO:
			{
				AST tmp180_AST = null;
				tmp180_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp180_AST);
				match(TO);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			permissions_to();
			to_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case CASCADE:
			{
				c = LT(1);
				c_AST = astFactory.create(c);
				astFactory.addASTChild(currentAST, c_AST);
				match(CASCADE);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case AS:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case AS:
			{
				AST tmp181_AST = null;
				tmp181_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp181_AST);
				match(AS);
				{
				switch ( LA(1)) {
				case GROUP:
				{
					g = LT(1);
					g_AST = astFactory.create(g);
					astFactory.addASTChild(currentAST, g_AST);
					match(GROUP);
					break;
				}
				case ROLE:
				{
					ro = LT(1);
					ro_AST = astFactory.create(ro);
					astFactory.addASTChild(currentAST, ro_AST);
					match(ROLE);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				revoke_stmt_AST = (AST)currentAST.root;
				revoke_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(revoke_stmt_AST));
					  	AST right = null;
					  	if(g_AST!=null) right = g_AST;
					  	else if(ro_AST!=null) right = ro_AST;
					  	else if(c_AST!=null) right = c_AST;
					  	else right = to_AST;
					    SrcAST.setSpanAndText( revoke_stmt_AST, r1_AST,right, "REVOKE " );
					
				currentAST.root = revoke_stmt_AST;
				currentAST.child = revoke_stmt_AST!=null &&revoke_stmt_AST.getFirstChild()!=null ?
					revoke_stmt_AST.getFirstChild() : revoke_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			revoke_stmt_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==REVOKE) && (LA(2)==ROLE)) {
			r2 = LT(1);
			r2_AST = astFactory.create(r2);
			astFactory.addASTChild(currentAST, r2_AST);
			match(REVOKE);
			AST tmp182_AST = null;
			tmp182_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp182_AST);
			match(ROLE);
			name_list();
			role_name_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case FROM:
			{
				AST tmp183_AST = null;
				tmp183_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp183_AST);
				match(FROM);
				break;
			}
			case TO:
			{
				AST tmp184_AST = null;
				tmp184_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp184_AST);
				match(TO);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			name_list();
			grantees_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				revoke_stmt_AST = (AST)currentAST.root;
				revoke_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(revoke_stmt_AST));
					    SrcAST.setSpanAndText( revoke_stmt_AST, r2_AST,grantees_AST, "REVOKE " );
					
				currentAST.root = revoke_stmt_AST;
				currentAST.child = revoke_stmt_AST!=null &&revoke_stmt_AST.getFirstChild()!=null ?
					revoke_stmt_AST.getFirstChild() : revoke_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			revoke_stmt_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = revoke_stmt_AST;
	}
	
	public final void deny_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST deny_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST plist_AST = null;
		AST on_AST = null;
		AST cols_AST = null;
		Token  c = null;
		AST c_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		astFactory.addASTChild(currentAST, d_AST);
		match(DENY);
		permissions();
		plist_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		on_object();
		on_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp185_AST = null;
		tmp185_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp185_AST);
		match(TO);
		column_list();
		cols_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case CASCADE:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			astFactory.addASTChild(currentAST, c_AST);
			match(CASCADE);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			deny_stmt_AST = (AST)currentAST.root;
			deny_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(deny_stmt_AST));
				    SrcAST.setSpanAndText( deny_stmt_AST, d_AST, (c_AST!=null)? c_AST : cols_AST, "BULK_INSERT " );
				
			currentAST.root = deny_stmt_AST;
			currentAST.child = deny_stmt_AST!=null &&deny_stmt_AST.getFirstChild()!=null ?
				deny_stmt_AST.getFirstChild() : deny_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		deny_stmt_AST = (AST)currentAST.root;
		returnAST = deny_stmt_AST;
	}
	
	public final void drop_database_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_database_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST dlist_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp186_AST = null;
		tmp186_AST = astFactory.create(LT(1));
		match(DATABASE);
		database_name_list();
		dlist_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_database_stmt_AST = (AST)currentAST.root;
			drop_database_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_DATABASE_STMT,"drop_database_stmt")).add(dlist_AST)); 
				  SrcAST.setSpan(drop_database_stmt_AST,d_AST,dlist_AST);
				
			currentAST.root = drop_database_stmt_AST;
			currentAST.child = drop_database_stmt_AST!=null &&drop_database_stmt_AST.getFirstChild()!=null ?
				drop_database_stmt_AST.getFirstChild() : drop_database_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_database_stmt_AST;
	}
	
/*****************************************/
	public final void create_rule_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_rule_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST rName_AST = null;
		AST cond_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CREATE);
		AST tmp187_AST = null;
		tmp187_AST = astFactory.create(LT(1));
		match(RULE);
		ownerDOTname();
		rName_AST = (AST)returnAST;
		AST tmp188_AST = null;
		tmp188_AST = astFactory.create(LT(1));
		match(AS);
		cond_expr();
		cond_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			create_rule_stmt_AST = (AST)currentAST.root;
			create_rule_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CREATE_RULE_STMT,"create_rule_stmt")).add(rName_AST).add(cond_AST));
				  SrcAST.setSpan(create_rule_stmt_AST,c_AST,cond_AST);
			
			currentAST.root = create_rule_stmt_AST;
			currentAST.child = create_rule_stmt_AST!=null &&create_rule_stmt_AST.getFirstChild()!=null ?
				create_rule_stmt_AST.getFirstChild() : create_rule_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_rule_stmt_AST;
	}
	
	public final void drop_rule_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST drop_rule_stmt_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST rules_AST = null;
		
		d = LT(1);
		d_AST = astFactory.create(d);
		match(DROP);
		AST tmp189_AST = null;
		tmp189_AST = astFactory.create(LT(1));
		match(RULE);
		ownerDOTname_list();
		rules_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			drop_rule_stmt_AST = (AST)currentAST.root;
			drop_rule_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_RULE_STMT,"drop_rule_stmt")).add(rules_AST)); 
				  SrcAST.setSpan (drop_rule_stmt_AST,d_AST,rules_AST);
				
			currentAST.root = drop_rule_stmt_AST;
			currentAST.child = drop_rule_stmt_AST!=null &&drop_rule_stmt_AST.getFirstChild()!=null ?
				drop_rule_stmt_AST.getFirstChild() : drop_rule_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = drop_rule_stmt_AST;
	}
	
	public final void pragma_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST pragma_stmt_AST = null;
		Token  pml = null;
		AST pml_AST = null;
		AST gp_AST = null;
		Token  sl = null;
		AST sl_AST = null;
		Token  psl = null;
		AST psl_AST = null;
		AST gp1_AST = null;
		
		switch ( LA(1)) {
		case PRAGMA_ML_COMMENT:
		{
			pml = LT(1);
			pml_AST = astFactory.create(pml);
			match(PRAGMA_ML_COMMENT);
			{
			switch ( LA(1)) {
			case RENAME_COLUMN:
			case RENAME_INDEX:
			case RENAME_PROCEDURE:
			case RENAME_TABLE:
			case RENAME_VIEW:
			case BIND_COLUMN_TYPE:
			case CALLED_ONLY_WITHIN_TRANSACTION:
			case NOT_CALLED_WITHIN_TRANSACTION:
			case IGNORE_OWNER_NAME:
			case TRANSLATE_TYPE:
			case VARIABLE_PREFIX:
			case CREATE_TABLE_OPTIONS:
			case SET_DEFAULT_SCHEMA:
			case TRANSLATE_OWNER_NAME:
			case TREAT_AS_KEYWORD:
			case EXTEND_EXCEPTION_HANDLER:
			{
				global_pragma_list();
				gp_AST = (AST)returnAST;
				break;
			}
			case STAR_SLASH:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			sl = LT(1);
			sl_AST = astFactory.create(sl);
			match(STAR_SLASH);
			if ( inputState.guessing==0 ) {
				pragma_stmt_AST = (AST)currentAST.root;
				pragma_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(PRAGMA_STMT,"pragma_stmt")).add(gp_AST)); 
					    SrcAST.setSpan(pragma_stmt_AST,pml_AST,sl_AST);
					
				currentAST.root = pragma_stmt_AST;
				currentAST.child = pragma_stmt_AST!=null &&pragma_stmt_AST.getFirstChild()!=null ?
					pragma_stmt_AST.getFirstChild() : pragma_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case PRAGMA_SL_COMMENT:
		{
			psl = LT(1);
			psl_AST = astFactory.create(psl);
			match(PRAGMA_SL_COMMENT);
			{
			switch ( LA(1)) {
			case RENAME_COLUMN:
			case RENAME_INDEX:
			case RENAME_PROCEDURE:
			case RENAME_TABLE:
			case RENAME_VIEW:
			case BIND_COLUMN_TYPE:
			case CALLED_ONLY_WITHIN_TRANSACTION:
			case NOT_CALLED_WITHIN_TRANSACTION:
			case IGNORE_OWNER_NAME:
			case TRANSLATE_TYPE:
			case VARIABLE_PREFIX:
			case CREATE_TABLE_OPTIONS:
			case SET_DEFAULT_SCHEMA:
			case TRANSLATE_OWNER_NAME:
			case TREAT_AS_KEYWORD:
			case EXTEND_EXCEPTION_HANDLER:
			{
				global_pragma_list();
				gp1_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				pragma_stmt_AST = (AST)currentAST.root;
				pragma_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(PRAGMA_STMT,"pragma_stmt")).add(gp1_AST)); 
					    SrcAST.setSpan(pragma_stmt_AST,psl_AST,gp1_AST);
					
				currentAST.root = pragma_stmt_AST;
				currentAST.child = pragma_stmt_AST!=null &&pragma_stmt_AST.getFirstChild()!=null ?
					pragma_stmt_AST.getFirstChild() : pragma_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = pragma_stmt_AST;
	}
	
/*** DUMP STMT ***/
	public final void dump_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dump_stmt_AST = null;
		Token  d1 = null;
		AST d1_AST = null;
		AST dv_AST = null;
		AST sd1_AST = null;
		AST s1_AST = null;
		AST do1_AST = null;
		AST i1_AST = null;
		Token  d2 = null;
		AST d2_AST = null;
		AST sd2_AST = null;
		AST s2_AST = null;
		AST do2_AST = null;
		
		if ((LA(1)==DUMP) && (LA(2)==TRANSACTION||LA(2)==TRAN)) {
			d1 = LT(1);
			d1_AST = astFactory.create(d1);
			astFactory.addASTChild(currentAST, d1_AST);
			match(DUMP);
			{
			switch ( LA(1)) {
			case TRANSACTION:
			{
				AST tmp190_AST = null;
				tmp190_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp190_AST);
				match(TRANSACTION);
				break;
			}
			case TRAN:
			{
				AST tmp191_AST = null;
				tmp191_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp191_AST);
				match(TRAN);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			database_varname();
			dv_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case TO:
			{
				AST tmp192_AST = null;
				tmp192_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp192_AST);
				match(TO);
				stripe_device_clause();
				sd1_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				{
				_loop1402:
				do {
					if ((LA(1)==STRIPE)) {
						stripe_on();
						s1_AST = (AST)returnAST;
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop1402;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case WITH:
				{
					AST tmp193_AST = null;
					tmp193_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp193_AST);
					match(WITH);
					dump_option_list();
					do1_AST = (AST)returnAST;
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case CHECKPOINT:
				case ALTER:
				case DROP:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case DENY:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case SEMI_COLON:
				case LPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case WITH:
			{
				AST tmp194_AST = null;
				tmp194_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp194_AST);
				match(WITH);
				identifier();
				i1_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				dump_stmt_AST = (AST)currentAST.root;
				dump_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(dump_stmt_AST));
					  	AST[] nodes = {dv_AST,sd1_AST,s1_AST,do1_AST,i1_AST};
					  	AST right = getRightMostNode(nodes);
					    SrcAST.setSpanAndText( dump_stmt_AST, d1_AST, right, "BULK_INSERT " );
					
				currentAST.root = dump_stmt_AST;
				currentAST.child = dump_stmt_AST!=null &&dump_stmt_AST.getFirstChild()!=null ?
					dump_stmt_AST.getFirstChild() : dump_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			dump_stmt_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==DUMP) && (LA(2)==DATABASE)) {
			d2 = LT(1);
			d2_AST = astFactory.create(d2);
			astFactory.addASTChild(currentAST, d2_AST);
			match(DUMP);
			AST tmp195_AST = null;
			tmp195_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp195_AST);
			match(DATABASE);
			database_varname();
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp196_AST = null;
			tmp196_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp196_AST);
			match(TO);
			stripe_device_clause();
			sd2_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1405:
			do {
				if ((LA(1)==STRIPE)) {
					stripe_on();
					s2_AST = (AST)returnAST;
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1405;
				}
				
			} while (true);
			}
			{
			switch ( LA(1)) {
			case WITH:
			{
				AST tmp197_AST = null;
				tmp197_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp197_AST);
				match(WITH);
				dump_option_list();
				do2_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				dump_stmt_AST = (AST)currentAST.root;
				dump_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNTRANSLATED_STMT,"UNTRANSLATED_STMT")).add(dump_stmt_AST));
					  	AST[] nodes2 = {sd2_AST,s2_AST,do2_AST};
					  	AST right2 = getRightMostNode(nodes2);
					    SrcAST.setSpanAndText( dump_stmt_AST, d2_AST, right2, "BULK_INSERT " );
					
				currentAST.root = dump_stmt_AST;
				currentAST.child = dump_stmt_AST!=null &&dump_stmt_AST.getFirstChild()!=null ?
					dump_stmt_AST.getFirstChild() : dump_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			dump_stmt_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = dump_stmt_AST;
	}
	
	public final void create_procedure_stmt_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_procedure_stmt_list_AST = null;
		
		{
		int _cnt974=0;
		_loop974:
		do {
			if ((LA(1)==CREATE)) {
				create_procedure_stmt();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				if ( _cnt974>=1 ) { break _loop974; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt974++;
		} while (true);
		}
		create_procedure_stmt_list_AST = (AST)currentAST.root;
		returnAST = create_procedure_stmt_list_AST;
	}
	
	public final void go_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST go_stmt_AST = null;
		
		AST tmp198_AST = null;
		tmp198_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp198_AST);
		match(GO);
		go_stmt_AST = (AST)currentAST.root;
		returnAST = go_stmt_AST;
	}
	
	public final void label() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST label_AST = null;
		
		name();
		astFactory.addASTChild(currentAST, returnAST);
		label_AST = (AST)currentAST.root;
		returnAST = label_AST;
	}
	
	public final void labelled_create_procedure_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST labelled_create_procedure_stmt_AST = null;
		AST l_AST = null;
		AST lcp_AST = null;
		
		switch ( LA(1)) {
		case CREATE:
		{
			create_procedure_stmt();
			astFactory.addASTChild(currentAST, returnAST);
			labelled_create_procedure_stmt_AST = (AST)currentAST.root;
			break;
		}
		case ALTER:
		{
			alter_procedure_stmt();
			astFactory.addASTChild(currentAST, returnAST);
			labelled_create_procedure_stmt_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				label();
				l_AST = (AST)returnAST;
				AST tmp199_AST = null;
				tmp199_AST = astFactory.create(LT(1));
				match(COLON);
				labelled_create_procedure_stmt();
				lcp_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					labelled_create_procedure_stmt_AST = (AST)currentAST.root;
					labelled_create_procedure_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(LABELLED_STMT,"labelled_stmt")).add(l_AST).add(lcp_AST));
					currentAST.root = labelled_create_procedure_stmt_AST;
					currentAST.child = labelled_create_procedure_stmt_AST!=null &&labelled_create_procedure_stmt_AST.getFirstChild()!=null ?
						labelled_create_procedure_stmt_AST.getFirstChild() : labelled_create_procedure_stmt_AST;
					currentAST.advanceChildToEnd();
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = labelled_create_procedure_stmt_AST;
	}
	
	public final void labelled_create_trigger_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST labelled_create_trigger_stmt_AST = null;
		AST lbl_AST = null;
		AST lct_AST = null;
		
		if ((LA(1)==CREATE||LA(1)==ALTER)) {
			create_trigger_stmt();
			astFactory.addASTChild(currentAST, returnAST);
			labelled_create_trigger_stmt_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_2.member(LA(1)))) {
			label();
			lbl_AST = (AST)returnAST;
			AST tmp200_AST = null;
			tmp200_AST = astFactory.create(LT(1));
			match(COLON);
			labelled_create_trigger_stmt();
			lct_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				labelled_create_trigger_stmt_AST = (AST)currentAST.root;
				labelled_create_trigger_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(LABELLED_STMT,"labelled_stmt")).add(lbl_AST).add(lct_AST));
				currentAST.root = labelled_create_trigger_stmt_AST;
				currentAST.child = labelled_create_trigger_stmt_AST!=null &&labelled_create_trigger_stmt_AST.getFirstChild()!=null ?
					labelled_create_trigger_stmt_AST.getFirstChild() : labelled_create_trigger_stmt_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = labelled_create_trigger_stmt_AST;
	}
	
	public final void sp_proc_call_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sp_proc_call_stmt_AST = null;
		AST s_AST = null;
		AST args_AST = null;
		
		qual_sp_proc_name();
		s_AST = (AST)returnAST;
		{
		if ((_tokenSet_61.member(LA(1)))) {
			sp_arg_list();
			args_AST = (AST)returnAST;
		}
		else if ((_tokenSet_33.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			sp_proc_call_stmt_AST = (AST)currentAST.root;
			sp_proc_call_stmt_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SP_PROC_CALL_STMT,"sp_proc_call_stmt")).add(s_AST).add(args_AST)); 
				    SrcAST.setSpan(sp_proc_call_stmt_AST,s_AST,args_AST); 
				
			currentAST.root = sp_proc_call_stmt_AST;
			currentAST.child = sp_proc_call_stmt_AST!=null &&sp_proc_call_stmt_AST.getFirstChild()!=null ?
				sp_proc_call_stmt_AST.getFirstChild() : sp_proc_call_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = sp_proc_call_stmt_AST;
	}
	
	public final void stmt_space_list(
		AST p
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST stmt_space_list_AST = null;
		
		pure_stmt_space_list(p);
		if ( inputState.guessing==0 ) {
			stmt_space_list_AST = (AST)currentAST.root;
			stmt_space_list_AST = p;
			currentAST.root = stmt_space_list_AST;
			currentAST.child = stmt_space_list_AST!=null &&stmt_space_list_AST.getFirstChild()!=null ?
				stmt_space_list_AST.getFirstChild() : stmt_space_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = stmt_space_list_AST;
	}
	
	public final void proc_call_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_call_stmt_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST pname_AST = null;
		AST n_AST = null;
		AST args_AST = null;
		
		{
		if ((LA(1)==AT_IDENT)) {
			id = LT(1);
			id_AST = astFactory.create(id);
			match(AT_IDENT);
			AST tmp201_AST = null;
			tmp201_AST = astFactory.create(LT(1));
			match(EQUAL);
		}
		else if ((_tokenSet_2.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		remote_proc_name();
		pname_AST = (AST)returnAST;
		{
		if ((LA(1)==SEMI_COLON)) {
			AST tmp202_AST = null;
			tmp202_AST = astFactory.create(LT(1));
			match(SEMI_COLON);
			unsigned_num_int();
			n_AST = (AST)returnAST;
		}
		else if ((_tokenSet_62.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		if ((_tokenSet_47.member(LA(1)))) {
			proc_arg_list();
			args_AST = (AST)returnAST;
		}
		else if ((_tokenSet_63.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			proc_call_stmt_AST = (AST)currentAST.root;
			proc_call_stmt_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(PROC_CALL_STMT,"proc_call_stmt")).add(id_AST).add(pname_AST).add(n_AST).add(args_AST));
			currentAST.root = proc_call_stmt_AST;
			currentAST.child = proc_call_stmt_AST!=null &&proc_call_stmt_AST.getFirstChild()!=null ?
				proc_call_stmt_AST.getFirstChild() : proc_call_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = proc_call_stmt_AST;
	}
	
	public final void qualified_column_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_column_name_AST = null;
		AST d1_AST = null;
		AST o2_AST = null;
		AST t3_AST = null;
		AST c4_AST = null;
		AST o_AST = null;
		AST t1_AST = null;
		AST c2_AST = null;
		AST t_AST = null;
		AST c1_AST = null;
		AST d_AST = null;
		AST t2_AST = null;
		AST c3_AST = null;
		AST c_AST = null;
		AST qc = astFactory.create(QUALIFIED_COLUMN_NAME,"qualified_column_name");
		
		boolean synPredMatched286 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m286 = mark();
			synPredMatched286 = true;
			inputState.guessing++;
			try {
				{
				database_name();
				match(DOT);
				owner_name();
				match(DOT);
				table_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched286 = false;
			}
			rewind(_m286);
			inputState.guessing--;
		}
		if ( synPredMatched286 ) {
			database_name();
			d1_AST = (AST)returnAST;
			AST tmp203_AST = null;
			tmp203_AST = astFactory.create(LT(1));
			match(DOT);
			owner_name();
			o2_AST = (AST)returnAST;
			AST tmp204_AST = null;
			tmp204_AST = astFactory.create(LT(1));
			match(DOT);
			table_name();
			t3_AST = (AST)returnAST;
			AST tmp205_AST = null;
			tmp205_AST = astFactory.create(LT(1));
			match(DOT);
			column_name();
			c4_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qualified_column_name_AST = (AST)currentAST.root;
				qualified_column_name_AST = (AST)astFactory.make( (new ASTArray(5)).add(qc).add(d1_AST).add(o2_AST).add(t3_AST).add(c4_AST)); SrcAST.setSpan(qualified_column_name_AST,d1_AST,c4_AST);
				currentAST.root = qualified_column_name_AST;
				currentAST.child = qualified_column_name_AST!=null &&qualified_column_name_AST.getFirstChild()!=null ?
					qualified_column_name_AST.getFirstChild() : qualified_column_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			boolean synPredMatched288 = false;
			if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
				int _m288 = mark();
				synPredMatched288 = true;
				inputState.guessing++;
				try {
					{
					owner_name();
					match(DOT);
					table_name();
					match(DOT);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched288 = false;
				}
				rewind(_m288);
				inputState.guessing--;
			}
			if ( synPredMatched288 ) {
				owner_name();
				o_AST = (AST)returnAST;
				AST tmp206_AST = null;
				tmp206_AST = astFactory.create(LT(1));
				match(DOT);
				table_name();
				t1_AST = (AST)returnAST;
				AST tmp207_AST = null;
				tmp207_AST = astFactory.create(LT(1));
				match(DOT);
				column_name();
				c2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qualified_column_name_AST = (AST)currentAST.root;
					qualified_column_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(qc).add(o_AST).add(t1_AST).add(c2_AST)); SrcAST.setSpan(qualified_column_name_AST,o_AST,c2_AST);
					currentAST.root = qualified_column_name_AST;
					currentAST.child = qualified_column_name_AST!=null &&qualified_column_name_AST.getFirstChild()!=null ?
						qualified_column_name_AST.getFirstChild() : qualified_column_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
				table_name();
				t_AST = (AST)returnAST;
				AST tmp208_AST = null;
				tmp208_AST = astFactory.create(LT(1));
				match(DOT);
				column_name();
				c1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qualified_column_name_AST = (AST)currentAST.root;
					qualified_column_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(qc).add(t_AST).add(c1_AST)); SrcAST.setSpan(qualified_column_name_AST,t_AST,c1_AST);
					currentAST.root = qualified_column_name_AST;
					currentAST.child = qualified_column_name_AST!=null &&qualified_column_name_AST.getFirstChild()!=null ?
						qualified_column_name_AST.getFirstChild() : qualified_column_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOTDOT)) {
				database_name();
				d_AST = (AST)returnAST;
				AST tmp209_AST = null;
				tmp209_AST = astFactory.create(LT(1));
				match(DOTDOT);
				table_name();
				t2_AST = (AST)returnAST;
				AST tmp210_AST = null;
				tmp210_AST = astFactory.create(LT(1));
				match(DOT);
				column_name();
				c3_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qualified_column_name_AST = (AST)currentAST.root;
					qualified_column_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(qc).add(d_AST).add(t2_AST).add(c2_AST)); SrcAST.setSpan(qualified_column_name_AST,d_AST,c3_AST);
					currentAST.root = qualified_column_name_AST;
					currentAST.child = qualified_column_name_AST!=null &&qualified_column_name_AST.getFirstChild()!=null ?
						qualified_column_name_AST.getFirstChild() : qualified_column_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_64.member(LA(2)))) {
				column_name();
				c_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qualified_column_name_AST = (AST)currentAST.root;
					qualified_column_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(qc).add(c_AST)); SrcAST.setSpan(qualified_column_name_AST,c_AST);
					currentAST.root = qualified_column_name_AST;
					currentAST.child = qualified_column_name_AST!=null &&qualified_column_name_AST.getFirstChild()!=null ?
						qualified_column_name_AST.getFirstChild() : qualified_column_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			returnAST = qualified_column_name_AST;
		}
		
	public final void database_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST database_name_AST = null;
		AST db_AST = null;
		
		identifier();
		db_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			database_name_AST = (AST)currentAST.root;
			database_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DATABASE_NAME,"database_name")).add(db_AST)); 
				    SrcAST.setSpan (database_name_AST,db_AST); 
				    database_name_AST.setText(db_AST.getText());
				
			currentAST.root = database_name_AST;
			currentAST.child = database_name_AST!=null &&database_name_AST.getFirstChild()!=null ?
				database_name_AST.getFirstChild() : database_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = database_name_AST;
	}
	
	public final void owner_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST owner_name_AST = null;
		AST ow_AST = null;
		
		identifier();
		ow_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			owner_name_AST = (AST)currentAST.root;
			SrcAST.setSpan (owner_name_AST,ow_AST);
		}
		if ( inputState.guessing==0 ) {
			owner_name_AST = (AST)currentAST.root;
			owner_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(OWNER_NAME,"owner_name")).add(ow_AST)); 
				    SrcAST.setSpan(owner_name_AST,ow_AST);
				    owner_name_AST.setText(ow_AST.getText());
				
			currentAST.root = owner_name_AST;
			currentAST.child = owner_name_AST!=null &&owner_name_AST.getFirstChild()!=null ?
				owner_name_AST.getFirstChild() : owner_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = owner_name_AST;
	}
	
	public final void table_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_name_AST = null;
		AST i_AST = null;
		
		identifier();
		i_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			table_name_AST = (AST)currentAST.root;
			table_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TABLE_NAME,"table_name")).add(i_AST)); 
				    SrcAST.setSpan(table_name_AST,i_AST);
				    table_name_AST.setText(i_AST.getText());
				
			currentAST.root = table_name_AST;
			currentAST.child = table_name_AST!=null &&table_name_AST.getFirstChild()!=null ?
				table_name_AST.getFirstChild() : table_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = table_name_AST;
	}
	
	public final void column_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_name_AST = null;
		AST i_AST = null;
		
		identifier();
		i_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			column_name_AST = (AST)currentAST.root;
			column_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COLUMN_NAME,"column_name")).add(i_AST));
				  	SrcAST.setSpan(column_name_AST,i_AST);
				  	column_name_AST.setText(i_AST.getText());
				
			currentAST.root = column_name_AST;
			currentAST.child = column_name_AST!=null &&column_name_AST.getFirstChild()!=null ?
				column_name_AST.getFirstChild() : column_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = column_name_AST;
	}
	
	public final void qual_index_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_index_name_AST = null;
		AST d1_AST = null;
		AST o2_AST = null;
		AST t3_AST = null;
		AST i4_AST = null;
		AST o_AST = null;
		AST t1_AST = null;
		AST i2_AST = null;
		AST t_AST = null;
		AST i1_AST = null;
		AST d_AST = null;
		AST t2_AST = null;
		AST i3_AST = null;
		AST i_AST = null;
		AST qi = astFactory.create(QUAL_INDEX_NAME,"qual_index_name");
		
		boolean synPredMatched291 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m291 = mark();
			synPredMatched291 = true;
			inputState.guessing++;
			try {
				{
				database_name();
				match(DOT);
				owner_name();
				match(DOT);
				table_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched291 = false;
			}
			rewind(_m291);
			inputState.guessing--;
		}
		if ( synPredMatched291 ) {
			database_name();
			d1_AST = (AST)returnAST;
			AST tmp211_AST = null;
			tmp211_AST = astFactory.create(LT(1));
			match(DOT);
			owner_name();
			o2_AST = (AST)returnAST;
			AST tmp212_AST = null;
			tmp212_AST = astFactory.create(LT(1));
			match(DOT);
			table_name();
			t3_AST = (AST)returnAST;
			AST tmp213_AST = null;
			tmp213_AST = astFactory.create(LT(1));
			match(DOT);
			index_name();
			i4_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_index_name_AST = (AST)currentAST.root;
				qual_index_name_AST = (AST)astFactory.make( (new ASTArray(5)).add(qi).add(d1_AST).add(o2_AST).add(t3_AST).add(i4_AST));
				currentAST.root = qual_index_name_AST;
				currentAST.child = qual_index_name_AST!=null &&qual_index_name_AST.getFirstChild()!=null ?
					qual_index_name_AST.getFirstChild() : qual_index_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			boolean synPredMatched293 = false;
			if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
				int _m293 = mark();
				synPredMatched293 = true;
				inputState.guessing++;
				try {
					{
					owner_name();
					match(DOT);
					table_name();
					match(DOT);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched293 = false;
				}
				rewind(_m293);
				inputState.guessing--;
			}
			if ( synPredMatched293 ) {
				owner_name();
				o_AST = (AST)returnAST;
				AST tmp214_AST = null;
				tmp214_AST = astFactory.create(LT(1));
				match(DOT);
				table_name();
				t1_AST = (AST)returnAST;
				AST tmp215_AST = null;
				tmp215_AST = astFactory.create(LT(1));
				match(DOT);
				index_name();
				i2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qual_index_name_AST = (AST)currentAST.root;
					qual_index_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(qi).add(o_AST).add(t1_AST).add(i2_AST));
					currentAST.root = qual_index_name_AST;
					currentAST.child = qual_index_name_AST!=null &&qual_index_name_AST.getFirstChild()!=null ?
						qual_index_name_AST.getFirstChild() : qual_index_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
				table_name();
				t_AST = (AST)returnAST;
				AST tmp216_AST = null;
				tmp216_AST = astFactory.create(LT(1));
				match(DOT);
				index_name();
				i1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qual_index_name_AST = (AST)currentAST.root;
					qual_index_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(qi).add(t_AST).add(i1_AST));
					currentAST.root = qual_index_name_AST;
					currentAST.child = qual_index_name_AST!=null &&qual_index_name_AST.getFirstChild()!=null ?
						qual_index_name_AST.getFirstChild() : qual_index_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOTDOT)) {
				database_name();
				d_AST = (AST)returnAST;
				AST tmp217_AST = null;
				tmp217_AST = astFactory.create(LT(1));
				match(DOTDOT);
				table_name();
				t2_AST = (AST)returnAST;
				AST tmp218_AST = null;
				tmp218_AST = astFactory.create(LT(1));
				match(DOT);
				index_name();
				i3_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qual_index_name_AST = (AST)currentAST.root;
					qual_index_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(qi).add(d_AST).add(t2_AST).add(i2_AST));
					currentAST.root = qual_index_name_AST;
					currentAST.child = qual_index_name_AST!=null &&qual_index_name_AST.getFirstChild()!=null ?
						qual_index_name_AST.getFirstChild() : qual_index_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==COMMA)) {
				index_name();
				i_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qual_index_name_AST = (AST)currentAST.root;
					qual_index_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(qi).add(i_AST));
					currentAST.root = qual_index_name_AST;
					currentAST.child = qual_index_name_AST!=null &&qual_index_name_AST.getFirstChild()!=null ?
						qual_index_name_AST.getFirstChild() : qual_index_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			returnAST = qual_index_name_AST;
		}
		
/********* CREATE INDEX STMT *********/
	public final void index_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST index_name_AST = null;
		AST i_AST = null;
		
		identifier();
		i_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			index_name_AST = (AST)currentAST.root;
			index_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(INDEX_NAME,"index_name")).add(i_AST));
				  	index_name_AST.setText(SrcAST.getText(i_AST));
				  	SrcAST.setSpan(index_name_AST,i_AST);
				
			currentAST.root = index_name_AST;
			currentAST.child = index_name_AST!=null &&index_name_AST.getFirstChild()!=null ?
				index_name_AST.getFirstChild() : index_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = index_name_AST;
	}
	
	public final void qual_table_name_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_table_name_list_AST = null;
		AST q1_AST = null;
		AST q2_AST = null;
		
		qualified_table_name();
		q1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop296:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				qualified_table_name();
				q2_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop296;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			qual_table_name_list_AST = (AST)currentAST.root;
			SrcAST.setSpan(qual_table_name_list_AST,q1_AST,q2_AST);
		}
		qual_table_name_list_AST = (AST)currentAST.root;
		returnAST = qual_table_name_list_AST;
	}
	
	public final void qualified_table_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_table_name_AST = null;
		AST db2_AST = null;
		AST ow3_AST = null;
		AST t7_AST = null;
		AST ow1_AST = null;
		AST t4_AST = null;
		AST db1_AST = null;
		AST t6_AST = null;
		AST t1_AST = null;
		Token  d2 = null;
		AST d2_AST = null;
		AST ow2_AST = null;
		AST t5_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST t2_AST = null;
		Token  d1 = null;
		AST d1_AST = null;
		AST t3_AST = null;
			 AST nm = astFactory.create(QUALIFIED_TABLE_NAME,"qualified_table_name");
		
		boolean synPredMatched299 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m299 = mark();
			synPredMatched299 = true;
			inputState.guessing++;
			try {
				{
				database_name();
				match(DOT);
				owner_name();
				match(DOT);
				table_name();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched299 = false;
			}
			rewind(_m299);
			inputState.guessing--;
		}
		if ( synPredMatched299 ) {
			database_name();
			db2_AST = (AST)returnAST;
			AST tmp220_AST = null;
			tmp220_AST = astFactory.create(LT(1));
			match(DOT);
			owner_name();
			ow3_AST = (AST)returnAST;
			AST tmp221_AST = null;
			tmp221_AST = astFactory.create(LT(1));
			match(DOT);
			table_name();
			t7_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qualified_table_name_AST = (AST)currentAST.root;
				qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(nm).add(db2_AST).add(ow3_AST).add(t7_AST)); 
					     SrcAST.setSpan(qualified_table_name_AST,db2_AST,t7_AST);
					
				currentAST.root = qualified_table_name_AST;
				currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
					qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			boolean synPredMatched301 = false;
			if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
				int _m301 = mark();
				synPredMatched301 = true;
				inputState.guessing++;
				try {
					{
					owner_name();
					match(DOT);
					table_name();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched301 = false;
				}
				rewind(_m301);
				inputState.guessing--;
			}
			if ( synPredMatched301 ) {
				owner_name();
				ow1_AST = (AST)returnAST;
				AST tmp222_AST = null;
				tmp222_AST = astFactory.create(LT(1));
				match(DOT);
				table_name();
				t4_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qualified_table_name_AST = (AST)currentAST.root;
					qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(nm).add(ow1_AST).add(t4_AST)); 
						    SrcAST.setSpan(qualified_table_name_AST,ow1_AST,t4_AST);
						
					currentAST.root = qualified_table_name_AST;
					currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
						qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOTDOT)) {
				database_name();
				db1_AST = (AST)returnAST;
				AST tmp223_AST = null;
				tmp223_AST = astFactory.create(LT(1));
				match(DOTDOT);
				table_name();
				t6_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qualified_table_name_AST = (AST)currentAST.root;
					qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(nm).add(db1_AST).add(t6_AST)); 
						    SrcAST.setSpan(qualified_table_name_AST,db1_AST,t6_AST);
						
					currentAST.root = qualified_table_name_AST;
					currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
						qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				boolean synPredMatched303 = false;
				if (((_tokenSet_2.member(LA(1))) && (_tokenSet_65.member(LA(2))))) {
					int _m303 = mark();
					synPredMatched303 = true;
					inputState.guessing++;
					try {
						{
						table_name();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched303 = false;
					}
					rewind(_m303);
					inputState.guessing--;
				}
				if ( synPredMatched303 ) {
					table_name();
					t1_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						qualified_table_name_AST = (AST)currentAST.root;
						qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(nm).add(t1_AST)); 
							     SrcAST.setSpan(qualified_table_name_AST,t1_AST);
							
						currentAST.root = qualified_table_name_AST;
						currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
							qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
						currentAST.advanceChildToEnd();
					}
				}
				else {
					boolean synPredMatched305 = false;
					if (((LA(1)==DOT) && (_tokenSet_2.member(LA(2))))) {
						int _m305 = mark();
						synPredMatched305 = true;
						inputState.guessing++;
						try {
							{
							match(DOT);
							owner_name();
							match(DOT);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched305 = false;
						}
						rewind(_m305);
						inputState.guessing--;
					}
					if ( synPredMatched305 ) {
						d2 = LT(1);
						d2_AST = astFactory.create(d2);
						match(DOT);
						owner_name();
						ow2_AST = (AST)returnAST;
						AST tmp224_AST = null;
						tmp224_AST = astFactory.create(LT(1));
						match(DOT);
						table_name();
						t5_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							qualified_table_name_AST = (AST)currentAST.root;
							qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(nm).add(ow2_AST).add(t5_AST)); 
								    SrcAST.setSpan(qualified_table_name_AST,d2_AST,t5_AST);
								
							currentAST.root = qualified_table_name_AST;
							currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
								qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
							currentAST.advanceChildToEnd();
						}
					}
					else if ((LA(1)==DOT) && (_tokenSet_2.member(LA(2)))) {
						d = LT(1);
						d_AST = astFactory.create(d);
						match(DOT);
						table_name();
						t2_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							qualified_table_name_AST = (AST)currentAST.root;
							qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(nm).add(t2_AST)); 
								   SrcAST.setSpan(qualified_table_name_AST,d_AST,t2_AST);
								
							currentAST.root = qualified_table_name_AST;
							currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
								qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
							currentAST.advanceChildToEnd();
						}
					}
					else if ((LA(1)==DOTDOT)) {
						d1 = LT(1);
						d1_AST = astFactory.create(d1);
						match(DOTDOT);
						table_name();
						t3_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							qualified_table_name_AST = (AST)currentAST.root;
							qualified_table_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(nm).add(t3_AST)); 
								    SrcAST.setSpan(qualified_table_name_AST,d1_AST,t3_AST);
								
							currentAST.root = qualified_table_name_AST;
							currentAST.child = qualified_table_name_AST!=null &&qualified_table_name_AST.getFirstChild()!=null ?
								qualified_table_name_AST.getFirstChild() : qualified_table_name_AST;
							currentAST.advanceChildToEnd();
						}
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					}}}
					returnAST = qualified_table_name_AST;
				}
				
	public final void identifier() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST identifier_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST kw_AST = null;
		AST join_AST = null;
		AST i1 = astFactory.create(IDENTIFIER,"IDENTIFIER");
			   AST i2 = astFactory.create(QUOTED_IDENTIFIER,"QUOTED_IDENTIFIER");
			
		
		switch ( LA(1)) {
		case IDENT:
		{
			id = LT(1);
			id_AST = astFactory.create(id);
			match(IDENT);
			if ( inputState.guessing==0 ) {
				SrcAST.setSpan( i1, id_AST );
			}
			if ( inputState.guessing==0 ) {
				i1.setText( SrcAST.getText(id_AST) );
			}
			if ( inputState.guessing==0 ) {
				identifier_AST = (AST)currentAST.root;
				identifier_AST = i1;
				currentAST.root = identifier_AST;
				currentAST.child = identifier_AST!=null &&identifier_AST.getFirstChild()!=null ?
					identifier_AST.getFirstChild() : identifier_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case INNER:
		case OUTER:
		case LEFT:
		case RIGHT:
		{
			ansijoin_nonResWords();
			join_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				identifier_AST = (AST)currentAST.root;
				SrcAST.setSpan(i1,join_AST);
					  	i1.setText( SrcAST.getText(join_AST) );
					  	identifier_AST = i1;
					
				currentAST.root = identifier_AST;
				currentAST.child = identifier_AST!=null &&identifier_AST.getFirstChild()!=null ?
					identifier_AST.getFirstChild() : identifier_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
			if ((_tokenSet_66.member(LA(1)))) {
				nonreskeyword();
				kw_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					SrcAST.setSpan( i1, kw_AST );
				}
				if ( inputState.guessing==0 ) {
					i1.setText( SrcAST.getText(kw_AST) );
				}
				if ( inputState.guessing==0 ) {
					identifier_AST = (AST)currentAST.root;
					identifier_AST = i1;
					currentAST.root = identifier_AST;
					currentAST.child = identifier_AST!=null &&identifier_AST.getFirstChild()!=null ?
						identifier_AST.getFirstChild() : identifier_AST;
					currentAST.advanceChildToEnd();
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = identifier_AST;
	}
	
	public final void name_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST name_list_AST = null;
		AST n1_AST = null;
		AST n2_AST = null;
		AST nlist = astFactory.create(NAME_LIST,"name_list");
		
		name();
		n1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			nlist.addChild(n1_AST);
		}
		{
		_loop309:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				name();
				n2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					nlist.addChild(n2_AST);
				}
			}
			else {
				break _loop309;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			name_list_AST = (AST)currentAST.root;
			name_list_AST = nlist; 
				    SrcAST.setSpan(name_list_AST,n1_AST,n2_AST);
				
			currentAST.root = name_list_AST;
			currentAST.child = name_list_AST!=null &&name_list_AST.getFirstChild()!=null ?
				name_list_AST.getFirstChild() : name_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = name_list_AST;
	}
	
	public final void name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST name_AST = null;
		
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		name_AST = (AST)currentAST.root;
		returnAST = name_AST;
	}
	
/********** Rules for DATATYPES ***************/
	public final void character_or_char() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST character_or_char_AST = null;
		
		switch ( LA(1)) {
		case CHARACTER:
		{
			AST tmp226_AST = null;
			tmp226_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp226_AST);
			match(CHARACTER);
			character_or_char_AST = (AST)currentAST.root;
			break;
		}
		case CHAR:
		{
			AST tmp227_AST = null;
			tmp227_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp227_AST);
			match(CHAR);
			character_or_char_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = character_or_char_AST;
	}
	
	public final void size_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST size_constr_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  n2 = null;
		AST n2_AST = null;
		
		AST tmp228_AST = null;
		tmp228_AST = astFactory.create(LT(1));
		match(LPAREN);
		n = LT(1);
		n_AST = astFactory.create(n);
		match(NUM_INT);
		{
		switch ( LA(1)) {
		case COMMA:
		{
			AST tmp229_AST = null;
			tmp229_AST = astFactory.create(LT(1));
			match(COMMA);
			n2 = LT(1);
			n2_AST = astFactory.create(n2);
			match(NUM_INT);
			break;
		}
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp230_AST = null;
		tmp230_AST = astFactory.create(LT(1));
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			size_constr_AST = (AST)currentAST.root;
			String s = "(" + SrcAST.getText(n_AST);
				  if (n2!=null)
				    s+= "," + SrcAST.getText(n2_AST);
				  s += ")";
				  size_constr_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SIZE_CONSTR,"SIZE_CONSTR")).add(n_AST).add(n2_AST));
				  size_constr_AST.setText (s);	  
				  SrcAST.setSpan(size_constr_AST,n_AST,n2_AST);
				
			currentAST.root = size_constr_AST;
			currentAST.child = size_constr_AST!=null &&size_constr_AST.getFirstChild()!=null ?
				size_constr_AST.getFirstChild() : size_constr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = size_constr_AST;
	}
	
	public final void national_character() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST national_character_AST = null;
		AST c_AST = null;
		AST c1_AST = null;
		
		AST tmp231_AST = null;
		tmp231_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp231_AST);
		match(NATIONAL);
		{
		if ((LA(1)==CHARACTER||LA(1)==CHAR) && (LA(2)==VARYING)) {
			character_or_char();
			c_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp232_AST = null;
			tmp232_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp232_AST);
			match(VARYING);
			if ( inputState.guessing==0 ) {
				national_character_AST = (AST)currentAST.root;
				national_character_AST.setText ( "national " + SrcAST.getText(c_AST) + " varying" );
			}
		}
		else if ((LA(1)==CHARACTER||LA(1)==CHAR) && (_tokenSet_67.member(LA(2)))) {
			character_or_char();
			c1_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				national_character_AST = (AST)currentAST.root;
				national_character_AST.setText ( "national " + SrcAST.getText(c1_AST));
			}
		}
		else if ((LA(1)==TEXT)) {
			AST tmp233_AST = null;
			tmp233_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp233_AST);
			match(TEXT);
			if ( inputState.guessing==0 ) {
				national_character_AST = (AST)currentAST.root;
				national_character_AST.setText ( "national text");
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		national_character_AST = (AST)currentAST.root;
		returnAST = national_character_AST;
	}
	
	public final void unicode_character() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unicode_character_AST = null;
		AST c_AST = null;
		AST c1_AST = null;
		
		AST tmp234_AST = null;
		tmp234_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp234_AST);
		match(UNICODE);
		{
		if ((LA(1)==CHARACTER||LA(1)==CHAR) && (LA(2)==VARYING)) {
			character_or_char();
			c_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp235_AST = null;
			tmp235_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp235_AST);
			match(VARYING);
			if ( inputState.guessing==0 ) {
				unicode_character_AST = (AST)currentAST.root;
				unicode_character_AST.setText ( "unicode " + SrcAST.getText(c_AST) + " varying" );
			}
		}
		else if ((LA(1)==CHARACTER||LA(1)==CHAR) && (_tokenSet_67.member(LA(2)))) {
			character_or_char();
			c1_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				unicode_character_AST = (AST)currentAST.root;
				unicode_character_AST.setText ( "unicode " + SrcAST.getText(c1_AST));
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		unicode_character_AST = (AST)currentAST.root;
		returnAST = unicode_character_AST;
	}
	
	public final void datatype() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST datatype_AST = null;
		AST tn_AST = null;
		AST s_AST = null;
		
		type_name();
		tn_AST = (AST)returnAST;
		{
		boolean synPredMatched323 = false;
		if (((LA(1)==LPAREN) && (LA(2)==NUM_INT))) {
			int _m323 = mark();
			synPredMatched323 = true;
			inputState.guessing++;
			try {
				{
				size_constr();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched323 = false;
			}
			rewind(_m323);
			inputState.guessing--;
		}
		if ( synPredMatched323 ) {
			size_constr();
			s_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				datatype_AST = (AST)currentAST.root;
				datatype_AST =  (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(DATATYPE,"datatype")).add(tn_AST).add(s_AST)); 
					      datatype_AST.setText (SrcAST.getText(tn_AST) + SrcAST.getText(s_AST));
					      SrcAST.setSpan(datatype_AST,tn_AST,s_AST);
				currentAST.root = datatype_AST;
				currentAST.child = datatype_AST!=null &&datatype_AST.getFirstChild()!=null ?
					datatype_AST.getFirstChild() : datatype_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_67.member(LA(1))) && (_tokenSet_68.member(LA(2)))) {
			if ( inputState.guessing==0 ) {
				datatype_AST = (AST)currentAST.root;
				datatype_AST =  (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DATATYPE,"datatype")).add(tn_AST)); 
					      datatype_AST.setText (SrcAST.getText(tn_AST));
					      SrcAST.setSpan(datatype_AST,tn_AST);
				currentAST.root = datatype_AST;
				currentAST.child = datatype_AST!=null &&datatype_AST.getFirstChild()!=null ?
					datatype_AST.getFirstChild() : datatype_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		returnAST = datatype_AST;
	}
	
	public final void type_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_name_AST = null;
		AST n_AST = null;
		AST uc_AST = null;
		AST i_AST = null;
		Token  v = null;
		AST v_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST tn1_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST tn2_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  d1 = null;
		AST d1_AST = null;
		Token  p1 = null;
		AST p1_AST = null;
		AST left=null, right=null;
		
		{
		switch ( LA(1)) {
		case NATIONAL:
		{
			national_character();
			n_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				left=n_AST; right=null;
			}
			break;
		}
		case UNSIGNED:
		{
			u = LT(1);
			u_AST = astFactory.create(u);
			astFactory.addASTChild(currentAST, u_AST);
			match(UNSIGNED);
			identifier();
			tn1_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				left=u_AST; right=tn1_AST;
			}
			break;
		}
		case LONG:
		{
			l = LT(1);
			l_AST = astFactory.create(l);
			astFactory.addASTChild(currentAST, l_AST);
			match(LONG);
			identifier();
			tn2_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				left=l_AST; right=tn2_AST;
			}
			break;
		}
		default:
			if ((LA(1)==UNICODE) && (LA(2)==CHARACTER||LA(2)==CHAR)) {
				unicode_character();
				uc_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				if ( inputState.guessing==0 ) {
					left=uc_AST; right=null;
				}
			}
			else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_69.member(LA(2)))) {
				identifier();
				i_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case VARYING:
				{
					v = LT(1);
					v_AST = astFactory.create(v);
					astFactory.addASTChild(currentAST, v_AST);
					match(VARYING);
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case IDENTITY:
				case NULL:
				case NOT:
				case GO:
				case UNIQUE:
				case PRIMARY:
				case WITH:
				case REFERENCES:
				case CHECK:
				case CHECKPOINT:
				case IN:
				case FOREIGN:
				case ALTER:
				case DROP:
				case CONSTRAINT:
				case ADD:
				case DEFAULT:
				case AS:
				case FOR:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case OFF:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case COLLATE:
				case DENY:
				case UPDATETEXT:
				case ROWGUIDCOL:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case OUTPUT:
				case OUT:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case COMMA:
				case SEMI_COLON:
				case EQUAL:
				case LPAREN:
				case RPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				if ( inputState.guessing==0 ) {
					left=i_AST; right=v_AST;
				}
			}
			else if ((LA(1)==DOUBLE) && (_tokenSet_67.member(LA(2)))) {
				d = LT(1);
				d_AST = astFactory.create(d);
				astFactory.addASTChild(currentAST, d_AST);
				match(DOUBLE);
				if ( inputState.guessing==0 ) {
					left=d_AST; right=null;
				}
			}
			else if ((LA(1)==DOUBLE) && (LA(2)==PRECISION)) {
				d1 = LT(1);
				d1_AST = astFactory.create(d1);
				astFactory.addASTChild(currentAST, d1_AST);
				match(DOUBLE);
				p1 = LT(1);
				p1_AST = astFactory.create(p1);
				astFactory.addASTChild(currentAST, p1_AST);
				match(PRECISION);
				if ( inputState.guessing==0 ) {
					left=d1_AST; right=p1_AST;
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			type_name_AST = (AST)currentAST.root;
			type_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TYPE_NAME,"TYPE_NAME")).add(type_name_AST));
				  	if (right==null) {
				  	  SrcAST.setSpan(type_name_AST, left);
				  	  type_name_AST.setText(left.getText());
				  	} else {
				      SrcAST.setSpan(type_name_AST, left, right);
				      type_name_AST.setText(left.getText()+" "+right.getText());
				  	}
				  	
				
			currentAST.root = type_name_AST;
			currentAST.child = type_name_AST!=null &&type_name_AST.getFirstChild()!=null ?
				type_name_AST.getFirstChild() : type_name_AST;
			currentAST.advanceChildToEnd();
		}
		type_name_AST = (AST)currentAST.root;
		returnAST = type_name_AST;
	}
	
/******** End of Rules for DATATYPES **********/
	public final void constraint_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constraint_name_AST = null;
		
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		constraint_name_AST = (AST)currentAST.root;
		returnAST = constraint_name_AST;
	}
	
	public final void constr_constraintName() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constr_constraintName_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST nm_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CONSTRAINT);
		constraint_name();
		nm_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			constr_constraintName_AST = (AST)currentAST.root;
			constr_constraintName_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CONSTR_NAME,"constraint_name")).add(nm_AST)); 
				    SrcAST.setSpan(constr_constraintName_AST,c_AST,nm_AST);
				
			currentAST.root = constr_constraintName_AST;
			currentAST.child = constr_constraintName_AST!=null &&constr_constraintName_AST.getFirstChild()!=null ?
				constr_constraintName_AST.getFirstChild() : constr_constraintName_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = constr_constraintName_AST;
	}
	
	public final void notForReplication() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST notForReplication_AST = null;
		
		AST tmp236_AST = null;
		tmp236_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp236_AST);
		match(NOT);
		AST tmp237_AST = null;
		tmp237_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp237_AST);
		match(FOR);
		AST tmp238_AST = null;
		tmp238_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp238_AST);
		match(REPLICATION);
		notForReplication_AST = (AST)currentAST.root;
		returnAST = notForReplication_AST;
	}
	
	public final void for_replication() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_replication_AST = null;
		
		AST tmp239_AST = null;
		tmp239_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp239_AST);
		match(FOR);
		AST tmp240_AST = null;
		tmp240_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp240_AST);
		match(REPLICATION);
		for_replication_AST = (AST)currentAST.root;
		returnAST = for_replication_AST;
	}
	
	public final void identity_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST identity_constr_AST = null;
		Token  id = null;
		AST id_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		Token  s = null;
		AST s_AST = null;
		Token  i = null;
		AST i_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST nr_AST = null;
		Token  def = null;
		AST def_AST = null;
		
		if ((LA(1)==IDENTITY)) {
			id = LT(1);
			id_AST = astFactory.create(id);
			match(IDENTITY);
			{
			boolean synPredMatched334 = false;
			if (((LA(1)==LPAREN) && (LA(2)==NUM_INT))) {
				int _m334 = mark();
				synPredMatched334 = true;
				inputState.guessing++;
				try {
					{
					match(LPAREN);
					match(NUM_INT);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched334 = false;
				}
				rewind(_m334);
				inputState.guessing--;
			}
			if ( synPredMatched334 ) {
				lp = LT(1);
				lp_AST = astFactory.create(lp);
				match(LPAREN);
				s = LT(1);
				s_AST = astFactory.create(s);
				match(NUM_INT);
				AST tmp241_AST = null;
				tmp241_AST = astFactory.create(LT(1));
				match(COMMA);
				i = LT(1);
				i_AST = astFactory.create(i);
				match(NUM_INT);
				rp = LT(1);
				rp_AST = astFactory.create(rp);
				match(RPAREN);
				{
				if ((LA(1)==NOT) && (LA(2)==FOR)) {
					notForReplication();
					nr_AST = (AST)returnAST;
				}
				else if ((_tokenSet_70.member(LA(1))) && (_tokenSet_71.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					identity_constr_AST = (AST)currentAST.root;
					identity_constr_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(IDENTITY_CONSTR,"identity_constr")).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SEED)).add(s_AST))).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(INCREMENT)).add(i_AST)))); 
								    SrcAST.setSpan(identity_constr_AST,i_AST,(nr_AST!=null)? nr_AST : rp_AST);
								
					currentAST.root = identity_constr_AST;
					currentAST.child = identity_constr_AST!=null &&identity_constr_AST.getFirstChild()!=null ?
						identity_constr_AST.getFirstChild() : identity_constr_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_70.member(LA(1))) && (_tokenSet_71.member(LA(2)))) {
				if ( inputState.guessing==0 ) {
					identity_constr_AST = (AST)currentAST.root;
					identity_constr_AST = astFactory.create(IDENTITY_CONSTR,"identity_constr"); 
							        SrcAST.setSpan(identity_constr_AST,id_AST);
							
					currentAST.root = identity_constr_AST;
					currentAST.child = identity_constr_AST!=null &&identity_constr_AST.getFirstChild()!=null ?
						identity_constr_AST.getFirstChild() : identity_constr_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		else if (((LA(1)==DEFAULT))&&((((TsqlGlobalOptions)globalOpts).getSourceDatabaseType() == TsqlGlobalOptions.SYBASE_ASA))) {
			def = LT(1);
			def_AST = astFactory.create(def);
			match(DEFAULT);
			AST tmp242_AST = null;
			tmp242_AST = astFactory.create(LT(1));
			match(AUTOINCREMENT);
			if ( inputState.guessing==0 ) {
				identity_constr_AST = (AST)currentAST.root;
				identity_constr_AST = astFactory.create(IDENTITY_CONSTR,"identity_constr");
						   	 SrcAST.setSpan(identity_constr_AST,def_AST);
						
				currentAST.root = identity_constr_AST;
				currentAST.child = identity_constr_AST!=null &&identity_constr_AST.getFirstChild()!=null ?
					identity_constr_AST.getFirstChild() : identity_constr_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = identity_constr_AST;
	}
	
	public final void null_not_null_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST null_not_null_constr_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  n1 = null;
		AST n1_AST = null;
		Token  n2 = null;
		AST n2_AST = null;
		
		switch ( LA(1)) {
		case NULL:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NULL);
			if ( inputState.guessing==0 ) {
				null_not_null_constr_AST = (AST)currentAST.root;
				null_not_null_constr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(NULL_CONSTR,"null_constr")).add(n_AST)); 
						    SrcAST.setSpan(null_not_null_constr_AST,n_AST);
						
				currentAST.root = null_not_null_constr_AST;
				currentAST.child = null_not_null_constr_AST!=null &&null_not_null_constr_AST.getFirstChild()!=null ?
					null_not_null_constr_AST.getFirstChild() : null_not_null_constr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NOT:
		{
			n1 = LT(1);
			n1_AST = astFactory.create(n1);
			match(NOT);
			n2 = LT(1);
			n2_AST = astFactory.create(n2);
			match(NULL);
			if ( inputState.guessing==0 ) {
				null_not_null_constr_AST = (AST)currentAST.root;
				null_not_null_constr_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(NOT_NULL_CONSTR,"not_null_constr")).add(n1_AST).add(n2_AST)); 
						    SrcAST.setSpan(null_not_null_constr_AST,n1_AST,n2_AST);
						
				currentAST.root = null_not_null_constr_AST;
				currentAST.child = null_not_null_constr_AST!=null &&null_not_null_constr_AST.getFirstChild()!=null ?
					null_not_null_constr_AST.getFirstChild() : null_not_null_constr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = null_not_null_constr_AST;
	}
	
	public final void default_def() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_def_AST = null;
		AST d_AST = null;
		AST c_AST = null;
		
		default_constr();
		d_AST = (AST)returnAST;
		AST tmp243_AST = null;
		tmp243_AST = astFactory.create(LT(1));
		match(FOR);
		column_name();
		c_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			default_def_AST = (AST)currentAST.root;
			default_def_AST = d_AST;
			currentAST.root = default_def_AST;
			currentAST.child = default_def_AST!=null &&default_def_AST.getFirstChild()!=null ?
				default_def_AST.getFirstChild() : default_def_AST;
			currentAST.advanceChildToEnd();
		}
		if ( inputState.guessing==0 ) {
			default_def_AST = (AST)currentAST.root;
			default_def_AST.addChild(c_AST); 
				    SrcAST.setSpan(default_def_AST,d_AST,c_AST);
				
		}
		returnAST = default_def_AST;
	}
	
	public final void default_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_constr_AST = null;
		Token  def = null;
		AST def_AST = null;
		AST d_AST = null;
		
		def = LT(1);
		def_AST = astFactory.create(def);
		match(DEFAULT);
		expr();
		d_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			default_constr_AST = (AST)currentAST.root;
			default_constr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DEFAULT_CONSTR,"default_constr")).add(d_AST));
				  	SrcAST.setSpan(default_constr_AST,def_AST,d_AST);
				
			currentAST.root = default_constr_AST;
			currentAST.child = default_constr_AST!=null &&default_constr_AST.getFirstChild()!=null ?
				default_constr_AST.getFirstChild() : default_constr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = default_constr_AST;
	}
	
/*********** Expressions ***************/
	public final void expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST expr_AST = null;
		AST p_AST = null;
		
		add_expr();
		p_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			expr_AST = (AST)currentAST.root;
			
				  	 expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(EXPR,"expr")).add(p_AST)); 
				  	 SrcAST.setSpan(expr_AST,p_AST);
				  	 expr_AST.setText(SrcAST.getText(p_AST));
				
			currentAST.root = expr_AST;
			currentAST.child = expr_AST!=null &&expr_AST.getFirstChild()!=null ?
				expr_AST.getFirstChild() : expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = expr_AST;
	}
	
	public final void cluster_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cluster_clause_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  nc = null;
		AST nc_AST = null;
		AST cl = astFactory.create(CLUSTER_DEF,"cluster_def");
		
		switch ( LA(1)) {
		case CLUSTERED:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			match(CLUSTERED);
			if ( inputState.guessing==0 ) {
				cluster_clause_AST = (AST)currentAST.root;
				cluster_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(cl).add(c_AST)); 
					    SrcAST.setSpan(cluster_clause_AST,c_AST);
					
				currentAST.root = cluster_clause_AST;
				currentAST.child = cluster_clause_AST!=null &&cluster_clause_AST.getFirstChild()!=null ?
					cluster_clause_AST.getFirstChild() : cluster_clause_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NONCLUSTERED:
		{
			nc = LT(1);
			nc_AST = astFactory.create(nc);
			match(NONCLUSTERED);
			if ( inputState.guessing==0 ) {
				cluster_clause_AST = (AST)currentAST.root;
				cluster_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(cl).add(nc_AST)); 
					    SrcAST.setSpan(cluster_clause_AST,nc_AST);
					
				currentAST.root = cluster_clause_AST;
				currentAST.child = cluster_clause_AST!=null &&cluster_clause_AST.getFirstChild()!=null ?
					cluster_clause_AST.getFirstChild() : cluster_clause_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = cluster_clause_AST;
	}
	
	public final void order_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST order_clause_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  o1 = null;
		AST o1_AST = null;
		
		switch ( LA(1)) {
		case ASC:
		{
			o = LT(1);
			o_AST = astFactory.create(o);
			match(ASC);
			if ( inputState.guessing==0 ) {
				order_clause_AST = (AST)currentAST.root;
				order_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ORDER_CLAUSE,"order_clause")).add(o_AST));
				currentAST.root = order_clause_AST;
				currentAST.child = order_clause_AST!=null &&order_clause_AST.getFirstChild()!=null ?
					order_clause_AST.getFirstChild() : order_clause_AST;
				currentAST.advanceChildToEnd();
			}
			if ( inputState.guessing==0 ) {
				order_clause_AST = (AST)currentAST.root;
				order_clause_AST.setText(SrcAST.getText(o_AST));
					  	SrcAST.setSpan(order_clause_AST,o_AST);
					
			}
			break;
		}
		case DESC:
		{
			o1 = LT(1);
			o1_AST = astFactory.create(o1);
			match(DESC);
			if ( inputState.guessing==0 ) {
				order_clause_AST = (AST)currentAST.root;
				order_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ORDER_CLAUSE,"order_clause")).add(o1_AST));
				currentAST.root = order_clause_AST;
				currentAST.child = order_clause_AST!=null &&order_clause_AST.getFirstChild()!=null ?
					order_clause_AST.getFirstChild() : order_clause_AST;
				currentAST.advanceChildToEnd();
			}
			if ( inputState.guessing==0 ) {
				order_clause_AST = (AST)currentAST.root;
				order_clause_AST.setText(SrcAST.getText(o1_AST)); 
					    SrcAST.setSpan(order_clause_AST,o1_AST);
					
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = order_clause_AST;
	}
	
	public final void lock_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lock_clause_AST = null;
		
		AST tmp244_AST = null;
		tmp244_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp244_AST);
		match(LOCK);
		{
		switch ( LA(1)) {
		case ALLROWS:
		{
			AST tmp245_AST = null;
			tmp245_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp245_AST);
			match(ALLROWS);
			break;
		}
		case DATAPAGES:
		{
			AST tmp246_AST = null;
			tmp246_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp246_AST);
			match(DATAPAGES);
			break;
		}
		case DATAROWS:
		{
			AST tmp247_AST = null;
			tmp247_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp247_AST);
			match(DATAROWS);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		lock_clause_AST = (AST)currentAST.root;
		returnAST = lock_clause_AST;
	}
	
	public final void with_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_clause_AST = null;
		Token  w = null;
		AST w_AST = null;
		
		w = LT(1);
		w_AST = astFactory.create(w);
		astFactory.addASTChild(currentAST, w_AST);
		match(WITH);
		with_option_list();
		astFactory.addASTChild(currentAST, returnAST);
		with_clause_AST = (AST)currentAST.root;
		returnAST = with_clause_AST;
	}
	
	public final void with_option_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_option_list_AST = null;
		
		with_option();
		astFactory.addASTChild(currentAST, returnAST);
		{
		boolean synPredMatched347 = false;
		if (((LA(1)==COMMA) && (_tokenSet_72.member(LA(2))))) {
			int _m347 = mark();
			synPredMatched347 = true;
			inputState.guessing++;
			try {
				{
				match(COMMA);
				with_option();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched347 = false;
			}
			rewind(_m347);
			inputState.guessing--;
		}
		if ( synPredMatched347 ) {
			AST tmp248_AST = null;
			tmp248_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp248_AST);
			match(COMMA);
			with_option_list();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_73.member(LA(1))) && (_tokenSet_74.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		with_option_list_AST = (AST)currentAST.root;
		returnAST = with_option_list_AST;
	}
	
	public final void with_option() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_option_AST = null;
		AST u_AST = null;
		
		switch ( LA(1)) {
		case FILLFACTOR:
		case CONSUMERS:
		case EXP_ROW_SIZE:
		case IDENTITY_GAP:
		case MAX_ROWS_PER_PAGE:
		case RESERVEPAGEGAP:
		{
			{
			switch ( LA(1)) {
			case FILLFACTOR:
			{
				AST tmp249_AST = null;
				tmp249_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp249_AST);
				match(FILLFACTOR);
				break;
			}
			case MAX_ROWS_PER_PAGE:
			{
				AST tmp250_AST = null;
				tmp250_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp250_AST);
				match(MAX_ROWS_PER_PAGE);
				break;
			}
			case RESERVEPAGEGAP:
			{
				AST tmp251_AST = null;
				tmp251_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp251_AST);
				match(RESERVEPAGEGAP);
				break;
			}
			case EXP_ROW_SIZE:
			{
				AST tmp252_AST = null;
				tmp252_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp252_AST);
				match(EXP_ROW_SIZE);
				break;
			}
			case IDENTITY_GAP:
			{
				AST tmp253_AST = null;
				tmp253_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp253_AST);
				match(IDENTITY_GAP);
				break;
			}
			case CONSUMERS:
			{
				AST tmp254_AST = null;
				tmp254_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp254_AST);
				match(CONSUMERS);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp255_AST = null;
			tmp255_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp255_AST);
			match(EQUAL);
			unsigned_num_int();
			u_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			with_option_AST = (AST)currentAST.root;
			break;
		}
		case EXISTING:
		{
			AST tmp256_AST = null;
			tmp256_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp256_AST);
			match(EXISTING);
			AST tmp257_AST = null;
			tmp257_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp257_AST);
			match(TABLE);
			qualified_table_name();
			astFactory.addASTChild(currentAST, returnAST);
			with_option_AST = (AST)currentAST.root;
			break;
		}
		case AT:
		case EXTERNAL:
		{
			{
			switch ( LA(1)) {
			case EXTERNAL:
			{
				AST tmp258_AST = null;
				tmp258_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp258_AST);
				match(EXTERNAL);
				{
				switch ( LA(1)) {
				case TABLE:
				{
					AST tmp259_AST = null;
					tmp259_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp259_AST);
					match(TABLE);
					break;
				}
				case FILE:
				{
					AST tmp260_AST = null;
					tmp260_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp260_AST);
					match(FILE);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case AT:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp261_AST = null;
			tmp261_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp261_AST);
			match(AT);
			quoted_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case COLUMN:
			{
				AST tmp262_AST = null;
				tmp262_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp262_AST);
				match(COLUMN);
				AST tmp263_AST = null;
				tmp263_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp263_AST);
				match(DELIMITER);
				quoted_string_lit();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case IDENTITY:
			case NULL:
			case NOT:
			case GO:
			case UNIQUE:
			case PRIMARY:
			case WITH:
			case ON:
			case REFERENCES:
			case CHECK:
			case CHECKPOINT:
			case IN:
			case FOREIGN:
			case ALTER:
			case DROP:
			case CONSTRAINT:
			case ADD:
			case DEFAULT:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case FROM:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case OFF:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case COLLATE:
			case DENY:
			case UPDATETEXT:
			case ROWGUIDCOL:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case EXTERNAL:
			case TEXTIMAGE_ON:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case COMMA:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			with_option_AST = (AST)currentAST.root;
			break;
		}
		case MAX:
		case HASH:
		case MAXIMUM:
		{
			{
			switch ( LA(1)) {
			case MAX:
			{
				AST tmp264_AST = null;
				tmp264_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp264_AST);
				match(MAX);
				break;
			}
			case MAXIMUM:
			{
				AST tmp265_AST = null;
				tmp265_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp265_AST);
				match(MAXIMUM);
				break;
			}
			case HASH:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp266_AST = null;
			tmp266_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp266_AST);
			match(HASH);
			AST tmp267_AST = null;
			tmp267_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp267_AST);
			match(SIZE);
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			with_option_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = with_option_AST;
	}
	
	public final void unsigned_num_int() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unsigned_num_int_AST = null;
		Token  p = null;
		AST p_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  m = null;
		AST m_AST = null;
		Token  n1 = null;
		AST n1_AST = null;
		Token  n2 = null;
		AST n2_AST = null;
		AST num = (AST)astFactory.make( (new ASTArray(1)).add(astFactory.create(UNSIGNED_NUM_INT,"unsigned_num_int")));
		
		switch ( LA(1)) {
		case PLUS:
		{
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PLUS);
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NUM_INT);
			if ( inputState.guessing==0 ) {
				num.setText ("+" + SrcAST.getText(n_AST));
			}
			if ( inputState.guessing==0 ) {
				unsigned_num_int_AST = (AST)currentAST.root;
				SrcAST.setSpan(num,p_AST,n_AST); unsigned_num_int_AST = num;
				currentAST.root = unsigned_num_int_AST;
				currentAST.child = unsigned_num_int_AST!=null &&unsigned_num_int_AST.getFirstChild()!=null ?
					unsigned_num_int_AST.getFirstChild() : unsigned_num_int_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case MINUS:
		{
			m = LT(1);
			m_AST = astFactory.create(m);
			match(MINUS);
			n1 = LT(1);
			n1_AST = astFactory.create(n1);
			match(NUM_INT);
			if ( inputState.guessing==0 ) {
				num.setText ("-" + SrcAST.getText(n1_AST));
			}
			if ( inputState.guessing==0 ) {
				unsigned_num_int_AST = (AST)currentAST.root;
				SrcAST.setSpan(num,p_AST,n1_AST); unsigned_num_int_AST = num;
				currentAST.root = unsigned_num_int_AST;
				currentAST.child = unsigned_num_int_AST!=null &&unsigned_num_int_AST.getFirstChild()!=null ?
					unsigned_num_int_AST.getFirstChild() : unsigned_num_int_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NUM_INT:
		{
			n2 = LT(1);
			n2_AST = astFactory.create(n2);
			match(NUM_INT);
			if ( inputState.guessing==0 ) {
				SrcAST.setSpan(num,n2_AST);
			}
			if ( inputState.guessing==0 ) {
				unsigned_num_int_AST = (AST)currentAST.root;
				num.setText (SrcAST.getText(n2_AST)); unsigned_num_int_AST = num;
				currentAST.root = unsigned_num_int_AST;
				currentAST.child = unsigned_num_int_AST!=null &&unsigned_num_int_AST.getFirstChild()!=null ?
					unsigned_num_int_AST.getFirstChild() : unsigned_num_int_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = unsigned_num_int_AST;
	}
	
	public final void quoted_string_lit() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST quoted_string_lit_AST = null;
		
		switch ( LA(1)) {
		case SINGLE_QUOTED_STRING_LIT:
		{
			AST tmp268_AST = null;
			tmp268_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp268_AST);
			match(SINGLE_QUOTED_STRING_LIT);
			quoted_string_lit_AST = (AST)currentAST.root;
			break;
		}
		case DOUBLE_QUOTED_STRING_LIT:
		{
			AST tmp269_AST = null;
			tmp269_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp269_AST);
			match(DOUBLE_QUOTED_STRING_LIT);
			quoted_string_lit_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = quoted_string_lit_AST;
	}
	
	public final void on_segment_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST on_segment_clause_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  p = null;
		AST p_AST = null;
		Token  o2 = null;
		AST o2_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  o1 = null;
		AST o1_AST = null;
		AST i_AST = null;
		Token  o3 = null;
		AST o3_AST = null;
		AST i2_AST = null;
		
		if ((LA(1)==ON) && (LA(2)==PRIMARY)) {
			o = LT(1);
			o_AST = astFactory.create(o);
			astFactory.addASTChild(currentAST, o_AST);
			match(ON);
			p = LT(1);
			p_AST = astFactory.create(p);
			astFactory.addASTChild(currentAST, p_AST);
			match(PRIMARY);
			if ( inputState.guessing==0 ) {
				on_segment_clause_AST = (AST)currentAST.root;
				SrcAST.setSpan (on_segment_clause_AST,o_AST,p_AST);
			}
			on_segment_clause_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==ON) && (LA(2)==DEFAULT)) {
			o2 = LT(1);
			o2_AST = astFactory.create(o2);
			astFactory.addASTChild(currentAST, o2_AST);
			match(ON);
			d = LT(1);
			d_AST = astFactory.create(d);
			astFactory.addASTChild(currentAST, d_AST);
			match(DEFAULT);
			if ( inputState.guessing==0 ) {
				on_segment_clause_AST = (AST)currentAST.root;
				SrcAST.setSpan (on_segment_clause_AST,o2_AST,d_AST);
			}
			on_segment_clause_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==ON) && (LA(2)==DOUBLE_QUOTED_STRING_LIT||LA(2)==SINGLE_QUOTED_STRING_LIT)) {
			o1 = LT(1);
			o1_AST = astFactory.create(o1);
			astFactory.addASTChild(currentAST, o1_AST);
			match(ON);
			quoted_string_lit();
			i_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				on_segment_clause_AST = (AST)currentAST.root;
				SrcAST.setSpan (on_segment_clause_AST,o1_AST,i_AST);
			}
			on_segment_clause_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==ON) && (_tokenSet_2.member(LA(2)))) {
			o3 = LT(1);
			o3_AST = astFactory.create(o3);
			astFactory.addASTChild(currentAST, o3_AST);
			match(ON);
			identifier();
			i2_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				on_segment_clause_AST = (AST)currentAST.root;
				SrcAST.setSpan (on_segment_clause_AST,o3_AST,i2_AST);
			}
			on_segment_clause_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = on_segment_clause_AST;
	}
	
	public final void textimage_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST textimage_clause_AST = null;
		AST i2_AST = null;
		AST i_AST = null;
		
		if ((LA(1)==TEXTIMAGE_ON) && (_tokenSet_2.member(LA(2)))) {
			AST tmp270_AST = null;
			tmp270_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp270_AST);
			match(TEXTIMAGE_ON);
			identifier();
			i2_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			textimage_clause_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==TEXTIMAGE_ON) && (LA(2)==DEFAULT)) {
			AST tmp271_AST = null;
			tmp271_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp271_AST);
			match(TEXTIMAGE_ON);
			AST tmp272_AST = null;
			tmp272_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp272_AST);
			match(DEFAULT);
			textimage_clause_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==TEXTIMAGE_ON) && (LA(2)==DOUBLE_QUOTED_STRING_LIT||LA(2)==SINGLE_QUOTED_STRING_LIT)) {
			AST tmp273_AST = null;
			tmp273_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp273_AST);
			match(TEXTIMAGE_ON);
			quoted_string_lit();
			i_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			textimage_clause_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = textimage_clause_AST;
	}
	
	public final void external_table_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST external_table_clause_AST = null;
		
		AST tmp274_AST = null;
		tmp274_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp274_AST);
		match(EXTERNAL);
		AST tmp275_AST = null;
		tmp275_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp275_AST);
		match(TABLE);
		AST tmp276_AST = null;
		tmp276_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp276_AST);
		match(AT);
		quoted_string_lit();
		astFactory.addASTChild(currentAST, returnAST);
		external_table_clause_AST = (AST)currentAST.root;
		returnAST = external_table_clause_AST;
	}
	
	public final void column_name_order_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_name_order_list_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST c1_AST = null;
		AST c2_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST clist = astFactory.create(COLUMN_NAME_ORDER_LIST,"column_name_order_list");
		
		lp = LT(1);
		lp_AST = astFactory.create(lp);
		match(LPAREN);
		column_name_order();
		c1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			clist.addChild(c1_AST);
		}
		{
		_loop359:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				column_name_order();
				c2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					clist.addChild(c2_AST);
				}
			}
			else {
				break _loop359;
			}
			
		} while (true);
		}
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			column_name_order_list_AST = (AST)currentAST.root;
			column_name_order_list_AST = clist; 
				    SrcAST.setSpan(column_name_order_list_AST,lp_AST,rp_AST);
				
			currentAST.root = column_name_order_list_AST;
			currentAST.child = column_name_order_list_AST!=null &&column_name_order_list_AST.getFirstChild()!=null ?
				column_name_order_list_AST.getFirstChild() : column_name_order_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = column_name_order_list_AST;
	}
	
	public final void column_name_order() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_name_order_AST = null;
		
		column_name();
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case ASC:
		{
			AST tmp278_AST = null;
			tmp278_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp278_AST);
			match(ASC);
			break;
		}
		case DESC:
		{
			AST tmp279_AST = null;
			tmp279_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp279_AST);
			match(DESC);
			break;
		}
		case COMMA:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		column_name_order_AST = (AST)currentAST.root;
		returnAST = column_name_order_AST;
	}
	
	public final void unique_or_pkey() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unique_or_pkey_AST = null;
		
		switch ( LA(1)) {
		case UNIQUE:
		{
			AST tmp280_AST = null;
			tmp280_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp280_AST);
			match(UNIQUE);
			unique_or_pkey_AST = (AST)currentAST.root;
			break;
		}
		case PRIMARY:
		{
			AST tmp281_AST = null;
			tmp281_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp281_AST);
			match(PRIMARY);
			AST tmp282_AST = null;
			tmp282_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp282_AST);
			match(KEY);
			unique_or_pkey_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = unique_or_pkey_AST;
	}
	
	public final void unique_or_primary_key_column_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unique_or_primary_key_column_list_AST = null;
		Token  u = null;
		AST u_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST c_AST = null;
		AST cl_AST = null;
		AST w_AST = null;
		AST s_AST = null;
		
		{
		switch ( LA(1)) {
		case UNIQUE:
		{
			u = LT(1);
			u_AST = astFactory.create(u);
			match(UNIQUE);
			break;
		}
		case PRIMARY:
		{
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PRIMARY);
			AST tmp283_AST = null;
			tmp283_AST = astFactory.create(LT(1));
			match(KEY);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case CLUSTERED:
		case NONCLUSTERED:
		{
			cluster_clause();
			c_AST = (AST)returnAST;
			break;
		}
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		column_name_order_list();
		cl_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_clause();
			w_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case ON:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ON:
		{
			on_segment_clause();
			s_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			unique_or_primary_key_column_list_AST = (AST)currentAST.root;
			unique_or_primary_key_column_list_AST = (u != null) ? (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(UNIQUE_CONSTR,"unique_constr")).add(c_AST).add(cl_AST))
				  					 : (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(PRIMARY_KEY_CONSTR,"primary_key_constr")).add(c_AST).add(cl_AST));
				  	AST[] left = {u_AST,p_AST};
				  	AST[] right = {cl_AST,w_AST,s_AST};
				  	SrcAST.setSpan(unique_or_primary_key_column_list_AST,left,right);
				
			currentAST.root = unique_or_primary_key_column_list_AST;
			currentAST.child = unique_or_primary_key_column_list_AST!=null &&unique_or_primary_key_column_list_AST.getFirstChild()!=null ?
				unique_or_primary_key_column_list_AST.getFirstChild() : unique_or_primary_key_column_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = unique_or_primary_key_column_list_AST;
	}
	
	public final void unique_or_primary_key_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unique_or_primary_key_constr_AST = null;
		Token  u = null;
		AST u_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST c_AST = null;
		AST o_AST = null;
		AST w_AST = null;
		AST s_AST = null;
		
		{
		switch ( LA(1)) {
		case UNIQUE:
		{
			u = LT(1);
			u_AST = astFactory.create(u);
			match(UNIQUE);
			break;
		}
		case PRIMARY:
		{
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PRIMARY);
			AST tmp284_AST = null;
			tmp284_AST = astFactory.create(LT(1));
			match(KEY);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case CLUSTERED:
		case NONCLUSTERED:
		{
			cluster_clause();
			c_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case IDENTITY:
		case NULL:
		case NOT:
		case GO:
		case UNIQUE:
		case PRIMARY:
		case WITH:
		case ON:
		case REFERENCES:
		case CHECK:
		case CHECKPOINT:
		case IN:
		case FOREIGN:
		case ALTER:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case ASC:
		case DESC:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case OFF:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case ROWGUIDCOL:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ASC:
		case DESC:
		{
			order_clause();
			o_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case IDENTITY:
		case NULL:
		case NOT:
		case GO:
		case UNIQUE:
		case PRIMARY:
		case WITH:
		case ON:
		case REFERENCES:
		case CHECK:
		case CHECKPOINT:
		case IN:
		case FOREIGN:
		case ALTER:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case OFF:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case ROWGUIDCOL:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_clause();
			w_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case IDENTITY:
		case NULL:
		case NOT:
		case GO:
		case UNIQUE:
		case PRIMARY:
		case ON:
		case REFERENCES:
		case CHECK:
		case CHECKPOINT:
		case IN:
		case FOREIGN:
		case ALTER:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case OFF:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case ROWGUIDCOL:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ON:
		{
			on_segment_clause();
			s_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case IDENTITY:
		case NULL:
		case NOT:
		case GO:
		case UNIQUE:
		case PRIMARY:
		case REFERENCES:
		case CHECK:
		case CHECKPOINT:
		case IN:
		case FOREIGN:
		case ALTER:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case OFF:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case ROWGUIDCOL:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			unique_or_primary_key_constr_AST = (AST)currentAST.root;
			unique_or_primary_key_constr_AST = (u != null) ? (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(UNIQUE_CONSTR,"unique_constr")).add(c_AST).add(o_AST))
				  					 : (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(PRIMARY_KEY_CONSTR,"primary_key_constr")).add(c_AST).add(o_AST));
				  	AST[] left = {u_AST,p_AST};
				  	AST[] right = {c_AST,o_AST,w_AST,s_AST};
				  	SrcAST.setSpan(unique_or_primary_key_constr_AST,left,right);
				
			currentAST.root = unique_or_primary_key_constr_AST;
			currentAST.child = unique_or_primary_key_constr_AST!=null &&unique_or_primary_key_constr_AST.getFirstChild()!=null ?
				unique_or_primary_key_constr_AST.getFirstChild() : unique_or_primary_key_constr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = unique_or_primary_key_constr_AST;
	}
	
	public final void foreign_key_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST foreign_key_clause_AST = null;
		AST f_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST c_AST = null;
		AST r_AST = null;
		
		{
		switch ( LA(1)) {
		case FOREIGN:
		{
			foreign_key();
			f_AST = (AST)returnAST;
			break;
		}
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		lp = LT(1);
		lp_AST = astFactory.create(lp);
		match(LPAREN);
		column_list();
		c_AST = (AST)returnAST;
		AST tmp285_AST = null;
		tmp285_AST = astFactory.create(LT(1));
		match(RPAREN);
		}
		references_clause();
		r_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			foreign_key_clause_AST = (AST)currentAST.root;
			foreign_key_clause_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(FOREIGN_KEY_CLAUSE,"foreign_key_clause")).add(c_AST).add(r_AST)); 
				    SrcAST.setSpan(foreign_key_clause_AST,(f_AST!=null)? f_AST : lp_AST, r_AST);
				
			currentAST.root = foreign_key_clause_AST;
			currentAST.child = foreign_key_clause_AST!=null &&foreign_key_clause_AST.getFirstChild()!=null ?
				foreign_key_clause_AST.getFirstChild() : foreign_key_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = foreign_key_clause_AST;
	}
	
	public final void foreign_key() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST foreign_key_AST = null;
		
		AST tmp286_AST = null;
		tmp286_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp286_AST);
		match(FOREIGN);
		AST tmp287_AST = null;
		tmp287_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp287_AST);
		match(KEY);
		foreign_key_AST = (AST)currentAST.root;
		returnAST = foreign_key_AST;
	}
	
	public final void column_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_list_AST = null;
		AST cls_AST = null;
		
		columns();
		cls_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			column_list_AST = (AST)currentAST.root;
			column_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COLUMN_LIST,"column_list")).add(cls_AST)); 
				    SrcAST.setSpan(column_list_AST,cls_AST);
				
			currentAST.root = column_list_AST;
			currentAST.child = column_list_AST!=null &&column_list_AST.getFirstChild()!=null ?
				column_list_AST.getFirstChild() : column_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = column_list_AST;
	}
	
	public final void references_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST references_clause_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST q_AST = null;
		AST cols_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST d_AST = null;
		AST u_AST = null;
		AST repl_AST = null;
		AST w_AST = null;
		AST rc = astFactory.create(REFERENCES_CLAUSE,"REFERENCES_CLAUSE");
		
		r = LT(1);
		r_AST = astFactory.create(r);
		match(REFERENCES);
		qualified_table_name();
		q_AST = (AST)returnAST;
		{
		boolean synPredMatched380 = false;
		if (((LA(1)==LPAREN) && (_tokenSet_2.member(LA(2))))) {
			int _m380 = mark();
			synPredMatched380 = true;
			inputState.guessing++;
			try {
				{
				match(LPAREN);
				column_name();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched380 = false;
			}
			rewind(_m380);
			inputState.guessing--;
		}
		if ( synPredMatched380 ) {
			AST tmp288_AST = null;
			tmp288_AST = astFactory.create(LT(1));
			match(LPAREN);
			column_list();
			cols_AST = (AST)returnAST;
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
		}
		else if ((_tokenSet_75.member(LA(1))) && (_tokenSet_76.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		boolean synPredMatched383 = false;
		if (((LA(1)==ON) && (LA(2)==DELETE))) {
			int _m383 = mark();
			synPredMatched383 = true;
			inputState.guessing++;
			try {
				{
				match(ON);
				match(DELETE);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched383 = false;
			}
			rewind(_m383);
			inputState.guessing--;
		}
		if ( synPredMatched383 ) {
			on_delete();
			d_AST = (AST)returnAST;
		}
		else if ((_tokenSet_75.member(LA(1))) && (_tokenSet_76.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case ON:
		{
			on_update();
			u_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case IDENTITY:
		case NULL:
		case NOT:
		case GO:
		case UNIQUE:
		case PRIMARY:
		case WITH:
		case REFERENCES:
		case CHECK:
		case CHECKPOINT:
		case IN:
		case FOREIGN:
		case ALTER:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case OFF:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case ROWGUIDCOL:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((LA(1)==NOT) && (LA(2)==FOR)) {
			notForReplication();
			repl_AST = (AST)returnAST;
		}
		else if ((_tokenSet_77.member(LA(1))) && (_tokenSet_78.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_clause();
			w_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case IDENTITY:
		case NULL:
		case NOT:
		case GO:
		case UNIQUE:
		case PRIMARY:
		case REFERENCES:
		case CHECK:
		case CHECKPOINT:
		case IN:
		case FOREIGN:
		case ALTER:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case OFF:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case ROWGUIDCOL:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			references_clause_AST = (AST)currentAST.root;
			references_clause_AST = (AST)astFactory.make( (new ASTArray(5)).add(rc).add(q_AST).add(cols_AST).add(d_AST).add(u_AST));
			currentAST.root = references_clause_AST;
			currentAST.child = references_clause_AST!=null &&references_clause_AST.getFirstChild()!=null ?
				references_clause_AST.getFirstChild() : references_clause_AST;
			currentAST.advanceChildToEnd();
		}
		if ( inputState.guessing==0 ) {
			references_clause_AST = (AST)currentAST.root;
			//##.setText ("REFERENCES" + 
				  	//            SrcAST.getText(#q) + (#cols != null ? SrcAST.getText(#cols) : "") +
				  	//            (#d != null ? SrcAST.getText(#d) : "") +
				  	//            (#u != null ? SrcAST.getText(#d) : ""));
				  	AST[] left = {r_AST};
				  	AST[] right = {q_AST,rp_AST,d_AST,u_AST,repl_AST,w_AST};
				  	SrcAST.setSpan(references_clause_AST,left,right);
				
		}
		returnAST = references_clause_AST;
	}
	
	public final void on_delete() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST on_delete_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  a = null;
		AST a_AST = null;
		
		o = LT(1);
		o_AST = astFactory.create(o);
		match(ON);
		AST tmp289_AST = null;
		tmp289_AST = astFactory.create(LT(1));
		match(DELETE);
		{
		switch ( LA(1)) {
		case CASCADE:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			match(CASCADE);
			break;
		}
		case NO:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NO);
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ACTION);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			on_delete_AST = (AST)currentAST.root;
			on_delete_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(ON_DELETE_ACTION,"on_delete_action")).add(c_AST).add(n_AST).add(a_AST)); 
				  	AST[] left = {o_AST};
				  	AST[] right = {c_AST,a_AST};
				    SrcAST.setSpan(on_delete_AST,left,right);
				
			currentAST.root = on_delete_AST;
			currentAST.child = on_delete_AST!=null &&on_delete_AST.getFirstChild()!=null ?
				on_delete_AST.getFirstChild() : on_delete_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = on_delete_AST;
	}
	
	public final void on_update() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST on_update_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  a = null;
		AST a_AST = null;
		
		o = LT(1);
		o_AST = astFactory.create(o);
		match(ON);
		AST tmp290_AST = null;
		tmp290_AST = astFactory.create(LT(1));
		match(UPDATE);
		{
		switch ( LA(1)) {
		case CASCADE:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			match(CASCADE);
			break;
		}
		case NO:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NO);
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ACTION);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			on_update_AST = (AST)currentAST.root;
			on_update_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(ON_UPDATE_ACTION,"on_update_action")).add(c_AST).add(n_AST).add(a_AST)); 
				  	AST[] left = {o_AST};
				  	AST[] right = {c_AST,a_AST};
				    SrcAST.setSpan(on_update_AST,left,right);
				
			currentAST.root = on_update_AST;
			currentAST.child = on_update_AST!=null &&on_update_AST.getFirstChild()!=null ?
				on_update_AST.getFirstChild() : on_update_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = on_update_AST;
	}
	
	public final void check_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST check_constr_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST ce_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CHECK);
		{
		switch ( LA(1)) {
		case NOT:
		{
			notForReplication();
			break;
		}
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp291_AST = null;
		tmp291_AST = astFactory.create(LT(1));
		match(LPAREN);
		cond_expr();
		ce_AST = (AST)returnAST;
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			check_constr_AST = (AST)currentAST.root;
			check_constr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CHECK_CONSTR,"check_constr")).add(ce_AST)); 
				    SrcAST.setSpan(check_constr_AST,c_AST,rp_AST);
				
			currentAST.root = check_constr_AST;
			currentAST.child = check_constr_AST!=null &&check_constr_AST.getFirstChild()!=null ?
				check_constr_AST.getFirstChild() : check_constr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = check_constr_AST;
	}
	
	public final void cond_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cond_expr_AST = null;
		AST o_AST = null;
		
		or_expr();
		o_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			cond_expr_AST = (AST)currentAST.root;
			cond_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COND_EXPR,"cond_expr")).add(o_AST)); 
				    SrcAST.setSpan(cond_expr_AST,o_AST);
				
			currentAST.root = cond_expr_AST;
			currentAST.child = cond_expr_AST!=null &&cond_expr_AST.getFirstChild()!=null ?
				cond_expr_AST.getFirstChild() : cond_expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = cond_expr_AST;
	}
	
	public final void columns() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST columns_AST = null;
		
		boolean synPredMatched395 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==COMMA))) {
			int _m395 = mark();
			synPredMatched395 = true;
			inputState.guessing++;
			try {
				{
				column_name();
				match(COMMA);
				column_name();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched395 = false;
			}
			rewind(_m395);
			inputState.guessing--;
		}
		if ( synPredMatched395 ) {
			column_name();
			astFactory.addASTChild(currentAST, returnAST);
			match(COMMA);
			columns();
			astFactory.addASTChild(currentAST, returnAST);
			columns_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_79.member(LA(2)))) {
			column_name();
			astFactory.addASTChild(currentAST, returnAST);
			columns_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = columns_AST;
	}
	
	public final void column_constr_kind() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_constr_kind_AST = null;
		
		switch ( LA(1)) {
		case NULL:
		case NOT:
		{
			null_not_null_constr();
			astFactory.addASTChild(currentAST, returnAST);
			column_constr_kind_AST = (AST)currentAST.root;
			break;
		}
		case UNIQUE:
		case PRIMARY:
		{
			unique_or_primary_key_constr();
			astFactory.addASTChild(currentAST, returnAST);
			column_constr_kind_AST = (AST)currentAST.root;
			break;
		}
		case REFERENCES:
		case FOREIGN:
		{
			{
			{
			switch ( LA(1)) {
			case FOREIGN:
			{
				foreign_key();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case REFERENCES:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			}
			references_clause();
			astFactory.addASTChild(currentAST, returnAST);
			column_constr_kind_AST = (AST)currentAST.root;
			break;
		}
		case CHECK:
		{
			check_constr();
			astFactory.addASTChild(currentAST, returnAST);
			column_constr_kind_AST = (AST)currentAST.root;
			break;
		}
		default:
			boolean synPredMatched402 = false;
			if (((LA(1)==IDENTITY||LA(1)==DEFAULT) && (_tokenSet_80.member(LA(2))))) {
				int _m402 = mark();
				synPredMatched402 = true;
				inputState.guessing++;
				try {
					{
					if ((LA(1)==IDENTITY)) {
						match(IDENTITY);
					}
					else if (((LA(1)==DEFAULT))&&((((TsqlGlobalOptions)globalOpts).getSourceDatabaseType() == TsqlGlobalOptions.SYBASE_ASA))) {
						match(DEFAULT);
						match(AUTOINCREMENT);
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
				}
				catch (RecognitionException pe) {
					synPredMatched402 = false;
				}
				rewind(_m402);
				inputState.guessing--;
			}
			if ( synPredMatched402 ) {
				identity_constr();
				astFactory.addASTChild(currentAST, returnAST);
				column_constr_kind_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==DEFAULT) && (_tokenSet_41.member(LA(2)))) {
				default_constr();
				astFactory.addASTChild(currentAST, returnAST);
				column_constr_kind_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = column_constr_kind_AST;
	}
	
	public final void column_constraint() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_constraint_AST = null;
		AST c_AST = null;
		AST constr_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST o_AST = null;
		AST i_AST = null;
		Token  in = null;
		AST in_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		Token  col = null;
		AST col_AST = null;
		AST id_AST = null;
		AST col_constr = astFactory.create(COLUMN_CONSTR,"column_constr"); 
			
		
		switch ( LA(1)) {
		case IDENTITY:
		case NULL:
		case NOT:
		case UNIQUE:
		case PRIMARY:
		case REFERENCES:
		case CHECK:
		case FOREIGN:
		case DROP:
		case CONSTRAINT:
		case ADD:
		case DEFAULT:
		case ROWGUIDCOL:
		{
			{
			switch ( LA(1)) {
			case CONSTRAINT:
			{
				constr_constraintName();
				c_AST = (AST)returnAST;
				break;
			}
			case IDENTITY:
			case NULL:
			case NOT:
			case UNIQUE:
			case PRIMARY:
			case REFERENCES:
			case CHECK:
			case FOREIGN:
			case DROP:
			case ADD:
			case DEFAULT:
			case ROWGUIDCOL:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case IDENTITY:
			case NULL:
			case NOT:
			case UNIQUE:
			case PRIMARY:
			case REFERENCES:
			case CHECK:
			case FOREIGN:
			case DEFAULT:
			{
				column_constr_kind();
				constr_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					column_constraint_AST = (AST)astFactory.make( (new ASTArray(3)).add(col_constr).add(c_AST).add(constr_AST));
					currentAST.root = column_constraint_AST;
					currentAST.child = column_constraint_AST!=null &&column_constraint_AST.getFirstChild()!=null ?
						column_constraint_AST.getFirstChild() : column_constraint_AST;
					currentAST.advanceChildToEnd();
				}
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					SrcAST.setSpan(column_constraint_AST,c_AST,constr_AST);
				}
				break;
			}
			case DROP:
			case ADD:
			case ROWGUIDCOL:
			{
				{
				switch ( LA(1)) {
				case ADD:
				{
					AST tmp293_AST = null;
					tmp293_AST = astFactory.create(LT(1));
					match(ADD);
					break;
				}
				case DROP:
				{
					AST tmp294_AST = null;
					tmp294_AST = astFactory.create(LT(1));
					match(DROP);
					break;
				}
				case ROWGUIDCOL:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				r = LT(1);
				r_AST = astFactory.create(r);
				match(ROWGUIDCOL);
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					column_constraint_AST = (AST)astFactory.make( (new ASTArray(2)).add(col_constr).add(astFactory.create(ROWGUIDCOL)));
					currentAST.root = column_constraint_AST;
					currentAST.child = column_constraint_AST!=null &&column_constraint_AST.getFirstChild()!=null ?
						column_constraint_AST.getFirstChild() : column_constraint_AST;
					currentAST.advanceChildToEnd();
				}
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					SrcAST.setSpan(column_constraint_AST,c_AST,r_AST);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case COLLATE:
		{
			col = LT(1);
			col_AST = astFactory.create(col);
			match(COLLATE);
			identifier();
			id_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				column_constraint_AST = (AST)currentAST.root;
				column_constraint_AST = (AST)astFactory.make( (new ASTArray(2)).add(col_constr).add(astFactory.create(COLLATE_DEF)));
				currentAST.root = column_constraint_AST;
				currentAST.child = column_constraint_AST!=null &&column_constraint_AST.getFirstChild()!=null ?
					column_constraint_AST.getFirstChild() : column_constraint_AST;
				currentAST.advanceChildToEnd();
			}
			if ( inputState.guessing==0 ) {
				column_constraint_AST = (AST)currentAST.root;
				SrcAST.setSpan (column_constraint_AST,col_AST,id_AST);
			}
			break;
		}
		default:
			if ((LA(1)==IN||LA(1)==OFF) && (_tokenSet_2.member(LA(2)))) {
				{
				switch ( LA(1)) {
				case OFF:
				{
					AST tmp295_AST = null;
					tmp295_AST = astFactory.create(LT(1));
					match(OFF);
					break;
				}
				case IN:
				{
					AST tmp296_AST = null;
					tmp296_AST = astFactory.create(LT(1));
					match(IN);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				identifier();
				i_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					column_constraint_AST = (AST)astFactory.make( (new ASTArray(2)).add(col_constr).add(astFactory.create(OFF_IN_ROW,"off_in_row")));
					currentAST.root = column_constraint_AST;
					currentAST.child = column_constraint_AST!=null &&column_constraint_AST.getFirstChild()!=null ?
						column_constraint_AST.getFirstChild() : column_constraint_AST;
					currentAST.advanceChildToEnd();
				}
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					SrcAST.setSpan (column_constraint_AST,o_AST,i_AST);
				}
			}
			else if ((LA(1)==IN) && (LA(2)==LPAREN)) {
				in = LT(1);
				in_AST = astFactory.create(in);
				match(IN);
				AST tmp297_AST = null;
				tmp297_AST = astFactory.create(LT(1));
				match(LPAREN);
				unsigned_num_int();
				rp = LT(1);
				rp_AST = astFactory.create(rp);
				match(RAPREN);
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					column_constraint_AST = (AST)astFactory.make( (new ASTArray(2)).add(col_constr).add(astFactory.create(OFF_IN_ROW,"off_in_row")));
					currentAST.root = column_constraint_AST;
					currentAST.child = column_constraint_AST!=null &&column_constraint_AST.getFirstChild()!=null ?
						column_constraint_AST.getFirstChild() : column_constraint_AST;
					currentAST.advanceChildToEnd();
				}
				if ( inputState.guessing==0 ) {
					column_constraint_AST = (AST)currentAST.root;
					SrcAST.setSpan (column_constraint_AST,in_AST,rp_AST);
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = column_constraint_AST;
	}
	
	public final void column_constraints() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_constraints_AST = null;
		
		column_constraint();
		astFactory.addASTChild(currentAST, returnAST);
		{
		boolean synPredMatched416 = false;
		if (((_tokenSet_81.member(LA(1))) && (_tokenSet_82.member(LA(2))))) {
			int _m416 = mark();
			synPredMatched416 = true;
			inputState.guessing++;
			try {
				{
				column_constraint();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched416 = false;
			}
			rewind(_m416);
			inputState.guessing--;
		}
		if ( synPredMatched416 ) {
			column_constraints();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_83.member(LA(1))) && (_tokenSet_84.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		column_constraints_AST = (AST)currentAST.root;
		returnAST = column_constraints_AST;
	}
	
	public final void column_constraint_def() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_constraint_def_AST = null;
		AST cs_AST = null;
		
		column_constraints();
		cs_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			column_constraint_def_AST = (AST)currentAST.root;
			column_constraint_def_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COLUMN_CONSTR_DEF,"column_constr_def")).add(cs_AST));
			currentAST.root = column_constraint_def_AST;
			currentAST.child = column_constraint_def_AST!=null &&column_constraint_def_AST.getFirstChild()!=null ?
				column_constraint_def_AST.getFirstChild() : column_constraint_def_AST;
			currentAST.advanceChildToEnd();
		}
		if ( inputState.guessing==0 ) {
			column_constraint_def_AST = (AST)currentAST.root;
			SrcAST.setSpan (column_constraint_def_AST,cs_AST);
		}
		returnAST = column_constraint_def_AST;
	}
	
	public final void column_or_table_constraint_def() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_or_table_constraint_def_AST = null;
		
		if ((_tokenSet_2.member(LA(1)))) {
			column_def();
			astFactory.addASTChild(currentAST, returnAST);
			column_or_table_constraint_def_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_85.member(LA(1)))) {
			table_constr();
			astFactory.addASTChild(currentAST, returnAST);
			column_or_table_constraint_def_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = column_or_table_constraint_def_AST;
	}
	
	public final void column_def() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_def_AST = null;
		AST c_AST = null;
		AST dt_AST = null;
		AST tab_constr_AST = null;
		AST col_constr_AST = null;
		AST c1_AST = null;
		AST exp_AST = null;
		
		if ((_tokenSet_2.member(LA(1))) && (_tokenSet_86.member(LA(2)))) {
			column_name();
			c_AST = (AST)returnAST;
			{
			if ((_tokenSet_49.member(LA(1)))) {
				datatype();
				dt_AST = (AST)returnAST;
			}
			else if ((_tokenSet_70.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			boolean synPredMatched426 = false;
			if (((_tokenSet_85.member(LA(1))) && (_tokenSet_87.member(LA(2))))) {
				int _m426 = mark();
				synPredMatched426 = true;
				inputState.guessing++;
				try {
					{
					table_constr();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched426 = false;
				}
				rewind(_m426);
				inputState.guessing--;
			}
			if ( synPredMatched426 ) {
				table_constr();
				tab_constr_AST = (AST)returnAST;
			}
			else if ((_tokenSet_70.member(LA(1))) && (_tokenSet_71.member(LA(2)))) {
				{
				boolean synPredMatched429 = false;
				if (((_tokenSet_81.member(LA(1))) && (_tokenSet_82.member(LA(2))))) {
					int _m429 = mark();
					synPredMatched429 = true;
					inputState.guessing++;
					try {
						{
						column_constraint();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched429 = false;
					}
					rewind(_m429);
					inputState.guessing--;
				}
				if ( synPredMatched429 ) {
					column_constraint_def();
					col_constr_AST = (AST)returnAST;
					{
					boolean synPredMatched432 = false;
					if (((_tokenSet_85.member(LA(1))) && (_tokenSet_87.member(LA(2))))) {
						int _m432 = mark();
						synPredMatched432 = true;
						inputState.guessing++;
						try {
							{
							table_constr();
							}
						}
						catch (RecognitionException pe) {
							synPredMatched432 = false;
						}
						rewind(_m432);
						inputState.guessing--;
					}
					if ( synPredMatched432 ) {
						table_constr();
					}
					else if ((_tokenSet_88.member(LA(1))) && (_tokenSet_89.member(LA(2)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
				}
				else if ((_tokenSet_88.member(LA(1))) && (_tokenSet_89.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				column_def_AST = (AST)currentAST.root;
				if (dt_AST!=null) {
						AST col_def = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(COLUMN_DEF,"column_def")).add(c_AST).add(dt_AST).add(col_constr_AST)); 
						if (tab_constr_AST != null) {
							column_def_AST = astFactory.create(PAIR,"pair");
							column_def_AST.addChild(col_def);
							column_def_AST.setNextSibling(tab_constr_AST);
						} 
						else column_def_AST = col_def;
					   } 
					  else 
					 	column_def_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TIMESTAMP_COLUMN,"timestamp_column")).add(c_AST).add(col_constr_AST)); 
					  AST[] left = {c_AST};
					  AST[] right = {dt_AST,col_constr_AST};
					  SrcAST.setSpan(column_def_AST,left,right);
					
				currentAST.root = column_def_AST;
				currentAST.child = column_def_AST!=null &&column_def_AST.getFirstChild()!=null ?
					column_def_AST.getFirstChild() : column_def_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (LA(2)==AS)) {
			column_name();
			c1_AST = (AST)returnAST;
			AST tmp298_AST = null;
			tmp298_AST = astFactory.create(LT(1));
			match(AS);
			expr();
			exp_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				column_def_AST = (AST)currentAST.root;
				column_def_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(COMPUTED_COLUMN,"computed_column")).add(c1_AST).add(exp_AST)); 
					    SrcAST.setSpan(column_def_AST,c1_AST,exp_AST);
					
				currentAST.root = column_def_AST;
				currentAST.child = column_def_AST!=null &&column_def_AST.getFirstChild()!=null ?
					column_def_AST.getFirstChild() : column_def_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = column_def_AST;
	}
	
	public final void table_constr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_constr_AST = null;
		AST c_AST = null;
		AST tc_AST = null;
		
		{
		switch ( LA(1)) {
		case CONSTRAINT:
		{
			constr_constraintName();
			c_AST = (AST)returnAST;
			break;
		}
		case UNIQUE:
		case PRIMARY:
		case CHECK:
		case FOREIGN:
		case DEFAULT:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		table_constraint_kind();
		tc_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			table_constr_AST = (AST)currentAST.root;
			table_constr_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TABLE_CONSTR,"table_constr")).add(c_AST).add(tc_AST));
			currentAST.root = table_constr_AST;
			currentAST.child = table_constr_AST!=null &&table_constr_AST.getFirstChild()!=null ?
				table_constr_AST.getFirstChild() : table_constr_AST;
			currentAST.advanceChildToEnd();
		}
		if ( inputState.guessing==0 ) {
			table_constr_AST = (AST)currentAST.root;
			SrcAST.setSpan (table_constr_AST,c_AST,tc_AST);
		}
		returnAST = table_constr_AST;
	}
	
	public final void column_def_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_def_list_AST = null;
		AST c_AST = null;
		AST c1_AST = null;
		AST cols = astFactory.create(COLUMN_DEF_LIST,"column_def_list");
		
		column_def();
		c_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			cols.addChild(c_AST);
		}
		{
		_loop421:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				column_def();
				c1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					cols.addChild(c1_AST);
				}
			}
			else {
				break _loop421;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			column_def_list_AST = (AST)currentAST.root;
			column_def_list_AST = cols; 
				   SrcAST.setSpan(column_def_list_AST,c_AST,c1_AST);
				
			currentAST.root = column_def_list_AST;
			currentAST.child = column_def_list_AST!=null &&column_def_list_AST.getFirstChild()!=null ?
				column_def_list_AST.getFirstChild() : column_def_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = column_def_list_AST;
	}
	
	public final void table_constr_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_constr_list_AST = null;
		AST tc_AST = null;
		AST tc1_AST = null;
		AST constrs = astFactory.create(TABLE_CONSTR_LIST,"table_constr_list");
		
		table_constr();
		tc_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			constrs.addChild(tc_AST);
		}
		{
		_loop435:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				table_constr();
				tc1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					constrs.addChild(tc1_AST);
				}
			}
			else {
				break _loop435;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			table_constr_list_AST = (AST)currentAST.root;
			table_constr_list_AST = constrs; 
				   SrcAST.setSpan(table_constr_list_AST,tc_AST,tc1_AST);
				
			currentAST.root = table_constr_list_AST;
			currentAST.child = table_constr_list_AST!=null &&table_constr_list_AST.getFirstChild()!=null ?
				table_constr_list_AST.getFirstChild() : table_constr_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = table_constr_list_AST;
	}
	
	public final void table_constraint_kind() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_constraint_kind_AST = null;
		
		switch ( LA(1)) {
		case UNIQUE:
		case PRIMARY:
		{
			unique_or_primary_key_column_list();
			astFactory.addASTChild(currentAST, returnAST);
			table_constraint_kind_AST = (AST)currentAST.root;
			break;
		}
		case FOREIGN:
		case LPAREN:
		{
			foreign_key_clause();
			astFactory.addASTChild(currentAST, returnAST);
			table_constraint_kind_AST = (AST)currentAST.root;
			break;
		}
		case DEFAULT:
		{
			default_def();
			astFactory.addASTChild(currentAST, returnAST);
			table_constraint_kind_AST = (AST)currentAST.root;
			break;
		}
		case CHECK:
		{
			check_constr();
			astFactory.addASTChild(currentAST, returnAST);
			table_constraint_kind_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = table_constraint_kind_AST;
	}
	
	public final void create_table() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_table_AST = null;
		Token  cr = null;
		AST cr_AST = null;
		Token  t = null;
		AST t_AST = null;
		
		cr = LT(1);
		cr_AST = astFactory.create(cr);
		astFactory.addASTChild(currentAST, cr_AST);
		match(CREATE);
		t = LT(1);
		t_AST = astFactory.create(t);
		astFactory.addASTChild(currentAST, t_AST);
		match(TABLE);
		if ( inputState.guessing==0 ) {
			create_table_AST = (AST)currentAST.root;
			SrcAST.setSpan (create_table_AST, cr_AST, t_AST); 
				  	create_table_AST.setText("create table");
				
		}
		create_table_AST = (AST)currentAST.root;
		returnAST = create_table_AST;
	}
	
	public final void col_or_table_constr_def_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST col_or_table_constr_def_list_AST = null;
		AST c_AST = null;
		AST c1_AST = null;
		
		AST tab_prop = astFactory.create(TABLE_PROPERTIES,"table_properties");
		AST col_def_list = astFactory.create(COLUMN_DEF_LIST,"column_def_list");
		AST tab_constr_list = astFactory.create(TABLE_CONSTR_LIST,"table_constr_list");
		
		
		{
		col_or_table_constr_def();
		c_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			if (c_AST!=null) {
				   	  	if (c_AST.getType() == TABLE_CONSTR) 
				   			tab_constr_list.addChild(c_AST);
				   		 else if(c_AST.getType() == PAIR) {
				   	 		AST col = c_AST.getFirstChild();
				   	 		col_def_list.addChild(col);
				   	 		AST constr = c_AST.getNextSibling();
				   	 		tab_constr_list.addChild(constr);
				   	 	}
				   		 else col_def_list.addChild(c_AST);
				      }
				
		}
		}
		{
		_loop450:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				col_or_table_constr_def();
				c1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					
						   	 if (c1_AST!=null) {
						   	 	if (c1_AST.getType() == TABLE_CONSTR) 
						   			tab_constr_list.addChild(c1_AST);
						   	 	else if(c1_AST.getType() == PAIR) {
						   	 		AST col1 = c1_AST.getFirstChild();
						   	 		col_def_list.addChild(col1);
						   	 		AST constr1 = c1_AST.getNextSibling();
						   	 		tab_constr_list.addChild(constr1);
						   	 	}	
						   	 	else col_def_list.addChild(c1_AST);
						   	 }
						
				}
			}
			else {
				break _loop450;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			col_or_table_constr_def_list_AST = (AST)currentAST.root;
			col_or_table_constr_def_list_AST = (AST)astFactory.make( (new ASTArray(3)).add(tab_prop).add(col_def_list).add(tab_constr_list)); 
				  SrcAST.setSpan(col_or_table_constr_def_list_AST,c_AST,c1_AST);
				
			currentAST.root = col_or_table_constr_def_list_AST;
			currentAST.child = col_or_table_constr_def_list_AST!=null &&col_or_table_constr_def_list_AST.getFirstChild()!=null ?
				col_or_table_constr_def_list_AST.getFirstChild() : col_or_table_constr_def_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = col_or_table_constr_def_list_AST;
	}
	
	public final void col_or_table_constr_def() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST col_or_table_constr_def_AST = null;
		AST t_AST = null;
		AST c_AST = null;
		
		switch ( LA(1)) {
		case UNIQUE:
		case PRIMARY:
		case CHECK:
		case FOREIGN:
		case CONSTRAINT:
		case DEFAULT:
		case LPAREN:
		{
			table_constr();
			t_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				col_or_table_constr_def_AST = (AST)currentAST.root;
				col_or_table_constr_def_AST = t_AST;
				currentAST.root = col_or_table_constr_def_AST;
				currentAST.child = col_or_table_constr_def_AST!=null &&col_or_table_constr_def_AST.getFirstChild()!=null ?
					col_or_table_constr_def_AST.getFirstChild() : col_or_table_constr_def_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case COMMA:
		case RPAREN:
		{
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				column_def();
				c_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					col_or_table_constr_def_AST = (AST)currentAST.root;
					col_or_table_constr_def_AST = c_AST;
					currentAST.root = col_or_table_constr_def_AST;
					currentAST.child = col_or_table_constr_def_AST!=null &&col_or_table_constr_def_AST.getFirstChild()!=null ?
						col_or_table_constr_def_AST.getFirstChild() : col_or_table_constr_def_AST;
					currentAST.advanceChildToEnd();
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = col_or_table_constr_def_AST;
	}
	
	public final void alteration() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alteration_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST cls_AST = null;
		Token  al = null;
		AST al_AST = null;
		AST col_AST = null;
		AST c_AST = null;
		Token  ad = null;
		AST ad_AST = null;
		AST tcs_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST clist_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST cn_AST = null;
		AST de_AST = null;
		Token  ch = null;
		AST ch_AST = null;
		Token  all = null;
		AST all_AST = null;
		AST constrs_AST = null;
		Token  no = null;
		AST no_AST = null;
		Token  all2 = null;
		AST all2_AST = null;
		AST n_AST = null;
		Token  e = null;
		AST e_AST = null;
		Token  di = null;
		AST di_AST = null;
		Token  all3 = null;
		AST all3_AST = null;
		AST qt_AST = null;
		Token  p = null;
		AST p_AST = null;
		Token  up = null;
		AST up_AST = null;
		AST num_AST = null;
		Token  m = null;
		AST m_AST = null;
		AST cols_AST = null;
		AST l_AST = null;
		Token  w = null;
		AST w_AST = null;
		AST o_AST = null;
		
		switch ( LA(1)) {
		case ALTER:
		{
			al = LT(1);
			al_AST = astFactory.create(al);
			match(ALTER);
			AST tmp302_AST = null;
			tmp302_AST = astFactory.create(LT(1));
			match(COLUMN);
			column_def();
			col_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ALTER_COLUMN,"alter_column")).add(col_AST)); SrcAST.setSpan(alteration_AST,al_AST,col_AST);
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case DROP:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			match(DROP);
			col_and_constr_list();
			clist_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DROP_ALTERATION,"drop_alteration")).add(clist_AST)); SrcAST.setSpan(alteration_AST,d_AST,clist_AST);
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case REPLACE:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(REPLACE);
			column_name();
			cn_AST = (AST)returnAST;
			AST tmp303_AST = null;
			tmp303_AST = astFactory.create(LT(1));
			match(DEFAULT);
			default_exp();
			de_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(REPLACE_COLUMN,"replace_column")).add(cn_AST).add(de_AST)); SrcAST.setSpan(alteration_AST,r_AST,de_AST);
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case CHECK:
		{
			ch = LT(1);
			ch_AST = astFactory.create(ch);
			match(CHECK);
			AST tmp304_AST = null;
			tmp304_AST = astFactory.create(LT(1));
			match(CONSTRAINT);
			{
			if ((LA(1)==ALL)) {
				all = LT(1);
				all_AST = astFactory.create(all);
				match(ALL);
			}
			else if ((_tokenSet_2.member(LA(1)))) {
				{
				int _cnt466=0;
				_loop466:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						name();
						constrs_AST = (AST)returnAST;
					}
					else {
						if ( _cnt466>=1 ) { break _loop466; } else {throw new NoViableAltException(LT(1), getFilename());}
					}
					
					_cnt466++;
				} while (true);
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = astFactory.create(IGNORED_INPUT,"ignored_input");
					    AST[] left = {ch_AST};
					    AST[] right = {all_AST,constrs_AST};
					    SrcAST.setSpan(alteration_AST,left,right);
					
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NOCHECK:
		{
			no = LT(1);
			no_AST = astFactory.create(no);
			match(NOCHECK);
			AST tmp305_AST = null;
			tmp305_AST = astFactory.create(LT(1));
			match(CONSTRAINT);
			{
			if ((LA(1)==ALL)) {
				all2 = LT(1);
				all2_AST = astFactory.create(all2);
				match(ALL);
			}
			else if ((_tokenSet_2.member(LA(1)))) {
				{
				int _cnt469=0;
				_loop469:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						name();
						n_AST = (AST)returnAST;
					}
					else {
						if ( _cnt469>=1 ) { break _loop469; } else {throw new NoViableAltException(LT(1), getFilename());}
					}
					
					_cnt469++;
				} while (true);
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = astFactory.create(IGNORED_INPUT,"ignored_input"); 
					  	AST[] left = {no_AST};
					  	AST[] right = {all2_AST,n_AST};
					  	SrcAST.setSpan(alteration_AST,left,right);
					
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case DISABLE:
		case ENABLE:
		{
			{
			switch ( LA(1)) {
			case ENABLE:
			{
				e = LT(1);
				e_AST = astFactory.create(e);
				match(ENABLE);
				break;
			}
			case DISABLE:
			{
				di = LT(1);
				di_AST = astFactory.create(di);
				match(DISABLE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp306_AST = null;
			tmp306_AST = astFactory.create(LT(1));
			match(TRIGGER);
			{
			if ((LA(1)==ALL)) {
				all3 = LT(1);
				all3_AST = astFactory.create(all3);
				match(ALL);
			}
			else if ((_tokenSet_2.member(LA(1)))) {
				{
				int _cnt473=0;
				_loop473:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						qual_trigger_name();
						qt_AST = (AST)returnAST;
					}
					else {
						if ( _cnt473>=1 ) { break _loop473; } else {throw new NoViableAltException(LT(1), getFilename());}
					}
					
					_cnt473++;
				} while (true);
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = astFactory.create(IGNORED_INPUT,"ignored_input"); 
					    AST[] left = {e_AST,di_AST};
					  	AST[] right = {all3_AST,qt_AST};
					  	SrcAST.setSpan(alteration_AST,left,right);
					
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case PARTITION:
		case UNPARTITION:
		{
			{
			switch ( LA(1)) {
			case PARTITION:
			{
				p = LT(1);
				p_AST = astFactory.create(p);
				match(PARTITION);
				break;
			}
			case UNPARTITION:
			{
				up = LT(1);
				up_AST = astFactory.create(up);
				match(UNPARTITION);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case NUM_INT:
			case PLUS:
			case MINUS:
			{
				unsigned_num_int();
				num_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = astFactory.create(IGNORED_INPUT,"ignored_input"); 
					    AST[] left = {p_AST,up_AST};
					  	AST[] right = {num_AST};
					  	SrcAST.setSpan(alteration_AST,left,right);
					
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case MODIFY:
		{
			m = LT(1);
			m_AST = astFactory.create(m);
			match(MODIFY);
			column_def_list();
			cols_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ALTER_COLUMN,"alter_column")).add(cols_AST)); SrcAST.setSpan(alteration_AST,m_AST,cols_AST);
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case LOCK:
		{
			lock_clause();
			l_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alteration_AST = (AST)currentAST.root;
				alteration_AST = astFactory.create(IGNORED_INPUT,"ignored_input"); SrcAST.setSpan(alteration_AST,l_AST);
				currentAST.root = alteration_AST;
				currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
					alteration_AST.getFirstChild() : alteration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
			boolean synPredMatched461 = false;
			if (((LA(1)==ADD) && (_tokenSet_2.member(LA(2))))) {
				int _m461 = mark();
				synPredMatched461 = true;
				inputState.guessing++;
				try {
					{
					match(ADD);
					column_name();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched461 = false;
				}
				rewind(_m461);
				inputState.guessing--;
			}
			if ( synPredMatched461 ) {
				a = LT(1);
				a_AST = astFactory.create(a);
				match(ADD);
				{
				column_def_list();
				cls_AST = (AST)returnAST;
				}
				if ( inputState.guessing==0 ) {
					alteration_AST = (AST)currentAST.root;
					alteration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ADD_COLUMN,"add_column")).add(cls_AST)); SrcAST.setSpan(alteration_AST,a_AST,cls_AST);
					currentAST.root = alteration_AST;
					currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
						alteration_AST.getFirstChild() : alteration_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((LA(1)==WITH||LA(1)==ADD) && (_tokenSet_90.member(LA(2)))) {
				{
				switch ( LA(1)) {
				case WITH:
				{
					check_option();
					c_AST = (AST)returnAST;
					break;
				}
				case ADD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				ad = LT(1);
				ad_AST = astFactory.create(ad);
				match(ADD);
				table_constr_list();
				tcs_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					alteration_AST = (AST)currentAST.root;
					alteration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ADD_CONSTR,"add_constr")).add(tcs_AST)); SrcAST.setSpan(alteration_AST,(c_AST!=null)? c_AST : ad_AST, tcs_AST);
					currentAST.root = alteration_AST;
					currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
						alteration_AST.getFirstChild() : alteration_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((LA(1)==WITH) && (_tokenSet_72.member(LA(2)))) {
				w = LT(1);
				w_AST = astFactory.create(w);
				match(WITH);
				with_option();
				o_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					alteration_AST = (AST)currentAST.root;
					alteration_AST = astFactory.create(IGNORED_INPUT,"ignored_input"); SrcAST.setSpan(alteration_AST,w_AST,o_AST);
					currentAST.root = alteration_AST;
					currentAST.child = alteration_AST!=null &&alteration_AST.getFirstChild()!=null ?
						alteration_AST.getFirstChild() : alteration_AST;
					currentAST.advanceChildToEnd();
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = alteration_AST;
	}
	
	public final void check_option() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST check_option_AST = null;
		
		AST tmp307_AST = null;
		tmp307_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp307_AST);
		match(WITH);
		{
		switch ( LA(1)) {
		case CHECK:
		{
			AST tmp308_AST = null;
			tmp308_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp308_AST);
			match(CHECK);
			break;
		}
		case NOCHECK:
		{
			AST tmp309_AST = null;
			tmp309_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp309_AST);
			match(NOCHECK);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		check_option_AST = (AST)currentAST.root;
		returnAST = check_option_AST;
	}
	
	public final void col_and_constr_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST col_and_constr_list_AST = null;
		AST c1_AST = null;
		AST c2_AST = null;
		AST cols = astFactory.create(COLUMN_LIST,"column_list");
			AST constrs = astFactory.create(CONSTR_NAME_LIST,"constr_name_list");
			AST rest = astFactory.create(NAME_LIST,"name_list");
		
		
		col_or_constr(cols,constrs,rest);
		c1_AST = (AST)returnAST;
		{
		_loop480:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				col_or_constr(cols,constrs,rest);
				c2_AST = (AST)returnAST;
			}
			else {
				break _loop480;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			col_and_constr_list_AST = (AST)currentAST.root;
			col_and_constr_list_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(COL_AND_CONSTR_NAME_LIST,"col_and_constr_name_list")).add(cols).add(constrs).add(rest)); 
			SrcAST.setSpan(col_and_constr_list_AST,c1_AST,c2_AST);
			
			currentAST.root = col_and_constr_list_AST;
			currentAST.child = col_and_constr_list_AST!=null &&col_and_constr_list_AST.getFirstChild()!=null ?
				col_and_constr_list_AST.getFirstChild() : col_and_constr_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = col_and_constr_list_AST;
	}
	
	public final void default_exp() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_exp_AST = null;
		
		expr();
		astFactory.addASTChild(currentAST, returnAST);
		default_exp_AST = (AST)currentAST.root;
		returnAST = default_exp_AST;
	}
	
	public final void qual_trigger_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_trigger_name_AST = null;
		AST o_AST = null;
		AST n_AST = null;
		AST n1_AST = null;
		
		boolean synPredMatched1017 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m1017 = mark();
			synPredMatched1017 = true;
			inputState.guessing++;
			try {
				{
				owner_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1017 = false;
			}
			rewind(_m1017);
			inputState.guessing--;
		}
		if ( synPredMatched1017 ) {
			owner_name();
			o_AST = (AST)returnAST;
			AST tmp311_AST = null;
			tmp311_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			n_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_trigger_name_AST = (AST)currentAST.root;
				qual_trigger_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(QUAL_TRIGGER_NAME,"qual_trigger_name")).add(o_AST).add(n_AST));
				currentAST.root = qual_trigger_name_AST;
				currentAST.child = qual_trigger_name_AST!=null &&qual_trigger_name_AST.getFirstChild()!=null ?
					qual_trigger_name_AST.getFirstChild() : qual_trigger_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_91.member(LA(2)))) {
			name();
			n1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_trigger_name_AST = (AST)currentAST.root;
				qual_trigger_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(QUAL_TRIGGER_NAME,"qual_trigger_name")).add(n1_AST));
				currentAST.root = qual_trigger_name_AST;
				currentAST.child = qual_trigger_name_AST!=null &&qual_trigger_name_AST.getFirstChild()!=null ?
					qual_trigger_name_AST.getFirstChild() : qual_trigger_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = qual_trigger_name_AST;
	}
	
	public final void col_or_constr(
		AST cols, AST constrs, AST rest
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST col_or_constr_AST = null;
		AST n1_AST = null;
		AST n2_AST = null;
		AST n3_AST = null;
		
		boolean synPredMatched483 = false;
		if (((LA(1)==COLUMN) && (_tokenSet_2.member(LA(2))))) {
			int _m483 = mark();
			synPredMatched483 = true;
			inputState.guessing++;
			try {
				{
				match(COLUMN);
				name();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched483 = false;
			}
			rewind(_m483);
			inputState.guessing--;
		}
		if ( synPredMatched483 ) {
			AST tmp312_AST = null;
			tmp312_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp312_AST);
			match(COLUMN);
			name();
			n1_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				cols.addChild (n1_AST);
			}
			col_or_constr_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==CONSTRAINT)) {
			AST tmp313_AST = null;
			tmp313_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp313_AST);
			match(CONSTRAINT);
			name();
			n2_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				constrs.addChild (n2_AST);
			}
			col_or_constr_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_92.member(LA(2)))) {
			name();
			n3_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				rest.addChild (n3_AST);
			}
			col_or_constr_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = col_or_constr_AST;
	}
	
	public final void ownerDOTname_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ownerDOTname_list_AST = null;
		AST o_AST = null;
		AST o1_AST = null;
		AST owlist = astFactory.create(OWNER_DOT_NAME_LIST,"owner_dot_name_list");
		
		ownerDOTname();
		o_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			owlist.addChild(o_AST);
		}
		{
		_loop1039:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				ownerDOTname();
				o1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					owlist.addChild(o1_AST);
				}
			}
			else {
				break _loop1039;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			ownerDOTname_list_AST = (AST)currentAST.root;
			ownerDOTname_list_AST = owlist;
				    SrcAST.setSpan(ownerDOTname_list_AST,o_AST,o1_AST); 
				
			currentAST.root = ownerDOTname_list_AST;
			currentAST.child = ownerDOTname_list_AST!=null &&ownerDOTname_list_AST.getFirstChild()!=null ?
				ownerDOTname_list_AST.getFirstChild() : ownerDOTname_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = ownerDOTname_list_AST;
	}
	
	public final void with_clause_index() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_clause_index_AST = null;
		
		AST tmp315_AST = null;
		tmp315_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp315_AST);
		match(WITH);
		with_option_index();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop499:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				with_option_index();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop499;
			}
			
		} while (true);
		}
		with_clause_index_AST = (AST)currentAST.root;
		returnAST = with_clause_index_AST;
	}
	
	public final void create_index_options() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_index_options_AST = null;
		AST w_AST = null;
		AST o_AST = null;
		
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_clause_index();
			w_AST = (AST)returnAST;
			break;
		}
		case EOF:
		case ON:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ON:
		{
			on_segment_clause();
			o_AST = (AST)returnAST;
			break;
		}
		case EOF:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_index_options_AST = (AST)currentAST.root;
			create_index_options_AST = astFactory.create(IGNORED_INPUT,"IGNORED_INPUT"); 
				    AST[] left = {w_AST,o_AST}; AST[] right = {w_AST,o_AST}; 
				    SrcAST.setSpan(create_index_options_AST,left,right);
				
			currentAST.root = create_index_options_AST;
			currentAST.child = create_index_options_AST!=null &&create_index_options_AST.getFirstChild()!=null ?
				create_index_options_AST.getFirstChild() : create_index_options_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_index_options_AST;
	}
	
	public final void with_option_index() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_option_index_AST = null;
		
		switch ( LA(1)) {
		case FILLFACTOR:
		case MAX:
		case AT:
		case CONSUMERS:
		case EXP_ROW_SIZE:
		case EXTERNAL:
		case HASH:
		case IDENTITY_GAP:
		case MAX_ROWS_PER_PAGE:
		case MAXIMUM:
		case RESERVEPAGEGAP:
		case EXISTING:
		{
			with_option();
			astFactory.addASTChild(currentAST, returnAST);
			with_option_index_AST = (AST)currentAST.root;
			break;
		}
		case ALLOW_DUP_ROW:
		case IGNORE_DUP_KEY:
		case IGNORE_DUP_ROW:
		case SORTED_DATA:
		{
			{
			switch ( LA(1)) {
			case IGNORE_DUP_KEY:
			{
				AST tmp317_AST = null;
				tmp317_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp317_AST);
				match(IGNORE_DUP_KEY);
				break;
			}
			case SORTED_DATA:
			{
				AST tmp318_AST = null;
				tmp318_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp318_AST);
				match(SORTED_DATA);
				break;
			}
			case IGNORE_DUP_ROW:
			{
				AST tmp319_AST = null;
				tmp319_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp319_AST);
				match(IGNORE_DUP_ROW);
				break;
			}
			case ALLOW_DUP_ROW:
			{
				AST tmp320_AST = null;
				tmp320_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp320_AST);
				match(ALLOW_DUP_ROW);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			with_option_index_AST = (AST)currentAST.root;
			break;
		}
		case STATISTICS:
		{
			AST tmp321_AST = null;
			tmp321_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp321_AST);
			match(STATISTICS);
			AST tmp322_AST = null;
			tmp322_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp322_AST);
			match(USING);
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp323_AST = null;
			tmp323_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp323_AST);
			match(VALUES);
			with_option_index_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = with_option_index_AST;
	}
	
	public final void tableDOTname_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST tableDOTname_list_AST = null;
		AST t1_AST = null;
		AST t2_AST = null;
		
		tableDOTname();
		t1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1440:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				tableDOTname();
				t2_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1440;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			tableDOTname_list_AST = (AST)currentAST.root;
			tableDOTname_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TABLE_DOT_NAME_LIST,"table_dot_name_list")).add(tableDOTname_list_AST)); 
				  	SrcAST.setSpan (tableDOTname_list_AST,t1_AST,t2_AST);
				
			currentAST.root = tableDOTname_list_AST;
			currentAST.child = tableDOTname_list_AST!=null &&tableDOTname_list_AST.getFirstChild()!=null ?
				tableDOTname_list_AST.getFirstChild() : tableDOTname_list_AST;
			currentAST.advanceChildToEnd();
		}
		tableDOTname_list_AST = (AST)currentAST.root;
		returnAST = tableDOTname_list_AST;
	}
	
	public final void ownerDOTname() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ownerDOTname_AST = null;
		AST o_AST = null;
		AST n_AST = null;
		AST n1_AST = null;
		AST left = null; AST right = null;
		
		if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
			owner_name();
			o_AST = (AST)returnAST;
			AST tmp325_AST = null;
			tmp325_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			n_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				left = o_AST; right = n_AST;
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_93.member(LA(2)))) {
			name();
			n1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				left = n1_AST; right = n1_AST;
			}
			if ( inputState.guessing==0 ) {
				ownerDOTname_AST = (AST)currentAST.root;
				ownerDOTname_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(OWNER_DOT_NAME,"owner_dot_name")).add(o_AST).add(n_AST).add(n1_AST));
				SrcAST.setSpan(ownerDOTname_AST,left,right);
				
				currentAST.root = ownerDOTname_AST;
				currentAST.child = ownerDOTname_AST!=null &&ownerDOTname_AST.getFirstChild()!=null ?
					ownerDOTname_AST.getFirstChild() : ownerDOTname_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = ownerDOTname_AST;
	}
	
	public final void default_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_name_AST = null;
		AST id_AST = null;
		
		identifier();
		id_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			default_name_AST = (AST)currentAST.root;
			default_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(DEFAULT_NAME,"default_name")).add(id_AST)); 
				    SrcAST.setSpan(default_name_AST,id_AST);
				
			currentAST.root = default_name_AST;
			currentAST.child = default_name_AST!=null &&default_name_AST.getFirstChild()!=null ?
				default_name_AST.getFirstChild() : default_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = default_name_AST;
	}
	
	public final void qualified_default_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_default_name_AST = null;
		AST o_AST = null;
		AST dn_AST = null;
		AST dn1_AST = null;
		
		boolean synPredMatched507 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m507 = mark();
			synPredMatched507 = true;
			inputState.guessing++;
			try {
				{
				owner_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched507 = false;
			}
			rewind(_m507);
			inputState.guessing--;
		}
		if ( synPredMatched507 ) {
			owner_name();
			o_AST = (AST)returnAST;
			AST tmp326_AST = null;
			tmp326_AST = astFactory.create(LT(1));
			match(DOT);
			default_name();
			dn_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qualified_default_name_AST = (AST)currentAST.root;
				qualified_default_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(QUAL_DEFAULT_NAME,"qual_default_name")).add(o_AST).add(dn_AST)); 
					    SrcAST.setSpan(qualified_default_name_AST,o_AST,dn_AST);
					
				currentAST.root = qualified_default_name_AST;
				currentAST.child = qualified_default_name_AST!=null &&qualified_default_name_AST.getFirstChild()!=null ?
					qualified_default_name_AST.getFirstChild() : qualified_default_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (LA(2)==EOF||LA(2)==COMMA)) {
			default_name();
			dn1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qualified_default_name_AST = (AST)currentAST.root;
				qualified_default_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(QUAL_DEFAULT_NAME,"qual_default_name")).add(dn_AST)); 
					    SrcAST.setSpan(qualified_default_name_AST,dn1_AST);
					
				currentAST.root = qualified_default_name_AST;
				currentAST.child = qualified_default_name_AST!=null &&qualified_default_name_AST.getFirstChild()!=null ?
					qualified_default_name_AST.getFirstChild() : qualified_default_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = qualified_default_name_AST;
	}
	
	public final void default_name_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_name_list_AST = null;
		AST d1_AST = null;
		AST d_AST = null;
		AST dlist = astFactory.create(DEFAULT_NAME_LIST,"default_name_list");
		
		qualified_default_name();
		d1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			dlist.addChild(d1_AST);
		}
		{
		_loop511:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp327_AST = null;
				tmp327_AST = astFactory.create(LT(1));
				match(COMMA);
				qualified_default_name();
				d_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					dlist.addChild(d_AST);
				}
			}
			else {
				break _loop511;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			default_name_list_AST = (AST)currentAST.root;
			default_name_list_AST = dlist; SrcAST.setSpan(default_name_list_AST,d1_AST,d_AST);
			currentAST.root = default_name_list_AST;
			currentAST.child = default_name_list_AST!=null &&default_name_list_AST.getFirstChild()!=null ?
				default_name_list_AST.getFirstChild() : default_name_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = default_name_list_AST;
	}
	
	public final void db_opts() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST db_opts_AST = null;
		
		{
		switch ( LA(1)) {
		case ON:
		{
			database_on_clause();
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case LOG:
		case PROXY_UPDATE:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case LOG:
		{
			log_clause();
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PROXY_UPDATE:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case COLLATE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PROXY_UPDATE:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case COLLATE:
		{
			collate_clause();
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PROXY_UPDATE:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		if ((LA(1)==FOR) && (LA(2)==LOAD)) {
			AST tmp328_AST = null;
			tmp328_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp328_AST);
			match(FOR);
			AST tmp329_AST = null;
			tmp329_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp329_AST);
			match(LOAD);
		}
		else if ((_tokenSet_94.member(LA(1))) && (_tokenSet_95.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case FOR:
		{
			AST tmp330_AST = null;
			tmp330_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp330_AST);
			match(FOR);
			AST tmp331_AST = null;
			tmp331_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp331_AST);
			match(ATTACH);
			break;
		}
		case PROXY_UPDATE:
		{
			AST tmp332_AST = null;
			tmp332_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp332_AST);
			match(PROXY_UPDATE);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		db_opts_AST = (AST)currentAST.root;
		returnAST = db_opts_AST;
	}
	
	public final void database_on_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST database_on_clause_AST = null;
		
		AST tmp333_AST = null;
		tmp333_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp333_AST);
		match(ON);
		device_spec();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop522:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				device_spec();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop522;
			}
			
		} while (true);
		}
		database_on_clause_AST = (AST)currentAST.root;
		returnAST = database_on_clause_AST;
	}
	
	public final void log_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST log_clause_AST = null;
		
		AST tmp335_AST = null;
		tmp335_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp335_AST);
		match(LOG);
		AST tmp336_AST = null;
		tmp336_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp336_AST);
		match(ON);
		device_spec();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop536:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				device_spec();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop536;
			}
			
		} while (true);
		}
		log_clause_AST = (AST)currentAST.root;
		returnAST = log_clause_AST;
	}
	
	public final void with_identifier() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_identifier_AST = null;
		
		AST tmp338_AST = null;
		tmp338_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp338_AST);
		match(WITH);
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		{
		if ((LA(1)==EQUAL)) {
			AST tmp339_AST = null;
			tmp339_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp339_AST);
			match(EQUAL);
			char_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_96.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		with_identifier_AST = (AST)currentAST.root;
		returnAST = with_identifier_AST;
	}
	
	public final void collate_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST collate_clause_AST = null;
		
		AST tmp340_AST = null;
		tmp340_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp340_AST);
		match(COLLATE);
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		collate_clause_AST = (AST)currentAST.root;
		returnAST = collate_clause_AST;
	}
	
	public final void device_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST device_spec_AST = null;
		
		switch ( LA(1)) {
		case DEFAULT:
		{
			AST tmp341_AST = null;
			tmp341_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp341_AST);
			match(DEFAULT);
			{
			switch ( LA(1)) {
			case EQUAL:
			{
				AST tmp342_AST = null;
				tmp342_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp342_AST);
				match(EQUAL);
				unsigned_num_int();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case COLLATE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case LOG:
			case PROXY_UPDATE:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case COMMA:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			device_spec_AST = (AST)currentAST.root;
			break;
		}
		case PRIMARY:
		case LPAREN:
		{
			ms_device_spec();
			astFactory.addASTChild(currentAST, returnAST);
			device_spec_AST = (AST)currentAST.root;
			break;
		}
		case FILEGROUP:
		{
			AST tmp343_AST = null;
			tmp343_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp343_AST);
			match(FILEGROUP);
			name();
			astFactory.addASTChild(currentAST, returnAST);
			device_spec();
			astFactory.addASTChild(currentAST, returnAST);
			device_spec_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				name();
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case EQUAL:
				{
					AST tmp344_AST = null;
					tmp344_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp344_AST);
					match(EQUAL);
					unsigned_num_int();
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case WITH:
				case CHECKPOINT:
				case ALTER:
				case DROP:
				case FOR:
				case SELECT:
				case ELSE:
				case END:
				case DECLARE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case COLLATE:
				case DENY:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case LOG:
				case PROXY_UPDATE:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case COMMA:
				case SEMI_COLON:
				case LPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				device_spec_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = device_spec_AST;
	}
	
	public final void ms_device_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ms_device_spec_AST = null;
		
		{
		switch ( LA(1)) {
		case PRIMARY:
		{
			AST tmp345_AST = null;
			tmp345_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp345_AST);
			match(PRIMARY);
			break;
		}
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp346_AST = null;
		tmp346_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp346_AST);
		match(LPAREN);
		prop_dev();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop529:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				prop_dev();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop529;
			}
			
		} while (true);
		}
		AST tmp348_AST = null;
		tmp348_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp348_AST);
		match(RPAREN);
		ms_device_spec_AST = (AST)currentAST.root;
		returnAST = ms_device_spec_AST;
	}
	
	public final void prop_dev() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST prop_dev_AST = null;
		
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp349_AST = null;
		tmp349_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp349_AST);
		match(EQUAL);
		{
		if ((_tokenSet_2.member(LA(1)))) {
			name();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_44.member(LA(1)))) {
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			{
			if ((_tokenSet_2.member(LA(1)))) {
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((LA(1)==COMMA||LA(1)==RPAREN)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		prop_dev_AST = (AST)currentAST.root;
		returnAST = prop_dev_AST;
	}
	
	public final void char_string_lit() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST char_string_lit_AST = null;
		
		if ((LA(1)==DOUBLE_QUOTED_STRING_LIT||LA(1)==SINGLE_QUOTED_STRING_LIT)) {
			quoted_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			char_string_lit_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_2.member(LA(1)))) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			char_string_lit_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = char_string_lit_AST;
	}
	
	public final void alter_database_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alter_database_stmt_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST d_AST = null;
		AST do_AST = null;
		AST al_AST = null;
		
		a = LT(1);
		a_AST = astFactory.create(a);
		match(ALTER);
		AST tmp350_AST = null;
		tmp350_AST = astFactory.create(LT(1));
		match(DATABASE);
		database_varname();
		d_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case EOF:
		case WITH:
		case ON:
		case FOR:
		case COLLATE:
		case LOG:
		case PROXY_UPDATE:
		{
			db_opts();
			do_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alter_database_stmt_AST = (AST)currentAST.root;
				alter_database_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ALTER_DATABASE_STMT,"alter_database_stmt")).add(d_AST)); SrcAST.setSpan(alter_database_stmt_AST,a_AST,do_AST);
				currentAST.root = alter_database_stmt_AST;
				currentAST.child = alter_database_stmt_AST!=null &&alter_database_stmt_AST.getFirstChild()!=null ?
					alter_database_stmt_AST.getFirstChild() : alter_database_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case ADD:
		case SET:
		case MODIFY:
		case REMOVE:
		{
			alterdb_mssql_clause();
			al_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				alter_database_stmt_AST = (AST)currentAST.root;
				alter_database_stmt_AST = (AST)astFactory.make( (new ASTArray(1)).add((AST)astFactory.create(ALTER_DATABASE_STMT,"alter_database,stmt")));SrcAST.setSpan(alter_database_stmt_AST,a_AST,al_AST);
				currentAST.root = alter_database_stmt_AST;
				currentAST.child = alter_database_stmt_AST!=null &&alter_database_stmt_AST.getFirstChild()!=null ?
					alter_database_stmt_AST.getFirstChild() : alter_database_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		returnAST = alter_database_stmt_AST;
	}
	
	public final void database_varname() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST database_varname_AST = null;
		
		switch ( LA(1)) {
		case AT_IDENT:
		{
			AST tmp351_AST = null;
			tmp351_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp351_AST);
			match(AT_IDENT);
			database_varname_AST = (AST)currentAST.root;
			break;
		}
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		{
			quoted_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			database_varname_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				name();
				astFactory.addASTChild(currentAST, returnAST);
				database_varname_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = database_varname_AST;
	}
	
	public final void alterdb_mssql_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alterdb_mssql_clause_AST = null;
		
		switch ( LA(1)) {
		case REMOVE:
		{
			AST tmp352_AST = null;
			tmp352_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp352_AST);
			match(REMOVE);
			{
			switch ( LA(1)) {
			case FILE:
			{
				AST tmp353_AST = null;
				tmp353_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp353_AST);
				match(FILE);
				break;
			}
			case FILEGROUP:
			{
				AST tmp354_AST = null;
				tmp354_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp354_AST);
				match(FILEGROUP);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			name();
			astFactory.addASTChild(currentAST, returnAST);
			alterdb_mssql_clause_AST = (AST)currentAST.root;
			break;
		}
		case SET:
		{
			AST tmp355_AST = null;
			tmp355_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp355_AST);
			match(SET);
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			{
			{
			switch ( LA(1)) {
			case FULL:
			{
				AST tmp356_AST = null;
				tmp356_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp356_AST);
				match(FULL);
				break;
			}
			case EOF:
			case WITH:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WITH:
			{
				with_rollback_or_ident();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			}
			alterdb_mssql_clause_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((LA(1)==ADD) && (LA(2)==FILE)) {
				AST tmp357_AST = null;
				tmp357_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp357_AST);
				match(ADD);
				AST tmp358_AST = null;
				tmp358_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp358_AST);
				match(FILE);
				{
				if ((LA(1)==PRIMARY||LA(1)==LPAREN)) {
					{
					int _cnt546=0;
					_loop546:
					do {
						if ((LA(1)==PRIMARY||LA(1)==LPAREN)) {
							ms_device_spec();
							astFactory.addASTChild(currentAST, returnAST);
						}
						else {
							if ( _cnt546>=1 ) { break _loop546; } else {throw new NoViableAltException(LT(1), getFilename());}
						}
						
						_cnt546++;
					} while (true);
					}
					{
					switch ( LA(1)) {
					case TO:
					{
						to_filegroup();
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case EOF:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else if ((_tokenSet_2.member(LA(1)))) {
					identifier();
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				alterdb_mssql_clause_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==ADD) && (LA(2)==LOG)) {
				AST tmp359_AST = null;
				tmp359_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp359_AST);
				match(ADD);
				AST tmp360_AST = null;
				tmp360_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp360_AST);
				match(LOG);
				AST tmp361_AST = null;
				tmp361_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp361_AST);
				match(FILE);
				{
				int _cnt549=0;
				_loop549:
				do {
					if ((LA(1)==PRIMARY||LA(1)==LPAREN)) {
						ms_device_spec();
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						if ( _cnt549>=1 ) { break _loop549; } else {throw new NoViableAltException(LT(1), getFilename());}
					}
					
					_cnt549++;
				} while (true);
				}
				alterdb_mssql_clause_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==MODIFY) && (LA(2)==FILE)) {
				AST tmp362_AST = null;
				tmp362_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp362_AST);
				match(MODIFY);
				AST tmp363_AST = null;
				tmp363_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp363_AST);
				match(FILE);
				{
				switch ( LA(1)) {
				case PRIMARY:
				case LPAREN:
				{
					ms_device_spec();
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case EQUAL:
				{
					AST tmp364_AST = null;
					tmp364_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp364_AST);
					match(EQUAL);
					name();
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				alterdb_mssql_clause_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==MODIFY) && (LA(2)==FILEGROUP)) {
				AST tmp365_AST = null;
				tmp365_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp365_AST);
				match(MODIFY);
				AST tmp366_AST = null;
				tmp366_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp366_AST);
				match(FILEGROUP);
				name();
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case READONLY:
				case READWRITE:
				{
					{
					switch ( LA(1)) {
					case READONLY:
					{
						AST tmp367_AST = null;
						tmp367_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp367_AST);
						match(READONLY);
						break;
					}
					case READWRITE:
					{
						AST tmp368_AST = null;
						tmp368_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp368_AST);
						match(READWRITE);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					break;
				}
				case DEFAULT:
				{
					AST tmp369_AST = null;
					tmp369_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp369_AST);
					match(DEFAULT);
					break;
				}
				case NAME:
				{
					AST tmp370_AST = null;
					tmp370_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp370_AST);
					match(NAME);
					AST tmp371_AST = null;
					tmp371_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp371_AST);
					match(EQUAL);
					name();
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				alterdb_mssql_clause_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = alterdb_mssql_clause_AST;
	}
	
	public final void to_filegroup() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST to_filegroup_AST = null;
		
		AST tmp372_AST = null;
		tmp372_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp372_AST);
		match(TO);
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		name();
		astFactory.addASTChild(currentAST, returnAST);
		to_filegroup_AST = (AST)currentAST.root;
		returnAST = to_filegroup_AST;
	}
	
	public final void with_rollback_or_ident() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_rollback_or_ident_AST = null;
		
		AST tmp373_AST = null;
		tmp373_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp373_AST);
		match(WITH);
		{
		if ((LA(1)==ROLLBACK)) {
			AST tmp374_AST = null;
			tmp374_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp374_AST);
			match(ROLLBACK);
		}
		else if ((_tokenSet_2.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case NUM_INT:
		case PLUS:
		case MINUS:
		{
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			{
			if ((_tokenSet_2.member(LA(1)))) {
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_33.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		with_rollback_or_ident_AST = (AST)currentAST.root;
		returnAST = with_rollback_or_ident_AST;
	}
	
	public final void database_name_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST database_name_list_AST = null;
		AST d1_AST = null;
		AST d_AST = null;
		AST dlist = astFactory.create(DATABASE_NAME_LIST,"database_name_list");
		
		database_name();
		d1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			dlist.addChild(d1_AST);
		}
		{
		_loop564:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				database_name();
				d_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				if ( inputState.guessing==0 ) {
					dlist.addChild(d_AST);
				}
			}
			else {
				break _loop564;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			database_name_list_AST = (AST)currentAST.root;
			database_name_list_AST = dlist;
			currentAST.root = database_name_list_AST;
			currentAST.child = database_name_list_AST!=null &&database_name_list_AST.getFirstChild()!=null ?
				database_name_list_AST.getFirstChild() : database_name_list_AST;
			currentAST.advanceChildToEnd();
		}
		database_name_list_AST = (AST)currentAST.root;
		returnAST = database_name_list_AST;
	}
	
	public final void correlation_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST correlation_name_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST kw_AST = null;
		AST i1 = astFactory.create(IDENTIFIER,"IDENTIFIER");
			   AST i2 = astFactory.create(QUOTED_IDENTIFIER,"QUOTED_IDENTIFIER");
			
		
		if ((LA(1)==IDENT)) {
			id = LT(1);
			id_AST = astFactory.create(id);
			match(IDENT);
			if ( inputState.guessing==0 ) {
				SrcAST.setSpan( i1, id_AST );
			}
			if ( inputState.guessing==0 ) {
				i1.setText( SrcAST.getText(id_AST) );
			}
			if ( inputState.guessing==0 ) {
				correlation_name_AST = (AST)currentAST.root;
				correlation_name_AST = i1;
				currentAST.root = correlation_name_AST;
				currentAST.child = correlation_name_AST!=null &&correlation_name_AST.getFirstChild()!=null ?
					correlation_name_AST.getFirstChild() : correlation_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_66.member(LA(1)))) {
			nonreskeyword();
			kw_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				SrcAST.setSpan( i1, kw_AST );
			}
			if ( inputState.guessing==0 ) {
				i1.setText( SrcAST.getText(kw_AST) );
			}
			if ( inputState.guessing==0 ) {
				correlation_name_AST = (AST)currentAST.root;
				correlation_name_AST = i1;
				currentAST.root = correlation_name_AST;
				currentAST.child = correlation_name_AST!=null &&correlation_name_AST.getFirstChild()!=null ?
					correlation_name_AST.getFirstChild() : correlation_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = correlation_name_AST;
	}
	
	public final void nonreskeyword() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST nonreskeyword_AST = null;
		
		switch ( LA(1)) {
		case ABSOLUTE:
		{
			AST tmp376_AST = null;
			tmp376_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp376_AST);
			match(ABSOLUTE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ACTION:
		{
			AST tmp377_AST = null;
			tmp377_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp377_AST);
			match(ACTION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ACTIVATION:
		{
			AST tmp378_AST = null;
			tmp378_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp378_AST);
			match(ACTIVATION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case AFTER:
		{
			AST tmp379_AST = null;
			tmp379_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp379_AST);
			match(AFTER);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ALLOW_DUP_ROW:
		{
			AST tmp380_AST = null;
			tmp380_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp380_AST);
			match(ALLOW_DUP_ROW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ALLROWS:
		{
			AST tmp381_AST = null;
			tmp381_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp381_AST);
			match(ALLROWS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case AUTO:
		{
			AST tmp382_AST = null;
			tmp382_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp382_AST);
			match(AUTO);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case AUTOINCREMENT:
		{
			AST tmp383_AST = null;
			tmp383_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp383_AST);
			match(AUTOINCREMENT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case BEFORE:
		{
			AST tmp384_AST = null;
			tmp384_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp384_AST);
			match(BEFORE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case BINARY:
		{
			AST tmp385_AST = null;
			tmp385_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp385_AST);
			match(BINARY);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CAST:
		{
			AST tmp386_AST = null;
			tmp386_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp386_AST);
			match(CAST);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CHAR:
		{
			AST tmp387_AST = null;
			tmp387_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp387_AST);
			match(CHAR);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CHARACTER:
		{
			AST tmp388_AST = null;
			tmp388_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp388_AST);
			match(CHARACTER);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case COLUMN:
		{
			AST tmp389_AST = null;
			tmp389_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp389_AST);
			match(COLUMN);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CONSUMERS:
		{
			AST tmp390_AST = null;
			tmp390_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp390_AST);
			match(CONSUMERS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CONCAT:
		{
			AST tmp391_AST = null;
			tmp391_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp391_AST);
			match(CONCAT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case COUNT_BIG:
		{
			AST tmp392_AST = null;
			tmp392_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp392_AST);
			match(COUNT_BIG);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CUBE:
		{
			AST tmp393_AST = null;
			tmp393_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp393_AST);
			match(CUBE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DATAPAGES:
		{
			AST tmp394_AST = null;
			tmp394_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp394_AST);
			match(DATAPAGES);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DATAROWS:
		{
			AST tmp395_AST = null;
			tmp395_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp395_AST);
			match(DATAROWS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DATE:
		{
			AST tmp396_AST = null;
			tmp396_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp396_AST);
			match(DATE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DELAY:
		{
			AST tmp397_AST = null;
			tmp397_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp397_AST);
			match(DELAY);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DISABLE:
		{
			AST tmp398_AST = null;
			tmp398_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp398_AST);
			match(DISABLE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DISTRIBUTED:
		{
			AST tmp399_AST = null;
			tmp399_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp399_AST);
			match(DISTRIBUTED);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DOMAIN:
		{
			AST tmp400_AST = null;
			tmp400_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp400_AST);
			match(DOMAIN);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DYNAMIC:
		{
			AST tmp401_AST = null;
			tmp401_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp401_AST);
			match(DYNAMIC);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case DELIMITER:
		{
			AST tmp402_AST = null;
			tmp402_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp402_AST);
			match(DELIMITER);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EACH:
		{
			AST tmp403_AST = null;
			tmp403_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp403_AST);
			match(EACH);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ELEMENTS:
		{
			AST tmp404_AST = null;
			tmp404_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp404_AST);
			match(ELEMENTS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ENABLE:
		{
			AST tmp405_AST = null;
			tmp405_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp405_AST);
			match(ENABLE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ENCRYPTION:
		{
			AST tmp406_AST = null;
			tmp406_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp406_AST);
			match(ENCRYPTION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ERRORDATA:
		{
			AST tmp407_AST = null;
			tmp407_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp407_AST);
			match(ERRORDATA);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ERROREXIT:
		{
			AST tmp408_AST = null;
			tmp408_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp408_AST);
			match(ERROREXIT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EXCLUSIVE:
		{
			AST tmp409_AST = null;
			tmp409_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp409_AST);
			match(EXCLUSIVE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EXISTING:
		{
			AST tmp410_AST = null;
			tmp410_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp410_AST);
			match(EXISTING);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EXPAND:
		{
			AST tmp411_AST = null;
			tmp411_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp411_AST);
			match(EXPAND);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EXPIRATION:
		{
			AST tmp412_AST = null;
			tmp412_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp412_AST);
			match(EXPIRATION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EXP_ROW_SIZE:
		{
			AST tmp413_AST = null;
			tmp413_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp413_AST);
			match(EXP_ROW_SIZE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case EXTERNAL:
		{
			AST tmp414_AST = null;
			tmp414_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp414_AST);
			match(EXTERNAL);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FAST:
		{
			AST tmp415_AST = null;
			tmp415_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp415_AST);
			match(FAST);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FAST_FORWARD:
		{
			AST tmp416_AST = null;
			tmp416_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp416_AST);
			match(FAST_FORWARD);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FORWARD_ONLY:
		{
			AST tmp417_AST = null;
			tmp417_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp417_AST);
			match(FORWARD_ONLY);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FASTFIRSTROW:
		{
			AST tmp418_AST = null;
			tmp418_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp418_AST);
			match(FASTFIRSTROW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FILE:
		{
			AST tmp419_AST = null;
			tmp419_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp419_AST);
			match(FILE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FIRST:
		{
			AST tmp420_AST = null;
			tmp420_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp420_AST);
			match(FIRST);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case FULLSCAN:
		{
			AST tmp421_AST = null;
			tmp421_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp421_AST);
			match(FULLSCAN);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case GLOBAL:
		{
			AST tmp422_AST = null;
			tmp422_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp422_AST);
			match(GLOBAL);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case HASH:
		{
			AST tmp423_AST = null;
			tmp423_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp423_AST);
			match(HASH);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case IDENTITY_GAP:
		{
			AST tmp424_AST = null;
			tmp424_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp424_AST);
			match(IDENTITY_GAP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case INSTEAD:
		{
			AST tmp425_AST = null;
			tmp425_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp425_AST);
			match(INSTEAD);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case INSENSITIVE:
		{
			AST tmp426_AST = null;
			tmp426_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp426_AST);
			match(INSENSITIVE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case IGNORE_DUP_KEY:
		{
			AST tmp427_AST = null;
			tmp427_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp427_AST);
			match(IGNORE_DUP_KEY);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case IGNORE_DUP_ROW:
		{
			AST tmp428_AST = null;
			tmp428_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp428_AST);
			match(IGNORE_DUP_ROW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case KEEP:
		{
			AST tmp429_AST = null;
			tmp429_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp429_AST);
			match(KEEP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case KEEPFIXED:
		{
			AST tmp430_AST = null;
			tmp430_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp430_AST);
			match(KEEPFIXED);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case KEYSET:
		{
			AST tmp431_AST = null;
			tmp431_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp431_AST);
			match(KEYSET);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case LAST:
		{
			AST tmp432_AST = null;
			tmp432_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp432_AST);
			match(LAST);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case LENGTH:
		{
			AST tmp433_AST = null;
			tmp433_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp433_AST);
			match(LENGTH);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case LOCAL:
		{
			AST tmp434_AST = null;
			tmp434_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp434_AST);
			match(LOCAL);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case LOG:
		{
			AST tmp435_AST = null;
			tmp435_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp435_AST);
			match(LOG);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case LOOP:
		{
			AST tmp436_AST = null;
			tmp436_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp436_AST);
			match(LOOP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MAX_ROWS_PER_PAGE:
		{
			AST tmp437_AST = null;
			tmp437_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp437_AST);
			match(MAX_ROWS_PER_PAGE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MAXDOP:
		{
			AST tmp438_AST = null;
			tmp438_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp438_AST);
			match(MAXDOP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MAXIMUM:
		{
			AST tmp439_AST = null;
			tmp439_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp439_AST);
			match(MAXIMUM);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MERGE:
		{
			AST tmp440_AST = null;
			tmp440_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp440_AST);
			match(MERGE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MEMBERSHIP:
		{
			AST tmp441_AST = null;
			tmp441_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp441_AST);
			match(MEMBERSHIP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MIRROREXIT:
		{
			AST tmp442_AST = null;
			tmp442_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp442_AST);
			match(MIRROREXIT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MODE:
		{
			AST tmp443_AST = null;
			tmp443_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp443_AST);
			match(MODE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case MODIFY:
		{
			AST tmp444_AST = null;
			tmp444_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp444_AST);
			match(MODIFY);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NAME:
		{
			AST tmp445_AST = null;
			tmp445_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp445_AST);
			match(NAME);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NEW:
		{
			AST tmp446_AST = null;
			tmp446_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp446_AST);
			match(NEW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NEXT:
		{
			AST tmp447_AST = null;
			tmp447_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp447_AST);
			match(NEXT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NO:
		{
			AST tmp448_AST = null;
			tmp448_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp448_AST);
			match(NO);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NOCHECK:
		{
			AST tmp449_AST = null;
			tmp449_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp449_AST);
			match(NOCHECK);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NORECOMPUTE:
		{
			AST tmp450_AST = null;
			tmp450_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp450_AST);
			match(NORECOMPUTE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NOWAIT:
		{
			AST tmp451_AST = null;
			tmp451_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp451_AST);
			match(NOWAIT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case OLD:
		{
			AST tmp452_AST = null;
			tmp452_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp452_AST);
			match(OLD);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case OUTPUT:
		{
			AST tmp453_AST = null;
			tmp453_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp453_AST);
			match(OUTPUT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case OUT:
		{
			AST tmp454_AST = null;
			tmp454_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp454_AST);
			match(OUT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case OPTIMISTIC:
		{
			AST tmp455_AST = null;
			tmp455_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp455_AST);
			match(OPTIMISTIC);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PARTITION:
		{
			AST tmp456_AST = null;
			tmp456_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp456_AST);
			match(PARTITION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PARALLEL:
		{
			AST tmp457_AST = null;
			tmp457_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp457_AST);
			match(PARALLEL);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PASSWD:
		{
			AST tmp458_AST = null;
			tmp458_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp458_AST);
			match(PASSWD);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PREFETCH:
		{
			AST tmp459_AST = null;
			tmp459_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp459_AST);
			match(PREFETCH);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PRIOR:
		{
			AST tmp460_AST = null;
			tmp460_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp460_AST);
			match(PRIOR);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PROCESSEXIT:
		{
			AST tmp461_AST = null;
			tmp461_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp461_AST);
			match(PROCESSEXIT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case PROXY_UPDATE:
		{
			AST tmp462_AST = null;
			tmp462_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp462_AST);
			match(PROXY_UPDATE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RELATIVE:
		{
			AST tmp463_AST = null;
			tmp463_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp463_AST);
			match(RELATIVE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case REPLICATION:
		{
			AST tmp464_AST = null;
			tmp464_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp464_AST);
			match(REPLICATION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case REMOTE:
		{
			AST tmp465_AST = null;
			tmp465_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp465_AST);
			match(REMOTE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RESAMPLE:
		{
			AST tmp466_AST = null;
			tmp466_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp466_AST);
			match(RESAMPLE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RESERVEPAGEGAP:
		{
			AST tmp467_AST = null;
			tmp467_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp467_AST);
			match(RESERVEPAGEGAP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RESOLVE:
		{
			AST tmp468_AST = null;
			tmp468_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp468_AST);
			match(RESOLVE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RETURNS:
		{
			AST tmp469_AST = null;
			tmp469_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp469_AST);
			match(RETURNS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case REFERENCING:
		{
			AST tmp470_AST = null;
			tmp470_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp470_AST);
			match(REFERENCING);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ROBUST:
		{
			AST tmp471_AST = null;
			tmp471_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp471_AST);
			match(ROBUST);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ROLLUP:
		{
			AST tmp472_AST = null;
			tmp472_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp472_AST);
			match(ROLLUP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case ROW:
		{
			AST tmp473_AST = null;
			tmp473_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp473_AST);
			match(ROW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RAW:
		{
			AST tmp474_AST = null;
			tmp474_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp474_AST);
			match(RAW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SAMPLE:
		{
			AST tmp475_AST = null;
			tmp475_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp475_AST);
			match(SAMPLE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SCHEMA:
		{
			AST tmp476_AST = null;
			tmp476_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp476_AST);
			match(SCHEMA);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SCHEMABINDING:
		{
			AST tmp477_AST = null;
			tmp477_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp477_AST);
			match(SCHEMABINDING);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SCROLL:
		{
			AST tmp478_AST = null;
			tmp478_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp478_AST);
			match(SCROLL);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SCROLL_LOCKS:
		{
			AST tmp479_AST = null;
			tmp479_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp479_AST);
			match(SCROLL_LOCKS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SETERROR:
		{
			AST tmp480_AST = null;
			tmp480_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp480_AST);
			match(SETERROR);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SHARE:
		{
			AST tmp481_AST = null;
			tmp481_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp481_AST);
			match(SHARE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SIZE:
		{
			AST tmp482_AST = null;
			tmp482_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp482_AST);
			match(SIZE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SORTED_DATA:
		{
			AST tmp483_AST = null;
			tmp483_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp483_AST);
			match(SORTED_DATA);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case STATIC:
		{
			AST tmp484_AST = null;
			tmp484_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp484_AST);
			match(STATIC);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case STATEMENT:
		{
			AST tmp485_AST = null;
			tmp485_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp485_AST);
			match(STATEMENT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case STRIPE:
		{
			AST tmp486_AST = null;
			tmp486_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp486_AST);
			match(STRIPE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case THEN:
		{
			AST tmp487_AST = null;
			tmp487_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp487_AST);
			match(THEN);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TIME:
		{
			AST tmp488_AST = null;
			tmp488_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp488_AST);
			match(TIME);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TIMESTAMP:
		{
			AST tmp489_AST = null;
			tmp489_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp489_AST);
			match(TIMESTAMP);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TEXT:
		{
			AST tmp490_AST = null;
			tmp490_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp490_AST);
			match(TEXT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TEXTIMAGE_ON:
		{
			AST tmp491_AST = null;
			tmp491_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp491_AST);
			match(TEXTIMAGE_ON);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TYPE:
		{
			AST tmp492_AST = null;
			tmp492_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp492_AST);
			match(TYPE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TYPE_WARNING:
		{
			AST tmp493_AST = null;
			tmp493_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp493_AST);
			match(TYPE_WARNING);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case USING:
		{
			AST tmp494_AST = null;
			tmp494_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp494_AST);
			match(USING);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case UNICODE:
		{
			AST tmp495_AST = null;
			tmp495_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp495_AST);
			match(UNICODE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case UNPARTITION:
		{
			AST tmp496_AST = null;
			tmp496_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp496_AST);
			match(UNPARTITION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case VIEWS:
		{
			AST tmp497_AST = null;
			tmp497_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp497_AST);
			match(VIEWS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case WAIT:
		{
			AST tmp498_AST = null;
			tmp498_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp498_AST);
			match(WAIT);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case XML:
		{
			AST tmp499_AST = null;
			tmp499_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp499_AST);
			match(XML);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case XMLDATA:
		{
			AST tmp500_AST = null;
			tmp500_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp500_AST);
			match(XMLDATA);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CALLED_ONLY_WITHIN_TRANSACTION:
		{
			AST tmp501_AST = null;
			tmp501_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp501_AST);
			match(CALLED_ONLY_WITHIN_TRANSACTION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case NOT_CALLED_WITHIN_TRANSACTION:
		{
			AST tmp502_AST = null;
			tmp502_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp502_AST);
			match(NOT_CALLED_WITHIN_TRANSACTION);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TRANSLATE_OWNER_NAME:
		{
			AST tmp503_AST = null;
			tmp503_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp503_AST);
			match(TRANSLATE_OWNER_NAME);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case IGNORE_OWNER_NAME:
		{
			AST tmp504_AST = null;
			tmp504_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp504_AST);
			match(IGNORE_OWNER_NAME);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case TRANSLATE_TYPE:
		{
			AST tmp505_AST = null;
			tmp505_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp505_AST);
			match(TRANSLATE_TYPE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case BIND_COLUMN_TYPE:
		{
			AST tmp506_AST = null;
			tmp506_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp506_AST);
			match(BIND_COLUMN_TYPE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case VARIABLE_PREFIX:
		{
			AST tmp507_AST = null;
			tmp507_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp507_AST);
			match(VARIABLE_PREFIX);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case CREATE_TABLE_OPTIONS:
		{
			AST tmp508_AST = null;
			tmp508_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp508_AST);
			match(CREATE_TABLE_OPTIONS);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SET_DEFAULT_SCHEMA:
		{
			AST tmp509_AST = null;
			tmp509_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp509_AST);
			match(SET_DEFAULT_SCHEMA);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RENAME_COLUMN:
		{
			AST tmp510_AST = null;
			tmp510_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp510_AST);
			match(RENAME_COLUMN);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RENAME_VIEW:
		{
			AST tmp511_AST = null;
			tmp511_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp511_AST);
			match(RENAME_VIEW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RENAME_TABLE:
		{
			AST tmp512_AST = null;
			tmp512_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp512_AST);
			match(RENAME_TABLE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case RENAME_PROCEDURE:
		{
			AST tmp513_AST = null;
			tmp513_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp513_AST);
			match(RENAME_PROCEDURE);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		case SINGLE_ROW:
		{
			AST tmp514_AST = null;
			tmp514_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp514_AST);
			match(SINGLE_ROW);
			nonreskeyword_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = nonreskeyword_AST;
	}
	
/*************************************************/
	public final void ansijoin_nonResWords() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ansijoin_nonResWords_AST = null;
		
		switch ( LA(1)) {
		case RIGHT:
		{
			AST tmp515_AST = null;
			tmp515_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp515_AST);
			match(RIGHT);
			ansijoin_nonResWords_AST = (AST)currentAST.root;
			break;
		}
		case LEFT:
		{
			AST tmp516_AST = null;
			tmp516_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp516_AST);
			match(LEFT);
			ansijoin_nonResWords_AST = (AST)currentAST.root;
			break;
		}
		case INNER:
		{
			AST tmp517_AST = null;
			tmp517_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp517_AST);
			match(INNER);
			ansijoin_nonResWords_AST = (AST)currentAST.root;
			break;
		}
		case OUTER:
		{
			AST tmp518_AST = null;
			tmp518_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp518_AST);
			match(OUTER);
			ansijoin_nonResWords_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = ansijoin_nonResWords_AST;
	}
	
	public final void add_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST add_expr_AST = null;
		AST m1_AST = null;
		AST m_AST = null;
		
		mult_expr();
		m1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop575:
		do {
			if ((_tokenSet_97.member(LA(1)))) {
				{
				switch ( LA(1)) {
				case PLUS:
				{
					AST tmp519_AST = null;
					tmp519_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp519_AST);
					match(PLUS);
					break;
				}
				case MINUS:
				{
					AST tmp520_AST = null;
					tmp520_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp520_AST);
					match(MINUS);
					break;
				}
				case AND_SIGN:
				{
					AST tmp521_AST = null;
					tmp521_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp521_AST);
					match(AND_SIGN);
					break;
				}
				case OR_SIGN:
				{
					AST tmp522_AST = null;
					tmp522_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp522_AST);
					match(OR_SIGN);
					break;
				}
				case XOR:
				{
					AST tmp523_AST = null;
					tmp523_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp523_AST);
					match(XOR);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				mult_expr();
				m_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop575;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			add_expr_AST = (AST)currentAST.root;
			SrcAST.setSpan(add_expr_AST,m1_AST,m_AST);
		}
		add_expr_AST = (AST)currentAST.root;
		returnAST = add_expr_AST;
	}
	
	public final void additive_op() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST additive_op_AST = null;
		
		switch ( LA(1)) {
		case PLUS:
		{
			AST tmp524_AST = null;
			tmp524_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp524_AST);
			match(PLUS);
			additive_op_AST = (AST)currentAST.root;
			break;
		}
		case MINUS:
		{
			AST tmp525_AST = null;
			tmp525_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp525_AST);
			match(MINUS);
			additive_op_AST = (AST)currentAST.root;
			break;
		}
		case AND:
		{
			AST tmp526_AST = null;
			tmp526_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp526_AST);
			match(AND);
			additive_op_AST = (AST)currentAST.root;
			break;
		}
		case OR:
		{
			AST tmp527_AST = null;
			tmp527_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp527_AST);
			match(OR);
			additive_op_AST = (AST)currentAST.root;
			break;
		}
		case XOR:
		{
			AST tmp528_AST = null;
			tmp528_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp528_AST);
			match(XOR);
			additive_op_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = additive_op_AST;
	}
	
	public final void mult_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST mult_expr_AST = null;
		AST u1_AST = null;
		AST u_AST = null;
		
		unary_expr();
		u1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop580:
		do {
			if ((_tokenSet_98.member(LA(1)))) {
				{
				switch ( LA(1)) {
				case STAR:
				{
					AST tmp529_AST = null;
					tmp529_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp529_AST);
					match(STAR);
					break;
				}
				case SLASH:
				{
					AST tmp530_AST = null;
					tmp530_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp530_AST);
					match(SLASH);
					break;
				}
				case PERCENT:
				{
					AST tmp531_AST = null;
					tmp531_AST = astFactory.create(LT(1));
					astFactory.makeASTRoot(currentAST, tmp531_AST);
					match(PERCENT);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				unary_expr();
				u_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop580;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			mult_expr_AST = (AST)currentAST.root;
			SrcAST.setSpan(mult_expr_AST,u1_AST,u_AST);
		}
		mult_expr_AST = (AST)currentAST.root;
		returnAST = mult_expr_AST;
	}
	
	public final void mult_op() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST mult_op_AST = null;
		
		switch ( LA(1)) {
		case STAR:
		{
			AST tmp532_AST = null;
			tmp532_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp532_AST);
			match(STAR);
			mult_op_AST = (AST)currentAST.root;
			break;
		}
		case SLASH:
		{
			AST tmp533_AST = null;
			tmp533_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp533_AST);
			match(SLASH);
			mult_op_AST = (AST)currentAST.root;
			break;
		}
		case PERCENT:
		{
			AST tmp534_AST = null;
			tmp534_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp534_AST);
			match(PERCENT);
			mult_op_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = mult_op_AST;
	}
	
	public final void unary_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unary_expr_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST e1_AST = null;
		Token  m = null;
		AST m_AST = null;
		AST e2_AST = null;
		Token  t = null;
		AST t_AST = null;
		AST pe_AST = null;
		
		switch ( LA(1)) {
		case PLUS:
		{
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PLUS);
			primary_expression();
			e1_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				unary_expr_AST = (AST)currentAST.root;
				unary_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNARY_PLUS,"unary_plus")).add(unary_expr_AST));
					    SrcAST.setSpanAndText( unary_expr_AST, p_AST, e1_AST, SrcAST.getText(p_AST) + SrcAST.getText(e1_AST) );
					
				currentAST.root = unary_expr_AST;
				currentAST.child = unary_expr_AST!=null &&unary_expr_AST.getFirstChild()!=null ?
					unary_expr_AST.getFirstChild() : unary_expr_AST;
				currentAST.advanceChildToEnd();
			}
			unary_expr_AST = (AST)currentAST.root;
			break;
		}
		case MINUS:
		{
			m = LT(1);
			m_AST = astFactory.create(m);
			match(MINUS);
			primary_expression();
			e2_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				unary_expr_AST = (AST)currentAST.root;
				unary_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UNARY_MINUS,"unary_minus")).add(unary_expr_AST));
					    SrcAST.setSpanAndText( unary_expr_AST, m_AST, e2_AST, SrcAST.getText(m_AST) + SrcAST.getText(e2_AST) );
					
				currentAST.root = unary_expr_AST;
				currentAST.child = unary_expr_AST!=null &&unary_expr_AST.getFirstChild()!=null ?
					unary_expr_AST.getFirstChild() : unary_expr_AST;
				currentAST.advanceChildToEnd();
			}
			unary_expr_AST = (AST)currentAST.root;
			break;
		}
		case TILDE:
		{
			t = LT(1);
			t_AST = astFactory.create(t);
			astFactory.addASTChild(currentAST, t_AST);
			match(TILDE);
			primary_expression();
			pe_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				unary_expr_AST = (AST)currentAST.root;
				SrcAST.setSpan(unary_expr_AST,t_AST,pe_AST);
			}
			unary_expr_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_99.member(LA(1)))) {
				primary_expression();
				astFactory.addASTChild(currentAST, returnAST);
				unary_expr_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = unary_expr_AST;
	}
	
	public final void primary_expression() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST primary_expression_AST = null;
		AST c_AST = null;
		AST v_AST = null;
		
		switch ( LA(1)) {
		case NULL:
		{
			AST tmp535_AST = null;
			tmp535_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp535_AST);
			match(NULL);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case DEFAULT:
		{
			AST tmp536_AST = null;
			tmp536_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp536_AST);
			match(DEFAULT);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case NUM_REAL:
		case NUM_INT:
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		case MONEY_NUM_LIT:
		case HEX_STRING_LIT:
		case BIT_STRING_LIT:
		{
			constant_literal();
			c_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case CONVERT:
		{
			convert_expr();
			astFactory.addASTChild(currentAST, returnAST);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case CURRENT:
		{
			special_value();
			astFactory.addASTChild(currentAST, returnAST);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case CASE:
		{
			case_expr();
			astFactory.addASTChild(currentAST, returnAST);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case AT_IDENT:
		{
			AST tmp537_AST = null;
			tmp537_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp537_AST);
			match(AT_IDENT);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		case GLOBAL_VAR:
		{
			AST tmp538_AST = null;
			tmp538_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp538_AST);
			match(GLOBAL_VAR);
			primary_expression_AST = (AST)currentAST.root;
			break;
		}
		default:
			boolean synPredMatched584 = false;
			if (((LA(1)==CAST) && (LA(2)==LPAREN))) {
				int _m584 = mark();
				synPredMatched584 = true;
				inputState.guessing++;
				try {
					{
					cast_expr();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched584 = false;
				}
				rewind(_m584);
				inputState.guessing--;
			}
			if ( synPredMatched584 ) {
				cast_expr();
				astFactory.addASTChild(currentAST, returnAST);
				primary_expression_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_100.member(LA(1))) && (_tokenSet_101.member(LA(2)))) {
				variable_expression();
				v_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				if ( inputState.guessing==0 ) {
					primary_expression_AST = (AST)currentAST.root;
					primary_expression_AST = v_AST;
					currentAST.root = primary_expression_AST;
					currentAST.child = primary_expression_AST!=null &&primary_expression_AST.getFirstChild()!=null ?
						primary_expression_AST.getFirstChild() : primary_expression_AST;
					currentAST.advanceChildToEnd();
				}
				primary_expression_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched588 = false;
				if (((LA(1)==LPAREN) && (_tokenSet_41.member(LA(2))))) {
					int _m588 = mark();
					synPredMatched588 = true;
					inputState.guessing++;
					try {
						{
						match(LPAREN);
						expr();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched588 = false;
					}
					rewind(_m588);
					inputState.guessing--;
				}
				if ( synPredMatched588 ) {
					match(LPAREN);
					expr();
					astFactory.addASTChild(currentAST, returnAST);
					match(RPAREN);
					primary_expression_AST = (AST)currentAST.root;
				}
				else if ((LA(1)==LPAREN) && (LA(2)==SELECT||LA(2)==LPAREN)) {
					sub_query();
					astFactory.addASTChild(currentAST, returnAST);
					primary_expression_AST = (AST)currentAST.root;
				}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}}
			returnAST = primary_expression_AST;
		}
		
	public final void constant_literal() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constant_literal_AST = null;
		
		switch ( LA(1)) {
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		{
			quoted_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			constant_literal_AST = (AST)currentAST.root;
			break;
		}
		case NUM_INT:
		{
			AST tmp541_AST = null;
			tmp541_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp541_AST);
			match(NUM_INT);
			constant_literal_AST = (AST)currentAST.root;
			break;
		}
		case NUM_REAL:
		{
			AST tmp542_AST = null;
			tmp542_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp542_AST);
			match(NUM_REAL);
			constant_literal_AST = (AST)currentAST.root;
			break;
		}
		case MONEY_NUM_LIT:
		{
			AST tmp543_AST = null;
			tmp543_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp543_AST);
			match(MONEY_NUM_LIT);
			constant_literal_AST = (AST)currentAST.root;
			break;
		}
		case HEX_STRING_LIT:
		{
			AST tmp544_AST = null;
			tmp544_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp544_AST);
			match(HEX_STRING_LIT);
			constant_literal_AST = (AST)currentAST.root;
			break;
		}
		case BIT_STRING_LIT:
		{
			AST tmp545_AST = null;
			tmp545_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp545_AST);
			match(BIT_STRING_LIT);
			constant_literal_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = constant_literal_AST;
	}
	
	public final void cast_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cast_expr_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST e_AST = null;
		AST dt_AST = null;
		Token  rp1 = null;
		AST rp1_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CAST);
		AST tmp546_AST = null;
		tmp546_AST = astFactory.create(LT(1));
		match(LPAREN);
		expr();
		e_AST = (AST)returnAST;
		AST tmp547_AST = null;
		tmp547_AST = astFactory.create(LT(1));
		match(AS);
		datatype();
		dt_AST = (AST)returnAST;
		rp1 = LT(1);
		rp1_AST = astFactory.create(rp1);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			cast_expr_AST = (AST)currentAST.root;
			cast_expr_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CAST_EXPR,"cast_expr")).add(e_AST).add(dt_AST)); 
				    SrcAST.setSpan(cast_expr_AST,c_AST,rp1_AST);
				    cast_expr_AST.setText("CAST( " + SrcAST.getText(e_AST) + " AS " + SrcAST.getText(dt_AST) + " )");
				
			currentAST.root = cast_expr_AST;
			currentAST.child = cast_expr_AST!=null &&cast_expr_AST.getFirstChild()!=null ?
				cast_expr_AST.getFirstChild() : cast_expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = cast_expr_AST;
	}
	
	public final void convert_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST convert_expr_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST dt_AST = null;
		AST e1_AST = null;
		AST e2_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST conv = astFactory.create(CONVERT_EXPR,"convert_expr");
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CONVERT);
		AST tmp548_AST = null;
		tmp548_AST = astFactory.create(LT(1));
		match(LPAREN);
		datatype();
		dt_AST = (AST)returnAST;
		AST tmp549_AST = null;
		tmp549_AST = astFactory.create(LT(1));
		match(COMMA);
		expr();
		e1_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case COMMA:
		{
			AST tmp550_AST = null;
			tmp550_AST = astFactory.create(LT(1));
			match(COMMA);
			expr();
			e2_AST = (AST)returnAST;
			break;
		}
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			convert_expr_AST = (AST)currentAST.root;
			convert_expr_AST = (AST)astFactory.make( (new ASTArray(4)).add(conv).add(dt_AST).add(e1_AST).add(e2_AST)); SrcAST.setSpan(convert_expr_AST,c_AST,rp_AST);
			currentAST.root = convert_expr_AST;
			currentAST.child = convert_expr_AST!=null &&convert_expr_AST.getFirstChild()!=null ?
				convert_expr_AST.getFirstChild() : convert_expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = convert_expr_AST;
	}
	
	public final void variable_expression() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_expression_AST = null;
		AST bve_AST = null;
		AST cs_AST = null;
		AST s_AST = null;
		AST ve = new SrcAST();
		//AST ve = null;
		String veString = "";
		AST args = null;
		AST attrib=null; 
		AST qualifier;
		
		
		basis();
		bve_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			ve = bve_AST;
				     veString = SrcAST.getText(bve_AST);
				     SrcAST.setSpan(ve,bve_AST);
				
		}
		{
		boolean synPredMatched593 = false;
		if (((LA(1)==LPAREN) && (_tokenSet_102.member(LA(2))))) {
			int _m593 = mark();
			synPredMatched593 = true;
			inputState.guessing++;
			try {
				{
				match(LPAREN);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched593 = false;
			}
			rewind(_m593);
			inputState.guessing--;
		}
		if ( synPredMatched593 ) {
			qualifier=call_suffix();
			cs_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				veString = veString + SrcAST.getText(cs_AST);
								  	  ve = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CALL_EXPRESSION,"CALL_EXPRESSION")).add(ve).add(cs_AST));
								  	  if (qualifier!=null) ve.addChild(qualifier);
								  	  ve.setText(veString);
								  	  SrcAST.setSpan(ve, bve_AST, cs_AST);
								  	
			}
			{
			_loop595:
			do {
				if ((LA(1)==DOT)) {
					AST tmp551_AST = null;
					tmp551_AST = astFactory.create(LT(1));
					match(DOT);
					simple_name();
					s_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						veString = veString + "." + SrcAST.getText(s_AST);
										        ve = (AST)astFactory.make( (new ASTArray(3)).add(tmp551_AST).add(ve).add(s_AST));
										  	    ve.setText(veString);
										  	    SrcAST.setSpan(ve, bve_AST, s_AST);
										  	
					}
				}
				else {
					break _loop595;
				}
				
			} while (true);
			}
		}
		else if ((_tokenSet_103.member(LA(1))) && (_tokenSet_104.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			variable_expression_AST = (AST)currentAST.root;
			variable_expression_AST = ve;
			currentAST.root = variable_expression_AST;
			currentAST.child = variable_expression_AST!=null &&variable_expression_AST.getFirstChild()!=null ?
				variable_expression_AST.getFirstChild() : variable_expression_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = variable_expression_AST;
	}
	
	public final void special_value() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST special_value_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  t1 = null;
		AST t1_AST = null;
		Token  t2 = null;
		AST t2_AST = null;
		Token  d1 = null;
		AST d1_AST = null;
		AST sv = astFactory.create(SPECIAL_VALUE,"special_value");
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CURRENT);
		{
		switch ( LA(1)) {
		case TIMESTAMP:
		{
			t1 = LT(1);
			t1_AST = astFactory.create(t1);
			match(TIMESTAMP);
			if ( inputState.guessing==0 ) {
				special_value_AST = (AST)currentAST.root;
				special_value_AST = (AST)astFactory.make( (new ASTArray(2)).add(sv).add(astFactory.create(CURRENT_TIMESTAMP,"current_timestamp")));
				currentAST.root = special_value_AST;
				currentAST.child = special_value_AST!=null &&special_value_AST.getFirstChild()!=null ?
					special_value_AST.getFirstChild() : special_value_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case TIME:
		{
			t2 = LT(1);
			t2_AST = astFactory.create(t2);
			match(TIME);
			if ( inputState.guessing==0 ) {
				special_value_AST = (AST)currentAST.root;
				special_value_AST = (AST)astFactory.make( (new ASTArray(2)).add(sv).add(astFactory.create(CURRENT_TIME,"current_time")));
				currentAST.root = special_value_AST;
				currentAST.child = special_value_AST!=null &&special_value_AST.getFirstChild()!=null ?
					special_value_AST.getFirstChild() : special_value_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case DATE:
		{
			d1 = LT(1);
			d1_AST = astFactory.create(d1);
			match(DATE);
			if ( inputState.guessing==0 ) {
				special_value_AST = (AST)currentAST.root;
				special_value_AST = (AST)astFactory.make( (new ASTArray(2)).add(sv).add(astFactory.create(CURRENT_DATE,"current_date")));
				currentAST.root = special_value_AST;
				currentAST.child = special_value_AST!=null &&special_value_AST.getFirstChild()!=null ?
					special_value_AST.getFirstChild() : special_value_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			special_value_AST = (AST)currentAST.root;
			AST[] left = {c_AST}; AST[] right = {t1_AST,t2_AST,d1_AST}; SrcAST.setSpan(special_value_AST,left,right);
		}
		returnAST = special_value_AST;
	}
	
	public final void case_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST case_expr_AST = null;
		Token  c1 = null;
		AST c1_AST = null;
		AST wclist_AST = null;
		Token  end1 = null;
		AST end1_AST = null;
		AST e_AST = null;
		Token  end2 = null;
		AST end2_AST = null;
		Token  c2 = null;
		AST c2_AST = null;
		AST e1_AST = null;
		AST wclist2_AST = null;
		Token  end3 = null;
		AST end3_AST = null;
		AST e2_AST = null;
		Token  end4 = null;
		AST end4_AST = null;
		AST ce = astFactory.create(CASE_EXPR,"case_expr");
		
		if ((LA(1)==CASE) && (LA(2)==WHEN)) {
			c1 = LT(1);
			c1_AST = astFactory.create(c1);
			match(CASE);
			{
			when_cond_list();
			wclist_AST = (AST)returnAST;
			}
			{
			switch ( LA(1)) {
			case END:
			{
				end1 = LT(1);
				end1_AST = astFactory.create(end1);
				match(END);
				if ( inputState.guessing==0 ) {
					case_expr_AST = (AST)currentAST.root;
					case_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(ce).add(wclist_AST)); SrcAST.setSpan(case_expr_AST,c1_AST,end1_AST);
					currentAST.root = case_expr_AST;
					currentAST.child = case_expr_AST!=null &&case_expr_AST.getFirstChild()!=null ?
						case_expr_AST.getFirstChild() : case_expr_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			case ELSE:
			{
				AST tmp552_AST = null;
				tmp552_AST = astFactory.create(LT(1));
				match(ELSE);
				expr();
				e_AST = (AST)returnAST;
				end2 = LT(1);
				end2_AST = astFactory.create(end2);
				match(END);
				if ( inputState.guessing==0 ) {
					case_expr_AST = (AST)currentAST.root;
					case_expr_AST = (AST)astFactory.make( (new ASTArray(3)).add(ce).add(wclist_AST).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ELSE_CLAUSE,"else_clause")).add(e_AST)))); 
						  	     SrcAST.setSpan(case_expr_AST,c1_AST,end2_AST);
						  	
					currentAST.root = case_expr_AST;
					currentAST.child = case_expr_AST!=null &&case_expr_AST.getFirstChild()!=null ?
						case_expr_AST.getFirstChild() : case_expr_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		else if ((LA(1)==CASE) && (_tokenSet_41.member(LA(2)))) {
			c2 = LT(1);
			c2_AST = astFactory.create(c2);
			match(CASE);
			expr();
			e1_AST = (AST)returnAST;
			{
			when_cond_list();
			wclist2_AST = (AST)returnAST;
			}
			{
			switch ( LA(1)) {
			case END:
			{
				end3 = LT(1);
				end3_AST = astFactory.create(end3);
				match(END);
				if ( inputState.guessing==0 ) {
					case_expr_AST = (AST)currentAST.root;
					case_expr_AST = (AST)astFactory.make( (new ASTArray(3)).add(ce).add(e1_AST).add(wclist2_AST)); SrcAST.setSpan(case_expr_AST,c2_AST,end3_AST);
					currentAST.root = case_expr_AST;
					currentAST.child = case_expr_AST!=null &&case_expr_AST.getFirstChild()!=null ?
						case_expr_AST.getFirstChild() : case_expr_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			case ELSE:
			{
				AST tmp553_AST = null;
				tmp553_AST = astFactory.create(LT(1));
				match(ELSE);
				expr();
				e2_AST = (AST)returnAST;
				end4 = LT(1);
				end4_AST = astFactory.create(end4);
				match(END);
				if ( inputState.guessing==0 ) {
					case_expr_AST = (AST)currentAST.root;
					case_expr_AST = (AST)astFactory.make( (new ASTArray(4)).add(ce).add(e1_AST).add(wclist2_AST).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ELSE_CLAUSE,"else_clause")).add(e2_AST)))); 
						          SrcAST.setSpan(case_expr_AST,c2_AST,end4_AST);
						
					currentAST.root = case_expr_AST;
					currentAST.child = case_expr_AST!=null &&case_expr_AST.getFirstChild()!=null ?
						case_expr_AST.getFirstChild() : case_expr_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = case_expr_AST;
	}
	
	public final void sub_query() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sub_query_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		lp = LT(1);
		lp_AST = astFactory.create(lp);
		match(LPAREN);
		sub_query1();
		astFactory.addASTChild(currentAST, returnAST);
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			sub_query_AST = (AST)currentAST.root;
			SrcAST.setSpan(sub_query_AST,lp_AST,rp_AST);
		}
		sub_query_AST = (AST)currentAST.root;
		returnAST = sub_query_AST;
	}
	
	public final void basis() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST basis_AST = null;
		AST sn_AST = null;
		Token  c1 = null;
		AST c1_AST = null;
		Token  m1 = null;
		AST m1_AST = null;
		Token  m2 = null;
		AST m2_AST = null;
		Token  s = null;
		AST s_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  d1 = null;
		AST d1_AST = null;
		AST sn2_AST = null;
		Token  d3 = null;
		AST d3_AST = null;
		AST sn3_AST = null;
		Token  d = null;
		AST d_AST = null;
		AST sn1_AST = null;
		AST name = new SrcAST();
		AST name1 = new SrcAST();
		String qnString = "";
		
		
		{
		switch ( LA(1)) {
		case COUNT:
		{
			c1 = LT(1);
			c1_AST = astFactory.create(c1);
			match(COUNT);
			if ( inputState.guessing==0 ) {
				name1 = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SIMPLE_NAME,"SIMPLE_NAME")).add(c1_AST)); SrcAST.setSpan(name1,c1_AST); name1.setText("COUNT");
			}
			break;
		}
		case MAX:
		{
			m1 = LT(1);
			m1_AST = astFactory.create(m1);
			match(MAX);
			if ( inputState.guessing==0 ) {
				name1 = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SIMPLE_NAME,"SIMPLE_NAME")).add(m1_AST)); SrcAST.setSpan(name1,m1_AST); name1.setText("MAX");
			}
			break;
		}
		case MIN:
		{
			m2 = LT(1);
			m2_AST = astFactory.create(m2);
			match(MIN);
			if ( inputState.guessing==0 ) {
				name1 = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SIMPLE_NAME,"SIMPLE_NAME")).add(m2_AST)); SrcAST.setSpan(name1,m2_AST); name1.setText("MIN");
			}
			break;
		}
		case SUM:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SUM);
			if ( inputState.guessing==0 ) {
				name1 = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SIMPLE_NAME,"SIMPLE_NAME")).add(s_AST)); SrcAST.setSpan(name1,s_AST); name1.setText("SUM");
			}
			break;
		}
		case AVG:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(AVG);
			if ( inputState.guessing==0 ) {
				name1 = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SIMPLE_NAME,"SIMPLE_NAME")).add(a_AST)); SrcAST.setSpan(name1,a_AST); name1.setText("AVG");
			}
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				simple_name();
				sn_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					name1 = sn_AST;
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			basis_AST = (AST)currentAST.root;
			basis_AST = name1;
			SrcAST.setSpan(basis_AST,name1);
				   qnString = SrcAST.getText(name1);
				
			currentAST.root = basis_AST;
			currentAST.child = basis_AST!=null &&basis_AST.getFirstChild()!=null ?
				basis_AST.getFirstChild() : basis_AST;
			currentAST.advanceChildToEnd();
		}
		{
		boolean synPredMatched600 = false;
		if (((LA(1)==DOTDOT))) {
			int _m600 = mark();
			synPredMatched600 = true;
			inputState.guessing++;
			try {
				{
				match(DOTDOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched600 = false;
			}
			rewind(_m600);
			inputState.guessing--;
		}
		if ( synPredMatched600 ) {
			d1 = LT(1);
			d1_AST = astFactory.create(d1);
			match(DOTDOT);
			simple_name();
			sn2_AST = (AST)returnAST;
			d3 = LT(1);
			d3_AST = astFactory.create(d3);
			match(DOT);
			simple_name();
			sn3_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				basis_AST = (AST)currentAST.root;
				AST name2 = astFactory.create(SIMPLE_NAME); 
					 		  name2.setText(null);
					 		  qnString = qnString + ".." + SrcAST.getText(sn2_AST) + SrcAST.getText(sn3_AST); 
					 		  basis_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(DOT)).add(basis_AST).add(name2));
					 		  basis_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(DOT)).add(basis_AST).add(sn2_AST));
					 		  basis_AST = (AST)astFactory.make( (new ASTArray(3)).add(d3_AST).add(basis_AST).add(sn3_AST));
					 		  basis_AST.setText(qnString);
					 		
				currentAST.root = basis_AST;
				currentAST.child = basis_AST!=null &&basis_AST.getFirstChild()!=null ?
					basis_AST.getFirstChild() : basis_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_105.member(LA(1)))) {
			{
			_loop602:
			do {
				if ((LA(1)==DOT)) {
					d = LT(1);
					d_AST = astFactory.create(d);
					match(DOT);
					simple_name();
					sn1_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						name = sn1_AST;
					}
					if ( inputState.guessing==0 ) {
						basis_AST = (AST)currentAST.root;
						basis_AST = (AST)astFactory.make( (new ASTArray(3)).add(d_AST).add(basis_AST).add(sn1_AST)); 
								      	qnString = qnString + "." + SrcAST.getText(name);
								        SrcAST.setSpan(basis_AST, name1, name);
								        basis_AST.setText( qnString );
								
						currentAST.root = basis_AST;
						currentAST.child = basis_AST!=null &&basis_AST.getFirstChild()!=null ?
							basis_AST.getFirstChild() : basis_AST;
						currentAST.advanceChildToEnd();
					}
				}
				else {
					break _loop602;
				}
				
			} while (true);
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		returnAST = basis_AST;
	}
	
	public final AST  call_suffix() throws RecognitionException, TokenStreamException {
		AST qualifier;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST call_suffix_AST = null;
		Token  l = null;
		AST l_AST = null;
		Token  st = null;
		AST st_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST args_AST = null;
		Token  r = null;
		AST r_AST = null;
		qualifier=null;
		
		if ((LA(1)==LPAREN) && (_tokenSet_106.member(LA(2)))) {
			qualifier=arg_list();
			astFactory.addASTChild(currentAST, returnAST);
			call_suffix_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==LPAREN) && (LA(2)==STAR)) {
			l = LT(1);
			l_AST = astFactory.create(l);
			match(LPAREN);
			st = LT(1);
			st_AST = astFactory.create(st);
			astFactory.addASTChild(currentAST, st_AST);
			match(STAR);
			{
			switch ( LA(1)) {
			case COMMA:
			{
				c = LT(1);
				c_AST = astFactory.create(c);
				match(COMMA);
				expr_list();
				args_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			r = LT(1);
			r_AST = astFactory.create(r);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				call_suffix_AST = (AST)currentAST.root;
				String text = null;
					                   	if (c!=null)
					                   		text = "(*,"+ SrcAST.getText(args_AST) +")";
					                   	else text = "(*)";
					                   	call_suffix_AST.setText(text);
					                    SrcAST.setSpan(call_suffix_AST, l_AST, r_AST);
					
			}
			call_suffix_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = call_suffix_AST;
		return qualifier;
	}
	
	public final void simple_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_name_AST = null;
		AST si_AST = null;
		AST sn = astFactory.create(SIMPLE_NAME,"SIMPLE_NAME");
			  AST name = null;
			
		
		identifier();
		si_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			simple_name_AST = (AST)currentAST.root;
			name = si_AST;
				    sn.setText(SrcAST.getText(name));
				    SrcAST.setSpan(sn, name);
				    simple_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(sn).add(name));
				
			currentAST.root = simple_name_AST;
			currentAST.child = simple_name_AST!=null &&simple_name_AST.getFirstChild()!=null ?
				simple_name_AST.getFirstChild() : simple_name_AST;
			currentAST.advanceChildToEnd();
		}
		simple_name_AST = (AST)currentAST.root;
		returnAST = simple_name_AST;
	}
	
	public final AST  arg_list() throws RecognitionException, TokenStreamException {
		AST qualifier;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST arg_list_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST e1_AST = null;
		AST e2_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  l4 = null;
		AST l4_AST = null;
		Token  r4 = null;
		AST r4_AST = null;
		String eString = "(";
		AST eList = astFactory.create(EXPR_LIST,"EXPR_LIST");
		qualifier = null;
		AST args = eList;
		String mod = ""; 
		
		
		if ((LA(1)==LPAREN) && (_tokenSet_107.member(LA(2)))) {
			l = LT(1);
			l_AST = astFactory.create(l);
			match(LPAREN);
			{
			switch ( LA(1)) {
			case DISTINCT:
			{
				AST tmp554_AST = null;
				tmp554_AST = astFactory.create(LT(1));
				match(DISTINCT);
				if ( inputState.guessing==0 ) {
					eString = eString + "DISTINCT "; qualifier = astFactory.create(DISTINCT_QUALIF,"DISTINCT_QUALIF");
				}
				break;
			}
			case ALL:
			{
				AST tmp555_AST = null;
				tmp555_AST = astFactory.create(LT(1));
				match(ALL);
				if ( inputState.guessing==0 ) {
					eString = eString + "ALL "; qualifier = astFactory.create(ALL_QUALIF,"ALL_QUALIF");
				}
				break;
			}
			default:
				if ((_tokenSet_41.member(LA(1)))) {
				}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			expr();
			e1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
					eString = eString + SrcAST.getText(e1_AST) ;
						eList.addChild(e1_AST);
				
			}
			{
			_loop609:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp556_AST = null;
					tmp556_AST = astFactory.create(LT(1));
					match(COMMA);
					expr();
					e2_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						eString = eString + ", " + SrcAST.getText(e2_AST);
							                      eList.addChild(e2_AST);
							
					}
				}
				else {
					break _loop609;
				}
				
			} while (true);
			}
			r = LT(1);
			r_AST = astFactory.create(r);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				arg_list_AST = (AST)currentAST.root;
				eString = eString + ")";
				arg_list_AST = args;
					             arg_list_AST.setText( eString );
					             SrcAST.setSpan(arg_list_AST, l_AST, r_AST); 
					
				currentAST.root = arg_list_AST;
				currentAST.child = arg_list_AST!=null &&arg_list_AST.getFirstChild()!=null ?
					arg_list_AST.getFirstChild() : arg_list_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==LPAREN) && (LA(2)==RPAREN)) {
			l4 = LT(1);
			l4_AST = astFactory.create(l4);
			match(LPAREN);
			r4 = LT(1);
			r4_AST = astFactory.create(r4);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				arg_list_AST = (AST)currentAST.root;
				arg_list_AST = eList;
					       arg_list_AST.setText ( "()" ) ;
					       SrcAST.setSpan (arg_list_AST, l4_AST, r4_AST);
					
				currentAST.root = arg_list_AST;
				currentAST.child = arg_list_AST!=null &&arg_list_AST.getFirstChild()!=null ?
					arg_list_AST.getFirstChild() : arg_list_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = arg_list_AST;
		return qualifier;
	}
	
	public final void expr_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST expr_list_AST = null;
		Token  c1 = null;
		AST c1_AST = null;
		AST e1_AST = null;
		AST e2_AST = null;
		AST e_AST = null;
		AST e3_AST = null;
		AST elist = astFactory.create(EXPR_LIST,"expr_list");
		
		if ((LA(1)==COMMA)) {
			c1 = LT(1);
			c1_AST = astFactory.create(c1);
			match(COMMA);
			expr();
			e1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				elist.setText(", " + SrcAST.getText(e1_AST)); elist.setFirstChild(e1_AST);
			}
			{
			_loop635:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					expr();
					e2_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						elist.setText(SrcAST.getText(elist) + ", " + SrcAST.getText(e1_AST)); elist.addChild(e2_AST);
					}
				}
				else {
					break _loop635;
				}
				
			} while (true);
			}
			if ( inputState.guessing==0 ) {
				expr_list_AST = (AST)currentAST.root;
				expr_list_AST = elist;
					  	AST[] left = {c1_AST};
					  	AST[] right = {e1_AST,e2_AST};
					  	SrcAST.setSpan(expr_list_AST,left,right);
					
				currentAST.root = expr_list_AST;
				currentAST.child = expr_list_AST!=null &&expr_list_AST.getFirstChild()!=null ?
					expr_list_AST.getFirstChild() : expr_list_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_41.member(LA(1)))) {
			expr();
			e_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				elist.setFirstChild(e_AST); elist.setText(SrcAST.getText(e_AST));
			}
			{
			_loop637:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					expr();
					e3_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						elist.addChild(e3_AST); elist.setText(SrcAST.getText(elist) + ", " + SrcAST.getText(e3_AST));
					}
				}
				else {
					break _loop637;
				}
				
			} while (true);
			}
			if ( inputState.guessing==0 ) {
				expr_list_AST = (AST)currentAST.root;
				expr_list_AST = elist; 
					    AST[] left = {e_AST};
					  	AST[] right = {e_AST,e3_AST};
					  	SrcAST.setSpan(expr_list_AST,left,right);
					
				currentAST.root = expr_list_AST;
				currentAST.child = expr_list_AST!=null &&expr_list_AST.getFirstChild()!=null ?
					expr_list_AST.getFirstChild() : expr_list_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = expr_list_AST;
	}
	
	public final void when_cond_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST when_cond_list_AST = null;
		
		{
		int _cnt619=0;
		_loop619:
		do {
			if ((LA(1)==WHEN)) {
				when_cond();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				if ( _cnt619>=1 ) { break _loop619; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt619++;
		} while (true);
		}
		when_cond_list_AST = (AST)currentAST.root;
		returnAST = when_cond_list_AST;
	}
	
	public final void when_cond() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST when_cond_AST = null;
		Token  w = null;
		AST w_AST = null;
		AST ce_AST = null;
		AST e_AST = null;
		AST e1_AST = null;
		AST e2_AST = null;
		
		w = LT(1);
		w_AST = astFactory.create(w);
		match(WHEN);
		{
		boolean synPredMatched623 = false;
		if (((_tokenSet_108.member(LA(1))) && (_tokenSet_109.member(LA(2))))) {
			int _m623 = mark();
			synPredMatched623 = true;
			inputState.guessing++;
			try {
				{
				cond_expr();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched623 = false;
			}
			rewind(_m623);
			inputState.guessing--;
		}
		if ( synPredMatched623 ) {
			cond_expr();
			ce_AST = (AST)returnAST;
			AST tmp559_AST = null;
			tmp559_AST = astFactory.create(LT(1));
			match(THEN);
			expr();
			e_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				when_cond_AST = (AST)currentAST.root;
				when_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(WHEN_COND,"when_cond")).add(ce_AST).add(e_AST));
				currentAST.root = when_cond_AST;
				currentAST.child = when_cond_AST!=null &&when_cond_AST.getFirstChild()!=null ?
					when_cond_AST.getFirstChild() : when_cond_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_41.member(LA(1))) && (_tokenSet_110.member(LA(2)))) {
			expr();
			e1_AST = (AST)returnAST;
			AST tmp560_AST = null;
			tmp560_AST = astFactory.create(LT(1));
			match(THEN);
			expr();
			e2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				when_cond_AST = (AST)currentAST.root;
				when_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(WHEN_COND,"when_cond")).add(e1_AST).add(e2_AST));
				currentAST.root = when_cond_AST;
				currentAST.child = when_cond_AST!=null &&when_cond_AST.getFirstChild()!=null ?
					when_cond_AST.getFirstChild() : when_cond_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			when_cond_AST = (AST)currentAST.root;
			AST[] left = {w_AST};
				   	 AST[] right = {e_AST,e2_AST};
				   	 SrcAST.setSpan(when_cond_AST,left,right);
				
		}
		returnAST = when_cond_AST;
	}
	
	public final void or_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST or_expr_AST = null;
		AST ae1_AST = null;
		AST ae_AST = null;
		
		and_expr();
		ae1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop627:
		do {
			if ((LA(1)==OR)) {
				AST tmp561_AST = null;
				tmp561_AST = astFactory.create(LT(1));
				astFactory.makeASTRoot(currentAST, tmp561_AST);
				match(OR);
				and_expr();
				ae_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop627;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			or_expr_AST = (AST)currentAST.root;
			SrcAST.setSpan(or_expr_AST,ae1_AST,ae_AST);
		}
		or_expr_AST = (AST)currentAST.root;
		returnAST = or_expr_AST;
	}
	
	public final void and_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST and_expr_AST = null;
		AST ne1_AST = null;
		AST ne_AST = null;
		
		not_expr();
		ne1_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop630:
		do {
			if ((LA(1)==AND)) {
				AST tmp562_AST = null;
				tmp562_AST = astFactory.create(LT(1));
				astFactory.makeASTRoot(currentAST, tmp562_AST);
				match(AND);
				not_expr();
				ne_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop630;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			and_expr_AST = (AST)currentAST.root;
			SrcAST.setSpan(and_expr_AST,ne1_AST,ne_AST);
		}
		and_expr_AST = (AST)currentAST.root;
		returnAST = and_expr_AST;
	}
	
	public final void not_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST not_expr_AST = null;
		Token  n = null;
		AST n_AST = null;
		AST c_AST = null;
		
		{
		if ((LA(1)==NOT)) {
			n = LT(1);
			n_AST = astFactory.create(n);
			astFactory.addASTChild(currentAST, n_AST);
			match(NOT);
		}
		else if ((_tokenSet_111.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		cond_primary();
		c_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		if ( inputState.guessing==0 ) {
			not_expr_AST = (AST)currentAST.root;
			
				   	  AST[] left = {n_AST,c_AST};
				      AST[] right = {c_AST};
				      SrcAST.setSpan(not_expr_AST,left,right);
				
		}
		not_expr_AST = (AST)currentAST.root;
		returnAST = not_expr_AST;
	}
	
	public final void cond_primary() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cond_primary_AST = null;
		AST e_AST = null;
		AST i_AST = null;
		AST b_AST = null;
		AST n_AST = null;
		AST l_AST = null;
		AST c_AST = null;
		AST ex_AST = null;
		AST u_AST = null;
		AST ce_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		switch ( LA(1)) {
		case EXISTS:
		{
			exists_cond();
			ex_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				cond_primary_AST = (AST)currentAST.root;
				cond_primary_AST = ex_AST;
					      SrcAST.setSpan(cond_primary_AST,e_AST,ex_AST);
					
				currentAST.root = cond_primary_AST;
				currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
					cond_primary_AST.getFirstChild() : cond_primary_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case UPDATE:
		{
			update_cond();
			u_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				cond_primary_AST = (AST)currentAST.root;
				cond_primary_AST = u_AST;
					      SrcAST.setSpan(cond_primary_AST,e_AST,u_AST);
					
				currentAST.root = cond_primary_AST;
				currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
					cond_primary_AST.getFirstChild() : cond_primary_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
			boolean synPredMatched640 = false;
			if (((_tokenSet_41.member(LA(1))) && (_tokenSet_112.member(LA(2))))) {
				int _m640 = mark();
				synPredMatched640 = true;
				inputState.guessing++;
				try {
					{
					expr();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched640 = false;
				}
				rewind(_m640);
				inputState.guessing--;
			}
			if ( synPredMatched640 ) {
				expr();
				e_AST = (AST)returnAST;
				{
				switch ( LA(1)) {
				case IS:
				{
					is_null_cond(e_AST);
					n_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						cond_primary_AST = (AST)currentAST.root;
						cond_primary_AST = n_AST;
						currentAST.root = cond_primary_AST;
						currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
							cond_primary_AST.getFirstChild() : cond_primary_AST;
						currentAST.advanceChildToEnd();
					}
					break;
				}
				case LESS_GREATER:
				case LTE:
				case GTE:
				case NOT_EQUAL:
				case NOT_LESS:
				case NOT_GREATER:
				case EQUAL:
				case LT:
				case GT:
				case LEFT_OUTER_JOIN:
				case RIGHT_OUTER_JOIN:
				{
					comparison_cond(e_AST);
					c_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						cond_primary_AST = (AST)currentAST.root;
						cond_primary_AST = c_AST;
						currentAST.root = cond_primary_AST;
						currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
							cond_primary_AST.getFirstChild() : cond_primary_AST;
						currentAST.advanceChildToEnd();
					}
					break;
				}
				case EOF:
				case DUMP:
				case DEALLOCATE:
				case TRUNCATE:
				case OPEN:
				case FETCH:
				case EXEC:
				case EXECUTE:
				case CREATE:
				case GO:
				case WITH:
				case ON:
				case CHECKPOINT:
				case AND:
				case OR:
				case ALTER:
				case DROP:
				case FOR:
				case SELECT:
				case ELSE:
				case END:
				case HAVING:
				case GROUP:
				case ORDER:
				case COMPUTE:
				case DECLARE:
				case WHERE:
				case UPDATE:
				case DELETE:
				case INSERT:
				case SET:
				case BEGIN:
				case WHILE:
				case BREAK:
				case CONTINUE:
				case GOTO:
				case RETURN:
				case PRINT:
				case RAISERROR:
				case IF:
				case WAITFOR:
				case USE:
				case SETUSER:
				case COMMIT:
				case ROLLBACK:
				case SAVE:
				case CLOSE:
				case GRANT:
				case REVOKE:
				case OPTION:
				case UNION:
				case READTEXT:
				case WRITETEXT:
				case KILL:
				case DBCC:
				case RECONFIGURE:
				case PLAN:
				case JOIN:
				case INNER:
				case LEFT:
				case RIGHT:
				case DENY:
				case FULL:
				case UPDATETEXT:
				case SHUTDOWN:
				case BACKUP:
				case RESTORE:
				case BULK:
				case LOCK:
				case AT:
				case THEN:
				case PRAGMA_ML_COMMENT:
				case PRAGMA_SL_COMMENT:
				case COMMA:
				case SEMI_COLON:
				case LPAREN:
				case RPAREN:
				{
					if ( inputState.guessing==0 ) {
						cond_primary_AST = (AST)currentAST.root;
						cond_primary_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(FUNCTION_CALL,"function_call")).add(e_AST));
						currentAST.root = cond_primary_AST;
						currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
							cond_primary_AST.getFirstChild() : cond_primary_AST;
						currentAST.advanceChildToEnd();
					}
					break;
				}
				default:
					boolean synPredMatched643 = false;
					if (((LA(1)==NOT||LA(1)==IN) && (LA(2)==IN||LA(2)==LPAREN))) {
						int _m643 = mark();
						synPredMatched643 = true;
						inputState.guessing++;
						try {
							{
							switch ( LA(1)) {
							case IN:
							{
								match(IN);
								break;
							}
							case NOT:
							{
								match(NOT);
								match(IN);
								break;
							}
							default:
							{
								throw new NoViableAltException(LT(1), getFilename());
							}
							}
							}
						}
						catch (RecognitionException pe) {
							synPredMatched643 = false;
						}
						rewind(_m643);
						inputState.guessing--;
					}
					if ( synPredMatched643 ) {
						in_cond(e_AST);
						i_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							cond_primary_AST = (AST)currentAST.root;
							cond_primary_AST = i_AST;
							currentAST.root = cond_primary_AST;
							currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
								cond_primary_AST.getFirstChild() : cond_primary_AST;
							currentAST.advanceChildToEnd();
						}
					}
					else {
						boolean synPredMatched645 = false;
						if (((LA(1)==NOT||LA(1)==BETWEEN) && (_tokenSet_113.member(LA(2))))) {
							int _m645 = mark();
							synPredMatched645 = true;
							inputState.guessing++;
							try {
								{
								switch ( LA(1)) {
								case BETWEEN:
								{
									match(BETWEEN);
									break;
								}
								case NOT:
								{
									match(NOT);
									match(BETWEEN);
									break;
								}
								default:
								{
									throw new NoViableAltException(LT(1), getFilename());
								}
								}
								}
							}
							catch (RecognitionException pe) {
								synPredMatched645 = false;
							}
							rewind(_m645);
							inputState.guessing--;
						}
						if ( synPredMatched645 ) {
							between_cond(e_AST);
							b_AST = (AST)returnAST;
							if ( inputState.guessing==0 ) {
								cond_primary_AST = (AST)currentAST.root;
								cond_primary_AST = b_AST;
								currentAST.root = cond_primary_AST;
								currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
									cond_primary_AST.getFirstChild() : cond_primary_AST;
								currentAST.advanceChildToEnd();
							}
						}
						else {
							boolean synPredMatched649 = false;
							if (((LA(1)==NOT||LA(1)==LIKE) && (_tokenSet_114.member(LA(2))))) {
								int _m649 = mark();
								synPredMatched649 = true;
								inputState.guessing++;
								try {
									{
									switch ( LA(1)) {
									case LIKE:
									{
										match(LIKE);
										break;
									}
									case NOT:
									{
										match(NOT);
										match(LIKE);
										break;
									}
									default:
									{
										throw new NoViableAltException(LT(1), getFilename());
									}
									}
									}
								}
								catch (RecognitionException pe) {
									synPredMatched649 = false;
								}
								rewind(_m649);
								inputState.guessing--;
							}
							if ( synPredMatched649 ) {
								like_cond(e_AST);
								l_AST = (AST)returnAST;
								if ( inputState.guessing==0 ) {
									cond_primary_AST = (AST)currentAST.root;
									cond_primary_AST = l_AST;
									currentAST.root = cond_primary_AST;
									currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
										cond_primary_AST.getFirstChild() : cond_primary_AST;
									currentAST.advanceChildToEnd();
								}
							}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						}}}
						}
						if ( inputState.guessing==0 ) {
							//AST[] left = {#e};
								   	 //AST[] right = {#i,#b,#n,#l,#c};
								   	 //SrcAST.setSpan(##,left,right);
								
						}
					}
					else if ((LA(1)==LPAREN) && (_tokenSet_108.member(LA(2)))) {
						AST tmp563_AST = null;
						tmp563_AST = astFactory.create(LT(1));
						match(LPAREN);
						cond_expr();
						ce_AST = (AST)returnAST;
						rp = LT(1);
						rp_AST = astFactory.create(rp);
						match(RPAREN);
						if ( inputState.guessing==0 ) {
							cond_primary_AST = (AST)currentAST.root;
							cond_primary_AST = ce_AST; 
								      SrcAST.setSpan(cond_primary_AST,e_AST,rp_AST);
								
							currentAST.root = cond_primary_AST;
							currentAST.child = cond_primary_AST!=null &&cond_primary_AST.getFirstChild()!=null ?
								cond_primary_AST.getFirstChild() : cond_primary_AST;
							currentAST.advanceChildToEnd();
						}
					}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				returnAST = cond_primary_AST;
			}
			
	public final void in_cond(
		AST e
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST in_cond_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST elist1_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST sq_AST = null;
		Token  n = null;
		AST n_AST = null;
		AST elist2_AST = null;
		Token  rp2 = null;
		AST rp2_AST = null;
		AST sq1_AST = null;
		
		switch ( LA(1)) {
		case IN:
		{
			i = LT(1);
			i_AST = astFactory.create(i);
			match(IN);
			{
			boolean synPredMatched655 = false;
			if (((LA(1)==LPAREN) && (_tokenSet_24.member(LA(2))))) {
				int _m655 = mark();
				synPredMatched655 = true;
				inputState.guessing++;
				try {
					{
					match(LPAREN);
					expr();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched655 = false;
				}
				rewind(_m655);
				inputState.guessing--;
			}
			if ( synPredMatched655 ) {
				AST tmp564_AST = null;
				tmp564_AST = astFactory.create(LT(1));
				match(LPAREN);
				{
				expr_list();
				elist1_AST = (AST)returnAST;
				}
				rp = LT(1);
				rp_AST = astFactory.create(rp);
				match(RPAREN);
				if ( inputState.guessing==0 ) {
					in_cond_AST = (AST)currentAST.root;
					in_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(IN_COND,"in_cond")).add(e).add(elist1_AST));
					currentAST.root = in_cond_AST;
					currentAST.child = in_cond_AST!=null &&in_cond_AST.getFirstChild()!=null ?
						in_cond_AST.getFirstChild() : in_cond_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((LA(1)==LPAREN) && (LA(2)==SELECT||LA(2)==LPAREN)) {
				sub_query();
				sq_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					in_cond_AST = (AST)currentAST.root;
					in_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(IN_COND,"in_cond")).add(e).add(sq_AST));
					currentAST.root = in_cond_AST;
					currentAST.child = in_cond_AST!=null &&in_cond_AST.getFirstChild()!=null ?
						in_cond_AST.getFirstChild() : in_cond_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				in_cond_AST = (AST)currentAST.root;
				AST[] left = {e}; AST[] right = {rp_AST,sq_AST}; SrcAST.setSpan(in_cond_AST,left,right);
			}
			break;
		}
		case NOT:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NOT);
			AST tmp565_AST = null;
			tmp565_AST = astFactory.create(LT(1));
			match(IN);
			{
			boolean synPredMatched659 = false;
			if (((LA(1)==LPAREN) && (_tokenSet_24.member(LA(2))))) {
				int _m659 = mark();
				synPredMatched659 = true;
				inputState.guessing++;
				try {
					{
					match(LPAREN);
					expr();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched659 = false;
				}
				rewind(_m659);
				inputState.guessing--;
			}
			if ( synPredMatched659 ) {
				AST tmp566_AST = null;
				tmp566_AST = astFactory.create(LT(1));
				match(LPAREN);
				{
				expr_list();
				elist2_AST = (AST)returnAST;
				}
				rp2 = LT(1);
				rp2_AST = astFactory.create(rp2);
				match(RPAREN);
				if ( inputState.guessing==0 ) {
					in_cond_AST = (AST)currentAST.root;
					in_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(NOT_IN_COND,"not_in_cond")).add(e).add(elist2_AST));
					currentAST.root = in_cond_AST;
					currentAST.child = in_cond_AST!=null &&in_cond_AST.getFirstChild()!=null ?
						in_cond_AST.getFirstChild() : in_cond_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((LA(1)==LPAREN) && (LA(2)==SELECT||LA(2)==LPAREN)) {
				sub_query();
				sq1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					in_cond_AST = (AST)currentAST.root;
					in_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(NOT_IN_COND,"in_cond")).add(e).add(sq1_AST));
					currentAST.root = in_cond_AST;
					currentAST.child = in_cond_AST!=null &&in_cond_AST.getFirstChild()!=null ?
						in_cond_AST.getFirstChild() : in_cond_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				in_cond_AST = (AST)currentAST.root;
				AST[] left = {e}; AST[] right = {rp2_AST,sq1_AST}; SrcAST.setSpan(in_cond_AST,left,right);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = in_cond_AST;
	}
	
	public final void between_cond(
		AST e
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST between_cond_AST = null;
		Token  b = null;
		AST b_AST = null;
		AST e1_AST = null;
		AST e2_AST = null;
		Token  nb = null;
		AST nb_AST = null;
		AST e3_AST = null;
		AST e4_AST = null;
		
		{
		switch ( LA(1)) {
		case BETWEEN:
		{
			b = LT(1);
			b_AST = astFactory.create(b);
			match(BETWEEN);
			expr();
			e1_AST = (AST)returnAST;
			AST tmp567_AST = null;
			tmp567_AST = astFactory.create(LT(1));
			match(AND);
			expr();
			e2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				between_cond_AST = (AST)currentAST.root;
				between_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(BETWEEN_COND,"between_cond")).add(e).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(AND_CLAUSE,"and_clause")).add(e1_AST).add(e2_AST))));
				currentAST.root = between_cond_AST;
				currentAST.child = between_cond_AST!=null &&between_cond_AST.getFirstChild()!=null ?
					between_cond_AST.getFirstChild() : between_cond_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NOT:
		{
			nb = LT(1);
			nb_AST = astFactory.create(nb);
			match(NOT);
			AST tmp568_AST = null;
			tmp568_AST = astFactory.create(LT(1));
			match(BETWEEN);
			expr();
			e3_AST = (AST)returnAST;
			AST tmp569_AST = null;
			tmp569_AST = astFactory.create(LT(1));
			match(AND);
			expr();
			e4_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				between_cond_AST = (AST)currentAST.root;
				between_cond_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(NOT_BETWEEN_COND,"not_between_cond")).add(e).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(AND_CLAUSE,"and_clause")).add(e3_AST).add(e4_AST))));
				currentAST.root = between_cond_AST;
				currentAST.child = between_cond_AST!=null &&between_cond_AST.getFirstChild()!=null ?
					between_cond_AST.getFirstChild() : between_cond_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			between_cond_AST = (AST)currentAST.root;
			AST[] left = {e}; AST[] right = {e2_AST,e4_AST}; SrcAST.setSpan(between_cond_AST,left,right);
		}
		between_cond_AST = (AST)currentAST.root;
		returnAST = between_cond_AST;
	}
	
	public final void is_null_cond(
		AST e
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_null_cond_AST = null;
		Token  i = null;
		AST i_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  i1 = null;
		AST i1_AST = null;
		Token  n1 = null;
		AST n1_AST = null;
		
		{
		if ((LA(1)==IS) && (LA(2)==NULL)) {
			i = LT(1);
			i_AST = astFactory.create(i);
			match(IS);
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NULL);
			if ( inputState.guessing==0 ) {
				is_null_cond_AST = (AST)currentAST.root;
				is_null_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(IS_NULL_COND,"is_null_cond")).add(e));
				currentAST.root = is_null_cond_AST;
				currentAST.child = is_null_cond_AST!=null &&is_null_cond_AST.getFirstChild()!=null ?
					is_null_cond_AST.getFirstChild() : is_null_cond_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==IS) && (LA(2)==NOT)) {
			i1 = LT(1);
			i1_AST = astFactory.create(i1);
			match(IS);
			AST tmp570_AST = null;
			tmp570_AST = astFactory.create(LT(1));
			match(NOT);
			n1 = LT(1);
			n1_AST = astFactory.create(n1);
			match(NULL);
			if ( inputState.guessing==0 ) {
				is_null_cond_AST = (AST)currentAST.root;
				is_null_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(IS_NOT_NULL_COND,"is_not_null_cond")).add(e));
				currentAST.root = is_null_cond_AST;
				currentAST.child = is_null_cond_AST!=null &&is_null_cond_AST.getFirstChild()!=null ?
					is_null_cond_AST.getFirstChild() : is_null_cond_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			is_null_cond_AST = (AST)currentAST.root;
			AST[] left={e}; AST[] right={n_AST,n1_AST}; SrcAST.setSpan(is_null_cond_AST,left,right);
		}
		is_null_cond_AST = (AST)currentAST.root;
		returnAST = is_null_cond_AST;
	}
	
	public final void like_cond(
		AST e
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST like_cond_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST e1_AST = null;
		AST opt_AST = null;
		Token  nl = null;
		AST nl_AST = null;
		AST e2_AST = null;
		AST opt2_AST = null;
		
		{
		switch ( LA(1)) {
		case LIKE:
		{
			l = LT(1);
			l_AST = astFactory.create(l);
			match(LIKE);
			expr();
			e1_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case ESCAPE:
			{
				escape_opt();
				opt_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case ON:
			case CHECKPOINT:
			case AND:
			case OR:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case JOIN:
			case INNER:
			case LEFT:
			case RIGHT:
			case DENY:
			case FULL:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case THEN:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case COMMA:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				like_cond_AST = (AST)currentAST.root;
				like_cond_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(LIKE_COND,"like_cond")).add(e).add(e1_AST).add(opt_AST));
				currentAST.root = like_cond_AST;
				currentAST.child = like_cond_AST!=null &&like_cond_AST.getFirstChild()!=null ?
					like_cond_AST.getFirstChild() : like_cond_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NOT:
		{
			nl = LT(1);
			nl_AST = astFactory.create(nl);
			match(NOT);
			AST tmp571_AST = null;
			tmp571_AST = astFactory.create(LT(1));
			match(LIKE);
			expr();
			e2_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case ESCAPE:
			{
				escape_opt();
				opt2_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case ON:
			case CHECKPOINT:
			case AND:
			case OR:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case JOIN:
			case INNER:
			case LEFT:
			case RIGHT:
			case DENY:
			case FULL:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case THEN:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case COMMA:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				like_cond_AST = (AST)currentAST.root;
				like_cond_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(NOT_LIKE_COND,"not_like_cond")).add(e).add(e2_AST).add(opt2_AST));
				currentAST.root = like_cond_AST;
				currentAST.child = like_cond_AST!=null &&like_cond_AST.getFirstChild()!=null ?
					like_cond_AST.getFirstChild() : like_cond_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			like_cond_AST = (AST)currentAST.root;
			AST[] left = {e};
				  	AST[] right = {e1_AST,opt_AST,e2_AST,opt2_AST};
				  	SrcAST.setSpan(like_cond_AST,left,right);
				
		}
		like_cond_AST = (AST)currentAST.root;
		returnAST = like_cond_AST;
	}
	
	public final void comparison_op() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST comparison_op_AST = null;
		
		switch ( LA(1)) {
		case EQUAL:
		{
			AST tmp572_AST = null;
			tmp572_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp572_AST);
			match(EQUAL);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case GT:
		{
			AST tmp573_AST = null;
			tmp573_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp573_AST);
			match(GT);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case LT:
		{
			AST tmp574_AST = null;
			tmp574_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp574_AST);
			match(LT);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case GTE:
		{
			AST tmp575_AST = null;
			tmp575_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp575_AST);
			match(GTE);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case LTE:
		{
			AST tmp576_AST = null;
			tmp576_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp576_AST);
			match(LTE);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case LESS_GREATER:
		{
			AST tmp577_AST = null;
			tmp577_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp577_AST);
			match(LESS_GREATER);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case NOT_EQUAL:
		{
			AST tmp578_AST = null;
			tmp578_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp578_AST);
			match(NOT_EQUAL);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case NOT_GREATER:
		{
			AST tmp579_AST = null;
			tmp579_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp579_AST);
			match(NOT_GREATER);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		case NOT_LESS:
		{
			AST tmp580_AST = null;
			tmp580_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp580_AST);
			match(NOT_LESS);
			comparison_op_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = comparison_op_AST;
	}
	
	public final void join_op() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST join_op_AST = null;
		
		switch ( LA(1)) {
		case LEFT_OUTER_JOIN:
		{
			AST tmp581_AST = null;
			tmp581_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp581_AST);
			match(LEFT_OUTER_JOIN);
			join_op_AST = (AST)currentAST.root;
			break;
		}
		case RIGHT_OUTER_JOIN:
		{
			AST tmp582_AST = null;
			tmp582_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp582_AST);
			match(RIGHT_OUTER_JOIN);
			join_op_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = join_op_AST;
	}
	
	public final void comparison_cond(
		AST e
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST comparison_cond_AST = null;
		AST op_AST = null;
		AST e1_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  b = null;
		AST b_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST subq_AST = null;
		AST op1_AST = null;
		AST e2_AST = null;
		AST comparison = null;
		
		switch ( LA(1)) {
		case LESS_GREATER:
		case LTE:
		case GTE:
		case NOT_EQUAL:
		case NOT_LESS:
		case NOT_GREATER:
		case EQUAL:
		case LT:
		case GT:
		{
			comparison_op();
			op_AST = (AST)returnAST;
			{
			if ((_tokenSet_41.member(LA(1)))) {
				expr();
				e1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					comparison_cond_AST = (AST)currentAST.root;
					
						  			comparison = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(SIMPLE_COMPARISON,"simple_comparison")).add(op_AST).add(e).add(e1_AST));
						  			comparison_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COMPARISON_COND,"comparison_cond")).add(comparison)); 
						  		
					currentAST.root = comparison_cond_AST;
					currentAST.child = comparison_cond_AST!=null &&comparison_cond_AST.getFirstChild()!=null ?
						comparison_cond_AST.getFirstChild() : comparison_cond_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_115.member(LA(1)))) {
				{
				switch ( LA(1)) {
				case ANY:
				{
					a = LT(1);
					a_AST = astFactory.create(a);
					match(ANY);
					break;
				}
				case SOME:
				{
					b = LT(1);
					b_AST = astFactory.create(b);
					match(SOME);
					break;
				}
				case ALL:
				{
					c = LT(1);
					c_AST = astFactory.create(c);
					match(ALL);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				sub_query();
				subq_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					comparison_cond_AST = (AST)currentAST.root;
					
						  	     	comparison = (AST)astFactory.make( (new ASTArray(7)).add(astFactory.create(SUBQUERY_COMPARISON,"subquery_comparison")).add(op_AST).add(e).add(a_AST).add(b_AST).add(c_AST).add(subq_AST));
						  	     	comparison_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COMPARISON_COND,"comparison_cond")).add(comparison));
						  	
					currentAST.root = comparison_cond_AST;
					currentAST.child = comparison_cond_AST!=null &&comparison_cond_AST.getFirstChild()!=null ?
						comparison_cond_AST.getFirstChild() : comparison_cond_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				comparison_cond_AST = (AST)currentAST.root;
				AST[] left={e}; AST[] right = {e1_AST,subq_AST}; SrcAST.setSpan(comparison_cond_AST,left,right);
			}
			break;
		}
		case LEFT_OUTER_JOIN:
		case RIGHT_OUTER_JOIN:
		{
			join_op();
			op1_AST = (AST)returnAST;
			expr();
			e2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				comparison_cond_AST = (AST)currentAST.root;
				
					  	 comparison = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(JOIN_COMPARISON,"join_comparison")).add(op1_AST).add(e).add(e2_AST));
					  	 comparison_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(COMPARISON_COND,"comparison_cond")).add(comparison)); 
					  	 SrcAST.setSpan(comparison_cond_AST,e,e2_AST);
					
				currentAST.root = comparison_cond_AST;
				currentAST.child = comparison_cond_AST!=null &&comparison_cond_AST.getFirstChild()!=null ?
					comparison_cond_AST.getFirstChild() : comparison_cond_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = comparison_cond_AST;
	}
	
	public final void exists_cond() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exists_cond_AST = null;
		Token  e = null;
		AST e_AST = null;
		AST subq_AST = null;
		
		e = LT(1);
		e_AST = astFactory.create(e);
		match(EXISTS);
		sub_query();
		subq_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			exists_cond_AST = (AST)currentAST.root;
			exists_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(EXISTS_COND,"exists_cond")).add(subq_AST)); SrcAST.setSpan(exists_cond_AST,e_AST,subq_AST);
			currentAST.root = exists_cond_AST;
			currentAST.child = exists_cond_AST!=null &&exists_cond_AST.getFirstChild()!=null ?
				exists_cond_AST.getFirstChild() : exists_cond_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = exists_cond_AST;
	}
	
	public final void update_cond() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST update_cond_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST c_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		u = LT(1);
		u_AST = astFactory.create(u);
		match(UPDATE);
		AST tmp583_AST = null;
		tmp583_AST = astFactory.create(LT(1));
		match(LPAREN);
		column_name();
		c_AST = (AST)returnAST;
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			update_cond_AST = (AST)currentAST.root;
			update_cond_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UPDATE_COND,"update_cond")).add(c_AST)); SrcAST.setSpan(update_cond_AST,u_AST,rp_AST);
			currentAST.root = update_cond_AST;
			currentAST.child = update_cond_AST!=null &&update_cond_AST.getFirstChild()!=null ?
				update_cond_AST.getFirstChild() : update_cond_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = update_cond_AST;
	}
	
	public final void escape_opt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST escape_opt_AST = null;
		Token  e = null;
		AST e_AST = null;
		AST s_AST = null;
		
		e = LT(1);
		e_AST = astFactory.create(e);
		match(ESCAPE);
		char_string_lit();
		s_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			escape_opt_AST = (AST)currentAST.root;
			escape_opt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ESCAPE_OPT,"escape_opt")).add(s_AST)); SrcAST.setSpan(escape_opt_AST,e_AST,s_AST);
			currentAST.root = escape_opt_AST;
			currentAST.child = escape_opt_AST!=null &&escape_opt_AST.getFirstChild()!=null ?
				escape_opt_AST.getFirstChild() : escape_opt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = escape_opt_AST;
	}
	
	public final void all_or_distinct() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST all_or_distinct_AST = null;
		
		switch ( LA(1)) {
		case ALL:
		{
			AST tmp584_AST = null;
			tmp584_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp584_AST);
			match(ALL);
			all_or_distinct_AST = (AST)currentAST.root;
			break;
		}
		case DISTINCT:
		{
			AST tmp585_AST = null;
			tmp585_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp585_AST);
			match(DISTINCT);
			all_or_distinct_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = all_or_distinct_AST;
	}
	
	public final void aggregate_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST aggregate_expr_AST = null;
		Token  c1 = null;
		AST c1_AST = null;
		Token  rp1 = null;
		AST rp1_AST = null;
		AST ad_AST = null;
		AST ex_AST = null;
		Token  rp2 = null;
		AST rp2_AST = null;
		Token  c2 = null;
		AST c2_AST = null;
		Token  rp3 = null;
		AST rp3_AST = null;
		Token  m1 = null;
		AST m1_AST = null;
		AST e_AST = null;
		Token  rp4 = null;
		AST rp4_AST = null;
		Token  m2 = null;
		AST m2_AST = null;
		AST e1_AST = null;
		Token  rp5 = null;
		AST rp5_AST = null;
		Token  s1 = null;
		AST s1_AST = null;
		AST ad1_AST = null;
		AST e2_AST = null;
		Token  rp6 = null;
		AST rp6_AST = null;
		Token  a1 = null;
		AST a1_AST = null;
		AST ad2_AST = null;
		AST e3_AST = null;
		Token  rp7 = null;
		AST rp7_AST = null;
		AST aggr = astFactory.create(AGGREGATE_EXPR,"aggregate_expr");
		
		{
		switch ( LA(1)) {
		case COUNT:
		{
			c1 = LT(1);
			c1_AST = astFactory.create(c1);
			match(COUNT);
			AST tmp586_AST = null;
			tmp586_AST = astFactory.create(LT(1));
			match(LPAREN);
			{
			if ((LA(1)==STAR)) {
				AST tmp587_AST = null;
				tmp587_AST = astFactory.create(LT(1));
				match(STAR);
				rp1 = LT(1);
				rp1_AST = astFactory.create(rp1);
				match(RPAREN);
				if ( inputState.guessing==0 ) {
					aggregate_expr_AST = (AST)currentAST.root;
					aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add(astFactory.create(COUNT_STAR,"count_star")));
					currentAST.root = aggregate_expr_AST;
					currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
						aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_107.member(LA(1)))) {
				{
				if ((LA(1)==ALL||LA(1)==DISTINCT)) {
					all_or_distinct();
					ad_AST = (AST)returnAST;
				}
				else if ((_tokenSet_41.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				expr();
				ex_AST = (AST)returnAST;
				rp2 = LT(1);
				rp2_AST = astFactory.create(rp2);
				match(RPAREN);
				if ( inputState.guessing==0 ) {
					aggregate_expr_AST = (AST)currentAST.root;
					aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(COUNT_EXPR,"count_expr")).add(ad_AST).add(ex_AST))));
					currentAST.root = aggregate_expr_AST;
					currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
						aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			break;
		}
		case COUNT_BIG:
		{
			c2 = LT(1);
			c2_AST = astFactory.create(c2);
			match(COUNT_BIG);
			AST tmp588_AST = null;
			tmp588_AST = astFactory.create(LT(1));
			match(LPAREN);
			AST tmp589_AST = null;
			tmp589_AST = astFactory.create(LT(1));
			match(STAR);
			rp3 = LT(1);
			rp3_AST = astFactory.create(rp3);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				aggregate_expr_AST = (AST)currentAST.root;
				aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add(astFactory.create(COUNT_BIG_STAR,"count_big_star")));
				currentAST.root = aggregate_expr_AST;
				currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
					aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case MAX:
		{
			m1 = LT(1);
			m1_AST = astFactory.create(m1);
			match(MAX);
			AST tmp590_AST = null;
			tmp590_AST = astFactory.create(LT(1));
			match(LPAREN);
			expr();
			e_AST = (AST)returnAST;
			rp4 = LT(1);
			rp4_AST = astFactory.create(rp4);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				aggregate_expr_AST = (AST)currentAST.root;
				aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(MAX_EXPR,"max_expr")).add(e_AST))));
				currentAST.root = aggregate_expr_AST;
				currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
					aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case MIN:
		{
			m2 = LT(1);
			m2_AST = astFactory.create(m2);
			match(MIN);
			AST tmp591_AST = null;
			tmp591_AST = astFactory.create(LT(1));
			match(LPAREN);
			expr();
			e1_AST = (AST)returnAST;
			rp5 = LT(1);
			rp5_AST = astFactory.create(rp5);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				aggregate_expr_AST = (AST)currentAST.root;
				aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(MIN_EXPR,"min_expr")).add(e1_AST))));
				currentAST.root = aggregate_expr_AST;
				currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
					aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case SUM:
		{
			s1 = LT(1);
			s1_AST = astFactory.create(s1);
			match(SUM);
			AST tmp592_AST = null;
			tmp592_AST = astFactory.create(LT(1));
			match(LPAREN);
			{
			if ((LA(1)==ALL||LA(1)==DISTINCT)) {
				all_or_distinct();
				ad1_AST = (AST)returnAST;
			}
			else if ((_tokenSet_41.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			expr();
			e2_AST = (AST)returnAST;
			rp6 = LT(1);
			rp6_AST = astFactory.create(rp6);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				aggregate_expr_AST = (AST)currentAST.root;
				aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SUM_EXPR,"sum_expr")).add(ad1_AST).add(e2_AST))));
				currentAST.root = aggregate_expr_AST;
				currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
					aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case AVG:
		{
			a1 = LT(1);
			a1_AST = astFactory.create(a1);
			match(AVG);
			AST tmp593_AST = null;
			tmp593_AST = astFactory.create(LT(1));
			match(LPAREN);
			{
			if ((LA(1)==ALL||LA(1)==DISTINCT)) {
				all_or_distinct();
				ad2_AST = (AST)returnAST;
			}
			else if ((_tokenSet_41.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			expr();
			e3_AST = (AST)returnAST;
			rp7 = LT(1);
			rp7_AST = astFactory.create(rp7);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				aggregate_expr_AST = (AST)currentAST.root;
				aggregate_expr_AST = (AST)astFactory.make( (new ASTArray(2)).add(aggr).add((AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(AVG_EXPR,"avg_expr")).add(ad2_AST).add(e3_AST))));
				currentAST.root = aggregate_expr_AST;
				currentAST.child = aggregate_expr_AST!=null &&aggregate_expr_AST.getFirstChild()!=null ?
					aggregate_expr_AST.getFirstChild() : aggregate_expr_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			aggregate_expr_AST = (AST)currentAST.root;
			AST[] left={c1_AST,c2_AST,m1_AST,m2_AST,m1_AST,s1_AST,a1_AST}; AST[] right = {rp1_AST,rp2_AST,rp3_AST,rp4_AST,rp5_AST,rp6_AST,rp7_AST};
				  	SrcAST.setSpan(aggregate_expr_AST,left,right);
				
		}
		returnAST = aggregate_expr_AST;
	}
	
	public final void user_def_func_call_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST user_def_func_call_expr_AST = null;
		AST qfn_AST = null;
		AST elist_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		qual_func_call_name();
		qfn_AST = (AST)returnAST;
		AST tmp594_AST = null;
		tmp594_AST = astFactory.create(LT(1));
		match(LPAREN);
		{
		if ((_tokenSet_24.member(LA(1)))) {
			expr_list();
			elist_AST = (AST)returnAST;
		}
		else if ((LA(1)==RPAREN)) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		rp = LT(1);
		rp_AST = astFactory.create(rp);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			user_def_func_call_expr_AST = (AST)currentAST.root;
			user_def_func_call_expr_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(USER_DEF_FUNC_CALL_EXPR,"user_def_func_call_expr")).add(qfn_AST).add(elist_AST)); 
				  SrcAST.setSpan(user_def_func_call_expr_AST,qfn_AST,rp_AST);
				
			currentAST.root = user_def_func_call_expr_AST;
			currentAST.child = user_def_func_call_expr_AST!=null &&user_def_func_call_expr_AST.getFirstChild()!=null ?
				user_def_func_call_expr_AST.getFirstChild() : user_def_func_call_expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = user_def_func_call_expr_AST;
	}
	
	public final void qual_func_call_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_func_call_name_AST = null;
		AST db_AST = null;
		AST ow_AST = null;
		AST fn_AST = null;
		AST ow2_AST = null;
		AST fn2_AST = null;
		
		boolean synPredMatched688 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m688 = mark();
			synPredMatched688 = true;
			inputState.guessing++;
			try {
				{
				name();
				match(DOT);
				name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched688 = false;
			}
			rewind(_m688);
			inputState.guessing--;
		}
		if ( synPredMatched688 ) {
			database_name();
			db_AST = (AST)returnAST;
			AST tmp595_AST = null;
			tmp595_AST = astFactory.create(LT(1));
			match(DOT);
			owner_name();
			ow_AST = (AST)returnAST;
			AST tmp596_AST = null;
			tmp596_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			fn_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				SrcAST.setSpan(db_AST,fn_AST);
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
			owner_name();
			ow2_AST = (AST)returnAST;
			AST tmp597_AST = null;
			tmp597_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			fn2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_func_call_name_AST = (AST)currentAST.root;
				qual_func_call_name_AST = (AST)astFactory.make( (new ASTArray(6)).add(astFactory.create(QUAL_FUNC_CALL_NAME,"qual_func_call_name")).add(db_AST).add(ow_AST).add(ow2_AST).add(fn_AST).add(fn2_AST)); 
					    SrcAST.setSpan(qual_func_call_name_AST,ow_AST,fn2_AST);
					
				currentAST.root = qual_func_call_name_AST;
				currentAST.child = qual_func_call_name_AST!=null &&qual_func_call_name_AST.getFirstChild()!=null ?
					qual_func_call_name_AST.getFirstChild() : qual_func_call_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = qual_func_call_name_AST;
	}
	
	public final void qual_func_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_func_name_AST = null;
		AST ow_AST = null;
		AST fn_AST = null;
		AST fn2_AST = null;
		
		if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
			name();
			ow_AST = (AST)returnAST;
			AST tmp598_AST = null;
			tmp598_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			fn_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_func_name_AST = (AST)currentAST.root;
				qual_func_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(QUAL_FUNC_NAME,"qual_func_name")).add(ow_AST).add(fn_AST));
					   	 SrcAST.setSpan(qual_func_name_AST,ow_AST,fn_AST);
					
				currentAST.root = qual_func_name_AST;
				currentAST.child = qual_func_name_AST!=null &&qual_func_name_AST.getFirstChild()!=null ?
					qual_func_name_AST.getFirstChild() : qual_func_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (LA(2)==EOF||LA(2)==COMMA)) {
			name();
			fn2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_func_name_AST = (AST)currentAST.root;
				qual_func_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(QUAL_FUNC_NAME,"qual_func_name")).add(fn2_AST)); 
					     SrcAST.setSpan(qual_func_name_AST,fn2_AST);
					
				currentAST.root = qual_func_name_AST;
				currentAST.child = qual_func_name_AST!=null &&qual_func_name_AST.getFirstChild()!=null ?
					qual_func_name_AST.getFirstChild() : qual_func_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = qual_func_name_AST;
	}
	
	public final void qual_func_name_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_func_name_list_AST = null;
		AST q1_AST = null;
		AST q2_AST = null;
		AST flist = astFactory.create(QUAL_FUNC_NAME_LIST,"qual_func_name_list");
		
		qual_func_name();
		q1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			flist.addChild(q1_AST);
		}
		{
		_loop692:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				qual_func_name();
				q2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					flist.addChild(q2_AST);
				}
			}
			else {
				break _loop692;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			qual_func_name_list_AST = (AST)currentAST.root;
			qual_func_name_list_AST = flist; 
				    SrcAST.setSpan(qual_func_name_list_AST,q1_AST,q2_AST);
				
			currentAST.root = qual_func_name_list_AST;
			currentAST.child = qual_func_name_list_AST!=null &&qual_func_name_list_AST.getFirstChild()!=null ?
				qual_func_name_list_AST.getFirstChild() : qual_func_name_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = qual_func_name_list_AST;
	}
	
	public final void plan_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST plan_clause_AST = null;
		
		AST tmp600_AST = null;
		tmp600_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp600_AST);
		match(PLAN);
		char_string_lit();
		astFactory.addASTChild(currentAST, returnAST);
		plan_clause_AST = (AST)currentAST.root;
		returnAST = plan_clause_AST;
	}
	
	public final void distinct_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST distinct_clause_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  d = null;
		AST d_AST = null;
		
		{
		switch ( LA(1)) {
		case ALL:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ALL);
			break;
		}
		case DISTINCT:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			match(DISTINCT);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			distinct_clause_AST = (AST)currentAST.root;
			distinct_clause_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(DISTINCT_CLAUSE,"distinct_clause")).add(a_AST).add(d_AST)); 
				    SrcAST.setSpan(distinct_clause_AST,(a_AST!=null)? a_AST : d_AST);
				
			currentAST.root = distinct_clause_AST;
			currentAST.child = distinct_clause_AST!=null &&distinct_clause_AST.getFirstChild()!=null ?
				distinct_clause_AST.getFirstChild() : distinct_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = distinct_clause_AST;
	}
	
	public final void top_n_percent() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST top_n_percent_AST = null;
		Token  t = null;
		AST t_AST = null;
		AST n_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST w_AST = null;
		
		t = LT(1);
		t_AST = astFactory.create(t);
		match(TOP);
		unsigned_num_int();
		n_AST = (AST)returnAST;
		{
		if ((LA(1)==PERCENT)) {
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PERCENT);
		}
		else if ((_tokenSet_116.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		if ((LA(1)==WITH)) {
			with_identifier();
			w_AST = (AST)returnAST;
		}
		else if ((_tokenSet_117.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			top_n_percent_AST = (AST)currentAST.root;
			top_n_percent_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TOP_N_CLAUSE,"top_n_clause")).add(n_AST).add(p_AST)); 
				  	AST[] left = {t_AST};
				  	AST[] right = {n_AST,p_AST,w_AST};
				    SrcAST.setSpan(top_n_percent_AST,left,right);
				
			currentAST.root = top_n_percent_AST;
			currentAST.child = top_n_percent_AST!=null &&top_n_percent_AST.getFirstChild()!=null ?
				top_n_percent_AST.getFirstChild() : top_n_percent_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = top_n_percent_AST;
	}
	
	public final void variable_assignment_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_assignment_list_AST = null;
		AST v1_AST = null;
		AST v_AST = null;
		AST vlist = astFactory.create(VARIABLE_ASSIGNMENT_LIST,"variable_assignment_list");
		
		variable_assignment();
		v1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			vlist.addChild(v1_AST);
		}
		{
		_loop735:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp601_AST = null;
				tmp601_AST = astFactory.create(LT(1));
				match(COMMA);
				variable_assignment();
				v_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					vlist.addChild(v_AST);
				}
			}
			else {
				break _loop735;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			variable_assignment_list_AST = (AST)currentAST.root;
			variable_assignment_list_AST = vlist; 
				  SrcAST.setSpan(variable_assignment_list_AST,v1_AST,v_AST);
				
			currentAST.root = variable_assignment_list_AST;
			currentAST.child = variable_assignment_list_AST!=null &&variable_assignment_list_AST.getFirstChild()!=null ?
				variable_assignment_list_AST.getFirstChild() : variable_assignment_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = variable_assignment_list_AST;
	}
	
	public final void single_row_pragma() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST single_row_pragma_AST = null;
		
		AST tmp602_AST = null;
		tmp602_AST = astFactory.create(LT(1));
		match(SINGLE_ROW);
		AST tmp603_AST = null;
		tmp603_AST = astFactory.create(LT(1));
		match(LPAREN);
		AST tmp604_AST = null;
		tmp604_AST = astFactory.create(LT(1));
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			single_row_pragma_AST = (AST)currentAST.root;
			single_row_pragma_AST = astFactory.create(SINGLE_ROW_PRAGMA,"single_row_pragma");
			currentAST.root = single_row_pragma_AST;
			currentAST.child = single_row_pragma_AST!=null &&single_row_pragma_AST.getFirstChild()!=null ?
				single_row_pragma_AST.getFirstChild() : single_row_pragma_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = single_row_pragma_AST;
	}
	
	public final void from_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST from_clause_AST = null;
		Token  f = null;
		AST f_AST = null;
		AST fe_AST = null;
		
		f = LT(1);
		f_AST = astFactory.create(f);
		match(FROM);
		from_elem_list();
		fe_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			from_clause_AST = (AST)currentAST.root;
			from_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(FROM_CLAUSE,"from_clause")).add(fe_AST)); SrcAST.setSpan(from_clause_AST,f_AST,fe_AST);
			currentAST.root = from_clause_AST;
			currentAST.child = from_clause_AST!=null &&from_clause_AST.getFirstChild()!=null ?
				from_clause_AST.getFirstChild() : from_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = from_clause_AST;
	}
	
	public final void where_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST where_clause_AST = null;
		Token  w = null;
		AST w_AST = null;
		AST cond_AST = null;
		
		w = LT(1);
		w_AST = astFactory.create(w);
		match(WHERE);
		cond_expr();
		cond_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			where_clause_AST = (AST)currentAST.root;
			where_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(WHERE_CLAUSE,"where_clause")).add(cond_AST)); SrcAST.setSpan(where_clause_AST,w_AST,cond_AST);
			currentAST.root = where_clause_AST;
			currentAST.child = where_clause_AST!=null &&where_clause_AST.getFirstChild()!=null ?
				where_clause_AST.getFirstChild() : where_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = where_clause_AST;
	}
	
	public final void group_by_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST group_by_clause_AST = null;
		Token  g = null;
		AST g_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST elist_AST = null;
		AST c_AST = null;
		
		g = LT(1);
		g_AST = astFactory.create(g);
		match(GROUP);
		AST tmp605_AST = null;
		tmp605_AST = astFactory.create(LT(1));
		match(BY);
		{
		if ((LA(1)==ALL)) {
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ALL);
		}
		else if ((_tokenSet_24.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		expr_list();
		elist_AST = (AST)returnAST;
		{
		boolean synPredMatched800 = false;
		if (((LA(1)==WITH) && (LA(2)==CUBE||LA(2)==ROLLUP))) {
			int _m800 = mark();
			synPredMatched800 = true;
			inputState.guessing++;
			try {
				{
				cube_rollup();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched800 = false;
			}
			rewind(_m800);
			inputState.guessing--;
		}
		if ( synPredMatched800 ) {
			cube_rollup();
			c_AST = (AST)returnAST;
		}
		else if ((_tokenSet_118.member(LA(1))) && (_tokenSet_119.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			group_by_clause_AST = (AST)currentAST.root;
			group_by_clause_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(GROUP_BY_CLAUSE,"group_by_clause")).add(a_AST).add(elist_AST)); 
				    SrcAST.setSpan(group_by_clause_AST,g_AST,(c_AST!=null)? c_AST : elist_AST);
				
			currentAST.root = group_by_clause_AST;
			currentAST.child = group_by_clause_AST!=null &&group_by_clause_AST.getFirstChild()!=null ?
				group_by_clause_AST.getFirstChild() : group_by_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = group_by_clause_AST;
	}
	
	public final void having_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST having_clause_AST = null;
		Token  h = null;
		AST h_AST = null;
		AST cond_AST = null;
		
		h = LT(1);
		h_AST = astFactory.create(h);
		match(HAVING);
		cond_expr();
		cond_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			having_clause_AST = (AST)currentAST.root;
			having_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(HAVING_CLAUSE,"having_clause")).add(cond_AST)); SrcAST.setSpan(having_clause_AST,h_AST,cond_AST);
			currentAST.root = having_clause_AST;
			currentAST.child = having_clause_AST!=null &&having_clause_AST.getFirstChild()!=null ?
				having_clause_AST.getFirstChild() : having_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = having_clause_AST;
	}
	
	public final void order_by_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST order_by_clause_AST = null;
		Token  o = null;
		AST o_AST = null;
		AST ol_AST = null;
		
		o = LT(1);
		o_AST = astFactory.create(o);
		match(ORDER);
		AST tmp606_AST = null;
		tmp606_AST = astFactory.create(LT(1));
		match(BY);
		order_spec_list();
		ol_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			order_by_clause_AST = (AST)currentAST.root;
			order_by_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ORDER_BY_CLAUSE,"order_by_clause")).add(ol_AST)); 
				  SrcAST.setSpan(order_by_clause_AST,o_AST,ol_AST);
				
			currentAST.root = order_by_clause_AST;
			currentAST.child = order_by_clause_AST!=null &&order_by_clause_AST.getFirstChild()!=null ?
				order_by_clause_AST.getFirstChild() : order_by_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = order_by_clause_AST;
	}
	
	public final void compute_clause_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST compute_clause_list_AST = null;
		AST cc_AST = null;
		AST ast = astFactory.create(COMPUTE_CLAUSE,"compute_clause");
		
		{
		int _cnt732=0;
		_loop732:
		do {
			if ((LA(1)==COMPUTE)) {
				compute_clause();
				cc_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					ast.addChild(cc_AST);
				}
			}
			else {
				if ( _cnt732>=1 ) { break _loop732; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt732++;
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			compute_clause_list_AST = (AST)currentAST.root;
			compute_clause_list_AST = ast; SrcAST.setSpan(compute_clause_list_AST,compute_clause_list_AST.getFirstChild(),cc_AST);
			currentAST.root = compute_clause_list_AST;
			currentAST.child = compute_clause_list_AST!=null &&compute_clause_list_AST.getFirstChild()!=null ?
				compute_clause_list_AST.getFirstChild() : compute_clause_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = compute_clause_list_AST;
	}
	
	public final void for_readonly() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_readonly_AST = null;
		Token  f = null;
		AST f_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  f1 = null;
		AST f1_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST qclist_AST = null;
		AST for_readonly = (AST)astFactory.make( (new ASTArray(1)).add(astFactory.create(UPDATE_CLAUSE,"update_clause")));
		
		if ((LA(1)==FOR) && (LA(2)==READ)) {
			f = LT(1);
			f_AST = astFactory.create(f);
			match(FOR);
			AST tmp607_AST = null;
			tmp607_AST = astFactory.create(LT(1));
			match(READ);
			o = LT(1);
			o_AST = astFactory.create(o);
			match(ONLY);
			if ( inputState.guessing==0 ) {
				for_readonly_AST = (AST)currentAST.root;
				for_readonly.addChild (astFactory.create(READONLY,"readonly"));
					  for_readonly_AST = for_readonly;
					  SrcAST.setSpan(for_readonly_AST,f_AST,o_AST);
					
				currentAST.root = for_readonly_AST;
				currentAST.child = for_readonly_AST!=null &&for_readonly_AST.getFirstChild()!=null ?
					for_readonly_AST.getFirstChild() : for_readonly_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==FOR) && (LA(2)==UPDATE)) {
			f1 = LT(1);
			f1_AST = astFactory.create(f1);
			match(FOR);
			u = LT(1);
			u_AST = astFactory.create(u);
			match(UPDATE);
			{
			switch ( LA(1)) {
			case OF:
			{
				AST tmp608_AST = null;
				tmp608_AST = astFactory.create(LT(1));
				match(OF);
				qual_column_name_list();
				qclist_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				for_readonly_AST = (AST)currentAST.root;
				for_readonly.addChild((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(UPDATE_LIST,"update_list")).add(qclist_AST)));
					   for_readonly_AST = for_readonly;
					   SrcAST.setSpan(for_readonly_AST,f1_AST,(qclist_AST!=null)? qclist_AST : u_AST);
					
				currentAST.root = for_readonly_AST;
				currentAST.child = for_readonly_AST!=null &&for_readonly_AST.getFirstChild()!=null ?
					for_readonly_AST.getFirstChild() : for_readonly_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = for_readonly_AST;
	}
	
	public final void at_isolation_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST at_isolation_clause_AST = null;
		
		AST tmp609_AST = null;
		tmp609_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp609_AST);
		match(AT);
		AST tmp610_AST = null;
		tmp610_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp610_AST);
		match(ISOLATION);
		isolation_level();
		astFactory.addASTChild(currentAST, returnAST);
		at_isolation_clause_AST = (AST)currentAST.root;
		returnAST = at_isolation_clause_AST;
	}
	
	public final void for_browse() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_browse_AST = null;
		
		if ((LA(1)==FOR) && (LA(2)==BROWSE)) {
			AST tmp611_AST = null;
			tmp611_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp611_AST);
			match(FOR);
			AST tmp612_AST = null;
			tmp612_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp612_AST);
			match(BROWSE);
			for_browse_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==FOR) && (LA(2)==XML)) {
			AST tmp613_AST = null;
			tmp613_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp613_AST);
			match(FOR);
			{
			AST tmp614_AST = null;
			tmp614_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp614_AST);
			match(XML);
			{
			switch ( LA(1)) {
			case RAW:
			{
				AST tmp615_AST = null;
				tmp615_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp615_AST);
				match(RAW);
				break;
			}
			case AUTO:
			{
				AST tmp616_AST = null;
				tmp616_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp616_AST);
				match(AUTO);
				break;
			}
			case INSERT:
			{
				AST tmp617_AST = null;
				tmp617_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp617_AST);
				match(INSERT);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			}
			{
			_loop907:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp618_AST = null;
					tmp618_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp618_AST);
					match(COMMA);
					{
					switch ( LA(1)) {
					case XMLDATA:
					{
						AST tmp619_AST = null;
						tmp619_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp619_AST);
						match(XMLDATA);
						break;
					}
					case ELEMENTS:
					{
						AST tmp620_AST = null;
						tmp620_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp620_AST);
						match(ELEMENTS);
						break;
					}
					case BINARY:
					{
						AST tmp621_AST = null;
						tmp621_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp621_AST);
						match(BINARY);
						unsigned_num_int();
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
				}
				else {
					break _loop907;
				}
				
			} while (true);
			}
			for_browse_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = for_browse_AST;
	}
	
	public final void option_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST option_clause_AST = null;
		
		AST tmp622_AST = null;
		tmp622_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp622_AST);
		match(OPTION);
		AST tmp623_AST = null;
		tmp623_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp623_AST);
		match(LPAREN);
		option_item();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop914:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				option_item();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop914;
			}
			
		} while (true);
		}
		AST tmp625_AST = null;
		tmp625_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp625_AST);
		match(RPAREN);
		option_clause_AST = (AST)currentAST.root;
		returnAST = option_clause_AST;
	}
	
	public final void select_stmt_head() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST select_stmt_head_AST = null;
		Token  s = null;
		AST s_AST = null;
		AST pr_AST = null;
		AST d_AST = null;
		AST tnp_AST = null;
		AST sl_AST = null;
		AST i_AST = null;
		AST f_AST = null;
		AST w_AST = null;
		AST g_AST = null;
		AST h_AST = null;
		AST un_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST sh_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST ul_AST = null;
		
		switch ( LA(1)) {
		case SELECT:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SELECT);
			{
			boolean synPredMatched749 = false;
			if (((LA(1)==SINGLE_ROW) && (LA(2)==LPAREN))) {
				int _m749 = mark();
				synPredMatched749 = true;
				inputState.guessing++;
				try {
					{
					single_row_pragma();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched749 = false;
				}
				rewind(_m749);
				inputState.guessing--;
			}
			if ( synPredMatched749 ) {
				single_row_pragma();
				pr_AST = (AST)returnAST;
			}
			else if ((_tokenSet_120.member(LA(1))) && (_tokenSet_121.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==ALL||LA(1)==DISTINCT)) {
				distinct_clause();
				d_AST = (AST)returnAST;
			}
			else if ((_tokenSet_122.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==TOP)) {
				top_n_percent();
				tnp_AST = (AST)returnAST;
			}
			else if ((_tokenSet_117.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			select_elem_list();
			sl_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case INTO:
			{
				into_clause();
				i_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case FROM:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case FROM:
			{
				from_clause();
				f_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WHERE:
			{
				where_clause();
				w_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case GROUP:
			{
				group_by_clause();
				g_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case HAVING:
			{
				having_clause();
				h_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case UNION:
			{
				union_list();
				un_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				select_stmt_head_AST = (AST)currentAST.root;
				select_stmt_head_AST = (AST)astFactory.make( (new ASTArray(11)).add(astFactory.create(ORDINARY_SELECT,"ordinary_select")).add(pr_AST).add(d_AST).add(tnp_AST).add(sl_AST).add(i_AST).add(f_AST).add(w_AST).add(g_AST).add(h_AST).add(un_AST)); 
					    AST[] left = {s_AST}; AST[] right = {sl_AST,i_AST,f_AST,w_AST,g_AST,h_AST,un_AST};
					    SrcAST.setSpan(select_stmt_head_AST,left,right);
					
				currentAST.root = select_stmt_head_AST;
				currentAST.child = select_stmt_head_AST!=null &&select_stmt_head_AST.getFirstChild()!=null ?
					select_stmt_head_AST.getFirstChild() : select_stmt_head_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case LPAREN:
		{
			lp = LT(1);
			lp_AST = astFactory.create(lp);
			match(LPAREN);
			select_stmt_head();
			sh_AST = (AST)returnAST;
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
			{
			switch ( LA(1)) {
			case UNION:
			{
				union_list();
				ul_AST = (AST)returnAST;
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				select_stmt_head_AST = (AST)currentAST.root;
				
					  	 if(ul_AST!=null)
					  		 select_stmt_head_AST = merge_union_list(sh_AST,ul_AST);
					  	 else 
					  		 select_stmt_head_AST = sh_AST; 
					  		 
					  	SrcAST.setSpan(select_stmt_head_AST,lp_AST,(ul_AST!=null)? ul_AST : rp_AST);
					
				currentAST.root = select_stmt_head_AST;
				currentAST.child = select_stmt_head_AST!=null &&select_stmt_head_AST.getFirstChild()!=null ?
					select_stmt_head_AST.getFirstChild() : select_stmt_head_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = select_stmt_head_AST;
	}
	
	public final void variable_or_cursor_assignment() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_or_cursor_assignment_AST = null;
		
		boolean synPredMatched739 = false;
		if (((LA(1)==AT_IDENT) && (LA(2)==EQUAL))) {
			int _m739 = mark();
			synPredMatched739 = true;
			inputState.guessing++;
			try {
				{
				match(AT_IDENT);
				match(EQUAL);
				match(CURSOR);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched739 = false;
			}
			rewind(_m739);
			inputState.guessing--;
		}
		if ( synPredMatched739 ) {
			cursor_assignment();
			astFactory.addASTChild(currentAST, returnAST);
			variable_or_cursor_assignment_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==AT_IDENT) && (LA(2)==EQUAL)) {
			variable_assignment();
			astFactory.addASTChild(currentAST, returnAST);
			variable_or_cursor_assignment_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = variable_or_cursor_assignment_AST;
	}
	
	public final void compute_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST compute_clause_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST el_AST = null;
		AST bel_AST = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		astFactory.addASTChild(currentAST, c_AST);
		match(COMPUTE);
		{
		expr_list();
		el_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		}
		{
		switch ( LA(1)) {
		case BY:
		{
			AST tmp626_AST = null;
			tmp626_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp626_AST);
			match(BY);
			expr_list();
			bel_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case COMPUTE:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case OPTION:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case PLAN:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case AT:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			compute_clause_AST = (AST)currentAST.root;
			AST[] left = {c_AST};
				     AST[] right = {el_AST,bel_AST};
				     SrcAST.setSpan(compute_clause_AST,left,right);
				
		}
		compute_clause_AST = (AST)currentAST.root;
		returnAST = compute_clause_AST;
	}
	
	public final void variable_assignment() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_assignment_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST e_AST = null;
		
		i = LT(1);
		i_AST = astFactory.create(i);
		match(AT_IDENT);
		AST tmp627_AST = null;
		tmp627_AST = astFactory.create(LT(1));
		match(EQUAL);
		expr();
		e_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			variable_assignment_AST = (AST)currentAST.root;
			variable_assignment_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(VAR_EXPR_ASSIGN,"var_expr_assign")).add(i_AST).add(e_AST));
				  	SrcAST.setSpan(variable_assignment_AST,i_AST,e_AST);
				
			currentAST.root = variable_assignment_AST;
			currentAST.child = variable_assignment_AST!=null &&variable_assignment_AST.getFirstChild()!=null ?
				variable_assignment_AST.getFirstChild() : variable_assignment_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = variable_assignment_AST;
	}
	
	public final void cursor_assignment() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cursor_assignment_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST opt_AST = null;
		AST sel_AST = null;
		
		i = LT(1);
		i_AST = astFactory.create(i);
		match(AT_IDENT);
		AST tmp628_AST = null;
		tmp628_AST = astFactory.create(LT(1));
		match(EQUAL);
		AST tmp629_AST = null;
		tmp629_AST = astFactory.create(LT(1));
		match(CURSOR);
		sql_server_cursor_variable_options();
		opt_AST = (AST)returnAST;
		AST tmp630_AST = null;
		tmp630_AST = astFactory.create(LT(1));
		match(FOR);
		select_stmt();
		sel_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			cursor_assignment_AST = (AST)currentAST.root;
			cursor_assignment_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(VAR_CURSOR_ASSIGN,"var_cursor_assign")).add(i_AST).add(sel_AST).add(opt_AST)); 
			SrcAST.setSpan(cursor_assignment_AST,i_AST,sel_AST);
			
			currentAST.root = cursor_assignment_AST;
			currentAST.child = cursor_assignment_AST!=null &&cursor_assignment_AST.getFirstChild()!=null ?
				cursor_assignment_AST.getFirstChild() : cursor_assignment_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = cursor_assignment_AST;
	}
	
	public final void sql_server_cursor_variable_options() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sql_server_cursor_variable_options_AST = null;
		Token  k1 = null;
		AST k1_AST = null;
		Token  k2 = null;
		AST k2_AST = null;
		Token  k3 = null;
		AST k3_AST = null;
		Token  k4 = null;
		AST k4_AST = null;
		Token  k5 = null;
		AST k5_AST = null;
		Token  k6 = null;
		AST k6_AST = null;
		Token  k7 = null;
		AST k7_AST = null;
		Token  k8 = null;
		AST k8_AST = null;
		Token  k9 = null;
		AST k9_AST = null;
		Token  k10 = null;
		AST k10_AST = null;
		
		{
		switch ( LA(1)) {
		case FORWARD_ONLY:
		{
			k1 = LT(1);
			k1_AST = astFactory.create(k1);
			match(FORWARD_ONLY);
			break;
		}
		case SCROLL:
		{
			k2 = LT(1);
			k2_AST = astFactory.create(k2);
			match(SCROLL);
			break;
		}
		case FOR:
		case DYNAMIC:
		case FAST_FORWARD:
		case KEYSET:
		case OPTIMISTIC:
		case READ_ONLY:
		case STATIC:
		case TYPE_WARNING:
		case LITERAL_scroll_locks:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case STATIC:
		{
			k3 = LT(1);
			k3_AST = astFactory.create(k3);
			match(STATIC);
			break;
		}
		case KEYSET:
		{
			k4 = LT(1);
			k4_AST = astFactory.create(k4);
			match(KEYSET);
			break;
		}
		case DYNAMIC:
		{
			k5 = LT(1);
			k5_AST = astFactory.create(k5);
			match(DYNAMIC);
			break;
		}
		case FAST_FORWARD:
		{
			k6 = LT(1);
			k6_AST = astFactory.create(k6);
			match(FAST_FORWARD);
			break;
		}
		case FOR:
		case OPTIMISTIC:
		case READ_ONLY:
		case TYPE_WARNING:
		case LITERAL_scroll_locks:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case READ_ONLY:
		{
			k7 = LT(1);
			k7_AST = astFactory.create(k7);
			match(READ_ONLY);
			break;
		}
		case LITERAL_scroll_locks:
		{
			k8 = LT(1);
			k8_AST = astFactory.create(k8);
			match(LITERAL_scroll_locks);
			break;
		}
		case OPTIMISTIC:
		{
			k9 = LT(1);
			k9_AST = astFactory.create(k9);
			match(OPTIMISTIC);
			break;
		}
		case FOR:
		case TYPE_WARNING:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case TYPE_WARNING:
		{
			k10 = LT(1);
			k10_AST = astFactory.create(k10);
			match(TYPE_WARNING);
			break;
		}
		case FOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			sql_server_cursor_variable_options_AST = (AST)currentAST.root;
			sql_server_cursor_variable_options_AST =  (AST)astFactory.make( (new ASTArray(11)).add(astFactory.create(CURSOR_VAR_OPTION_LIST,"cursor_var_option_list")).add(k1_AST).add(k2_AST).add(k3_AST).add(k4_AST).add(k5_AST).add(k6_AST).add(k7_AST).add(k8_AST).add(k9_AST).add(k10_AST));
				    AST[] left = { k1_AST,k2_AST,k3_AST,k4_AST,k5_AST,k6_AST,k7_AST,k8_AST,k9_AST,k10_AST };
				    SrcAST.setSpan(sql_server_cursor_variable_options_AST,left,left);
				
			currentAST.root = sql_server_cursor_variable_options_AST;
			currentAST.child = sql_server_cursor_variable_options_AST!=null &&sql_server_cursor_variable_options_AST.getFirstChild()!=null ?
				sql_server_cursor_variable_options_AST.getFirstChild() : sql_server_cursor_variable_options_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = sql_server_cursor_variable_options_AST;
	}
	
	public final void select_elem_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST select_elem_list_AST = null;
		AST s1_AST = null;
		AST s_AST = null;
		AST se_list = astFactory.create(SELECT_ELEM_LIST,"select_elem_list");
		
		select_elem();
		s1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			se_list.addChild(s1_AST);
		}
		{
		_loop775:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp631_AST = null;
				tmp631_AST = astFactory.create(LT(1));
				match(COMMA);
				select_elem();
				s_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					se_list.addChild(s_AST);
				}
			}
			else {
				break _loop775;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			select_elem_list_AST = (AST)currentAST.root;
			select_elem_list_AST = se_list;
			currentAST.root = select_elem_list_AST;
			currentAST.child = select_elem_list_AST!=null &&select_elem_list_AST.getFirstChild()!=null ?
				select_elem_list_AST.getFirstChild() : select_elem_list_AST;
			currentAST.advanceChildToEnd();
		}
		if ( inputState.guessing==0 ) {
			select_elem_list_AST = (AST)currentAST.root;
			SrcAST.setSpan(select_elem_list_AST,s1_AST,s_AST);
		}
		returnAST = select_elem_list_AST;
	}
	
	public final void into_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST into_clause_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST tname_AST = null;
		AST l_AST = null;
		AST w_AST = null;
		
		i = LT(1);
		i_AST = astFactory.create(i);
		match(INTO);
		qualified_table_name();
		tname_AST = (AST)returnAST;
		{
		boolean synPredMatched790 = false;
		if (((LA(1)==LOCK) && (_tokenSet_18.member(LA(2))))) {
			int _m790 = mark();
			synPredMatched790 = true;
			inputState.guessing++;
			try {
				{
				lock_clause();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched790 = false;
			}
			rewind(_m790);
			inputState.guessing--;
		}
		if ( synPredMatched790 ) {
			lock_clause();
			l_AST = (AST)returnAST;
		}
		else if ((_tokenSet_123.member(LA(1))) && (_tokenSet_124.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		boolean synPredMatched793 = false;
		if (((LA(1)==WITH) && (_tokenSet_72.member(LA(2))))) {
			int _m793 = mark();
			synPredMatched793 = true;
			inputState.guessing++;
			try {
				{
				with_clause();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched793 = false;
			}
			rewind(_m793);
			inputState.guessing--;
		}
		if ( synPredMatched793 ) {
			with_clause();
			w_AST = (AST)returnAST;
		}
		else if ((_tokenSet_123.member(LA(1))) && (_tokenSet_125.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			into_clause_AST = (AST)currentAST.root;
			into_clause_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(INTO_CLAUSE,"into_clause")).add(tname_AST)); 
				    AST[] left = {i_AST}; AST[] right = {l_AST,w_AST}; SrcAST.setSpan(into_clause_AST,left,right);
				
			currentAST.root = into_clause_AST;
			currentAST.child = into_clause_AST!=null &&into_clause_AST.getFirstChild()!=null ?
				into_clause_AST.getFirstChild() : into_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = into_clause_AST;
	}
	
	public final void union_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST union_list_AST = null;
		AST u_AST = null;
		AST u_list = astFactory.create(UNION_LIST,"union_list"); SpanInfo span = new SpanInfo();
		
		{
		int _cnt870=0;
		_loop870:
		do {
			if ((LA(1)==UNION)) {
				union_stmt(u_list);
				u_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					span.joinSpanInfo(((SrcAST)u_AST).getNodeInfo());
				}
			}
			else {
				if ( _cnt870>=1 ) { break _loop870; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt870++;
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			union_list_AST = (AST)currentAST.root;
			union_list_AST = u_list; 
				    SrcAST.setSpan(union_list_AST,u_AST);
				
			currentAST.root = union_list_AST;
			currentAST.child = union_list_AST!=null &&union_list_AST.getFirstChild()!=null ?
				union_list_AST.getFirstChild() : union_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = union_list_AST;
	}
	
	public final void sub_query1() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sub_query1_AST = null;
		AST sq_AST = null;
		AST ul_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST sq1_AST = null;
		AST ul1_AST = null;
		
		switch ( LA(1)) {
		case SELECT:
		{
			sub_query_base();
			sq_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case UNION:
			{
				union_list();
				ul_AST = (AST)returnAST;
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				sub_query1_AST = (AST)currentAST.root;
				
					  	if(ul_AST!=null)
					  		 sub_query1_AST = merge_union_list(sq_AST,ul_AST);
					  	 else 
					         sub_query1_AST = sq_AST; 
					   
					    SrcAST.setSpan(sub_query1_AST,sq_AST,ul_AST);
					
				currentAST.root = sub_query1_AST;
				currentAST.child = sub_query1_AST!=null &&sub_query1_AST.getFirstChild()!=null ?
					sub_query1_AST.getFirstChild() : sub_query1_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case LPAREN:
		{
			lp = LT(1);
			lp_AST = astFactory.create(lp);
			match(LPAREN);
			sub_query1();
			sq1_AST = (AST)returnAST;
			AST tmp632_AST = null;
			tmp632_AST = astFactory.create(LT(1));
			match(RPAREN);
			union_list();
			ul1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				sub_query1_AST = (AST)currentAST.root;
				sub_query1_AST = merge_union_list (sq1_AST,ul1_AST); 
					    SrcAST.setSpan(sub_query1_AST,lp_AST,ul1_AST);
					
				currentAST.root = sub_query1_AST;
				currentAST.child = sub_query1_AST!=null &&sub_query1_AST.getFirstChild()!=null ?
					sub_query1_AST.getFirstChild() : sub_query1_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = sub_query1_AST;
	}
	
	public final void sub_query_base() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sub_query_base_AST = null;
		Token  s = null;
		AST s_AST = null;
		AST d_AST = null;
		AST tnp_AST = null;
		AST elems_AST = null;
		AST f_AST = null;
		AST w_AST = null;
		AST g_AST = null;
		AST h_AST = null;
		AST o_AST = null;
		
		s = LT(1);
		s_AST = astFactory.create(s);
		match(SELECT);
		{
		if ((LA(1)==ALL||LA(1)==DISTINCT)) {
			distinct_clause();
			d_AST = (AST)returnAST;
		}
		else if ((_tokenSet_122.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		if ((LA(1)==TOP)) {
			top_n_percent();
			tnp_AST = (AST)returnAST;
		}
		else if ((_tokenSet_117.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		select_elem_list();
		elems_AST = (AST)returnAST;
		}
		{
		switch ( LA(1)) {
		case FROM:
		{
			from_clause();
			f_AST = (AST)returnAST;
			break;
		}
		case HAVING:
		case GROUP:
		case ORDER:
		case WHERE:
		case UNION:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WHERE:
		{
			where_clause();
			w_AST = (AST)returnAST;
			break;
		}
		case HAVING:
		case GROUP:
		case ORDER:
		case UNION:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case GROUP:
		{
			group_by_clause();
			g_AST = (AST)returnAST;
			break;
		}
		case HAVING:
		case ORDER:
		case UNION:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case HAVING:
		{
			having_clause();
			h_AST = (AST)returnAST;
			break;
		}
		case ORDER:
		case UNION:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case ORDER:
		{
			order_by_clause();
			o_AST = (AST)returnAST;
			break;
		}
		case UNION:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			sub_query_base_AST = (AST)currentAST.root;
			sub_query_base_AST = (AST)astFactory.make( (new ASTArray(9)).add(astFactory.create(SUBQUERY,"subquery")).add(d_AST).add(tnp_AST).add(elems_AST).add(f_AST).add(w_AST).add(g_AST).add(h_AST).add(o_AST));
				  	AST[] left = {s_AST}; AST[] right = {d_AST,tnp_AST,elems_AST,f_AST,w_AST,g_AST,h_AST,o_AST};
				  	SrcAST.setSpan(sub_query_base_AST,left,right);
				
			currentAST.root = sub_query_base_AST;
			currentAST.child = sub_query_base_AST!=null &&sub_query_base_AST.getFirstChild()!=null ?
				sub_query_base_AST.getFirstChild() : sub_query_base_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = sub_query_base_AST;
	}
	
	public final void select_elem() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST select_elem_AST = null;
		Token  st = null;
		AST st_AST = null;
		AST tname_AST = null;
		Token  st2 = null;
		AST st2_AST = null;
		AST ch1_AST = null;
		AST opts_AST = null;
		AST ex_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST opts2_AST = null;
		AST ch2_AST = null;
		AST e_AST = null;
		AST ch3_AST = null;
		AST se = astFactory.create(SELECT_ELEM,"select_elem");
		AST ch = astFactory.create(COLUMN_HEADING,"column_heading");
		
		
		{
		switch ( LA(1)) {
		case STAR:
		{
			st = LT(1);
			st_AST = astFactory.create(st);
			match(STAR);
			if ( inputState.guessing==0 ) {
				select_elem_AST = (AST)currentAST.root;
				select_elem_AST = (AST)astFactory.make( (new ASTArray(2)).add(se).add(astFactory.create(STAR_SELECT_ELEM,"star_select_elem")));
				currentAST.root = select_elem_AST;
				currentAST.child = select_elem_AST!=null &&select_elem_AST.getFirstChild()!=null ?
					select_elem_AST.getFirstChild() : select_elem_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case IDENTITY:
		{
			id = LT(1);
			id_AST = astFactory.create(id);
			match(IDENTITY);
			identity_opts();
			opts2_AST = (AST)returnAST;
			AST tmp633_AST = null;
			tmp633_AST = astFactory.create(LT(1));
			match(AS);
			column_heading();
			ch2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				select_elem_AST = (AST)currentAST.root;
				ch.addChild(ch2_AST);
					  	  	ch.setText(SrcAST.getText(ch2_AST));
					  	    select_elem_AST = (AST)astFactory.make( (new ASTArray(3)).add(se).add(ch).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(IDENTITY_SELECT_ELEM,"identity_select_elem")).add(opts2_AST)))); 
					  	
				currentAST.root = select_elem_AST;
				currentAST.child = select_elem_AST!=null &&select_elem_AST.getFirstChild()!=null ?
					select_elem_AST.getFirstChild() : select_elem_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
			boolean synPredMatched779 = false;
			if (((_tokenSet_126.member(LA(1))) && (_tokenSet_126.member(LA(2))))) {
				int _m779 = mark();
				synPredMatched779 = true;
				inputState.guessing++;
				try {
					{
					qualified_table_name();
					match(DOT);
					match(STAR);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched779 = false;
				}
				rewind(_m779);
				inputState.guessing--;
			}
			if ( synPredMatched779 ) {
				qualified_table_name();
				tname_AST = (AST)returnAST;
				AST tmp634_AST = null;
				tmp634_AST = astFactory.create(LT(1));
				match(DOT);
				st2 = LT(1);
				st2_AST = astFactory.create(st2);
				match(STAR);
				if ( inputState.guessing==0 ) {
					select_elem_AST = (AST)currentAST.root;
					select_elem_AST = (AST)astFactory.make( (new ASTArray(2)).add(se).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(STAR_SELECT_ELEM,"star_select_elem")).add(tname_AST))));
					currentAST.root = select_elem_AST;
					currentAST.child = select_elem_AST!=null &&select_elem_AST.getFirstChild()!=null ?
						select_elem_AST.getFirstChild() : select_elem_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				boolean synPredMatched781 = false;
				if (((_tokenSet_34.member(LA(1))) && (LA(2)==EQUAL))) {
					int _m781 = mark();
					synPredMatched781 = true;
					inputState.guessing++;
					try {
						{
						column_heading();
						match(EQUAL);
						}
					}
					catch (RecognitionException pe) {
						synPredMatched781 = false;
					}
					rewind(_m781);
					inputState.guessing--;
				}
				if ( synPredMatched781 ) {
					column_heading();
					ch1_AST = (AST)returnAST;
					AST tmp635_AST = null;
					tmp635_AST = astFactory.create(LT(1));
					match(EQUAL);
					{
					if ((LA(1)==IDENTITY)) {
						AST tmp636_AST = null;
						tmp636_AST = astFactory.create(LT(1));
						match(IDENTITY);
						identity_opts();
						opts_AST = (AST)returnAST;
					}
					else if ((_tokenSet_41.member(LA(1)))) {
						expr();
						ex_AST = (AST)returnAST;
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					if ( inputState.guessing==0 ) {
						select_elem_AST = (AST)currentAST.root;
						ch.addChild(ch1_AST); 
							  	  	ch.setText(SrcAST.getText(ch1_AST));
							 	    if (opts_AST!=null)	
							 	    	select_elem_AST = (AST)astFactory.make( (new ASTArray(3)).add(se).add(ch).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(IDENTITY_SELECT_ELEM,"identity_select_elem")).add(opts_AST))));
							 	    else select_elem_AST = (AST)astFactory.make( (new ASTArray(3)).add(se).add(ch).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(EXPR_SELECT_ELEM,"expr_select_elem")).add(ex_AST))));
							 	
						currentAST.root = select_elem_AST;
						currentAST.child = select_elem_AST!=null &&select_elem_AST.getFirstChild()!=null ?
							select_elem_AST.getFirstChild() : select_elem_AST;
						currentAST.advanceChildToEnd();
					}
				}
				else if ((_tokenSet_41.member(LA(1))) && (_tokenSet_127.member(LA(2)))) {
					expr();
					e_AST = (AST)returnAST;
					{
					if ((_tokenSet_128.member(LA(1)))) {
						{
						if ((LA(1)==AS)) {
							AST tmp637_AST = null;
							tmp637_AST = astFactory.create(LT(1));
							match(AS);
						}
						else if ((_tokenSet_34.member(LA(1)))) {
						}
						else {
							throw new NoViableAltException(LT(1), getFilename());
						}
						
						}
						column_heading();
						ch3_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							ch.addChild(ch3_AST);
						}
					}
					else if ((_tokenSet_129.member(LA(1)))) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					if ( inputState.guessing==0 ) {
						select_elem_AST = (AST)currentAST.root;
						ch = (ch3_AST!=null)? ch : null;
							  	  	if (ch3_AST!=null) ch.setText(SrcAST.getText(ch3_AST));
							 	  	select_elem_AST = (AST)astFactory.make( (new ASTArray(3)).add(se).add(ch).add((AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(EXPR_SELECT_ELEM,"expr_select_elem")).add(e_AST))));
						currentAST.root = select_elem_AST;
						currentAST.child = select_elem_AST!=null &&select_elem_AST.getFirstChild()!=null ?
							select_elem_AST.getFirstChild() : select_elem_AST;
						currentAST.advanceChildToEnd();
					}
				}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}}
			}
			if ( inputState.guessing==0 ) {
				select_elem_AST = (AST)currentAST.root;
				
					 	 AST[] left = {st_AST,tname_AST,ch1_AST,id_AST,e_AST}; AST[] right = {st2_AST,opts_AST,ex_AST,opts_AST,ch2_AST,ch3_AST};
					     SrcAST.setSpan(select_elem_AST,left,right);
					
			}
			returnAST = select_elem_AST;
		}
		
	public final void column_heading() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_heading_AST = null;
		
		if ((LA(1)==DOUBLE_QUOTED_STRING_LIT||LA(1)==SINGLE_QUOTED_STRING_LIT)) {
			quoted_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			column_heading_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_2.member(LA(1)))) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			column_heading_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = column_heading_AST;
	}
	
	public final void identity_opts() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST identity_opts_AST = null;
		Token  lp1 = null;
		AST lp1_AST = null;
		AST p_AST = null;
		Token  rp1 = null;
		AST rp1_AST = null;
		Token  lp2 = null;
		AST lp2_AST = null;
		AST d_AST = null;
		AST s_AST = null;
		AST i_AST = null;
		Token  rp2 = null;
		AST rp2_AST = null;
		
		if ((LA(1)==LPAREN) && (_tokenSet_44.member(LA(2)))) {
			lp1 = LT(1);
			lp1_AST = astFactory.create(lp1);
			match(LPAREN);
			unsigned_num_int();
			p_AST = (AST)returnAST;
			rp1 = LT(1);
			rp1_AST = astFactory.create(rp1);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				identity_opts_AST = (AST)currentAST.root;
				identity_opts_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SYB_SPECS,"syb_specs")).add(p_AST)); SrcAST.setSpan(identity_opts_AST,lp1_AST,rp1_AST);
				currentAST.root = identity_opts_AST;
				currentAST.child = identity_opts_AST!=null &&identity_opts_AST.getFirstChild()!=null ?
					identity_opts_AST.getFirstChild() : identity_opts_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==LPAREN) && (_tokenSet_49.member(LA(2)))) {
			lp2 = LT(1);
			lp2_AST = astFactory.create(lp2);
			match(LPAREN);
			datatype();
			d_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case COMMA:
			{
				AST tmp638_AST = null;
				tmp638_AST = astFactory.create(LT(1));
				match(COMMA);
				unsigned_num_int();
				s_AST = (AST)returnAST;
				AST tmp639_AST = null;
				tmp639_AST = astFactory.create(LT(1));
				match(COMMA);
				unsigned_num_int();
				i_AST = (AST)returnAST;
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			rp2 = LT(1);
			rp2_AST = astFactory.create(rp2);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				identity_opts_AST = (AST)currentAST.root;
				identity_opts_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(MSSQL_SPECS,"mssql_specs")).add(d_AST).add(s_AST).add(i_AST)); SrcAST.setSpan(identity_opts_AST,lp2_AST,rp2_AST);
				currentAST.root = identity_opts_AST;
				currentAST.child = identity_opts_AST!=null &&identity_opts_AST.getFirstChild()!=null ?
					identity_opts_AST.getFirstChild() : identity_opts_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = identity_opts_AST;
	}
	
	public final void cube_rollup() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cube_rollup_AST = null;
		
		AST tmp640_AST = null;
		tmp640_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp640_AST);
		match(WITH);
		{
		switch ( LA(1)) {
		case CUBE:
		{
			AST tmp641_AST = null;
			tmp641_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp641_AST);
			match(CUBE);
			break;
		}
		case ROLLUP:
		{
			AST tmp642_AST = null;
			tmp642_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp642_AST);
			match(ROLLUP);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		cube_rollup_AST = (AST)currentAST.root;
		returnAST = cube_rollup_AST;
	}
	
	public final void from_elem_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST from_elem_list_AST = null;
		AST fe1_AST = null;
		AST fe_AST = null;
		AST fe_list = astFactory.create(FROM_ELEM_LIST,"from_elem_list");
		
		from_elem();
		fe1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			fe_list.addChild(fe1_AST);
		}
		{
		_loop804:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp643_AST = null;
				tmp643_AST = astFactory.create(LT(1));
				match(COMMA);
				from_elem();
				fe_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					fe_list.addChild(fe_AST);
				}
			}
			else {
				break _loop804;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			from_elem_list_AST = (AST)currentAST.root;
			from_elem_list_AST = fe_list; SrcAST.setSpan(from_elem_list_AST,fe1_AST,fe_AST);
				  	SrcAST.setSpan(from_elem_list_AST,fe1_AST,fe_AST); 
				
			currentAST.root = from_elem_list_AST;
			currentAST.child = from_elem_list_AST!=null &&from_elem_list_AST.getFirstChild()!=null ?
				from_elem_list_AST.getFirstChild() : from_elem_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = from_elem_list_AST;
	}
	
	public final void from_elem() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST from_elem_AST = null;
		AST j_AST = null;
		
		join_expr();
		j_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			from_elem_AST = (AST)currentAST.root;
			from_elem_AST = j_AST; SrcAST.setSpan(from_elem_AST,j_AST);
			currentAST.root = from_elem_AST;
			currentAST.child = from_elem_AST!=null &&from_elem_AST.getFirstChild()!=null ?
				from_elem_AST.getFirstChild() : from_elem_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = from_elem_AST;
	}
	
	public final void join_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST join_expr_AST = null;
		AST ce1_AST = null;
		AST jm_AST = null;
		AST je2_AST = null;
		AST cond_AST = null;
		AST left = null; AST root=null;
		
		cross_expr();
		ce1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			left = ce1_AST;
		}
		{
		_loop809:
		do {
			if ((_tokenSet_130.member(LA(1)))) {
				{
				switch ( LA(1)) {
				case INNER:
				case LEFT:
				case RIGHT:
				case FULL:
				{
					join_mod();
					jm_AST = (AST)returnAST;
					break;
				}
				case JOIN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(JOIN);
				join_expr();
				je2_AST = (AST)returnAST;
				match(ON);
				cond_expr();
				cond_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					
						   	  root = (jm_AST!=null)? jm_AST : astFactory.create(INNER_JOIN,"inner_join");
						   	  left = (AST)astFactory.make( (new ASTArray(4)).add(root).add(left).add(je2_AST).add(cond_AST));
				}
			}
			else {
				break _loop809;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			join_expr_AST = (AST)currentAST.root;
			join_expr_AST = left; SrcAST.setSpan(join_expr_AST,ce1_AST,cond_AST);
			currentAST.root = join_expr_AST;
			currentAST.child = join_expr_AST!=null &&join_expr_AST.getFirstChild()!=null ?
				join_expr_AST.getFirstChild() : join_expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = join_expr_AST;
	}
	
	public final void cross_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cross_expr_AST = null;
		AST jt1_AST = null;
		AST jt2_AST = null;
		AST ct = null;
			AST jt1 = null;
		
		
		join_table();
		jt1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			ct = jt1_AST;
		}
		{
		_loop812:
		do {
			if ((LA(1)==CROSS)) {
				AST tmp646_AST = null;
				tmp646_AST = astFactory.create(LT(1));
				match(CROSS);
				AST tmp647_AST = null;
				tmp647_AST = astFactory.create(LT(1));
				match(JOIN);
				join_table();
				jt2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					ct = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CROSS_JOIN,"cross_join")).add(ct).add(jt2_AST));
				}
			}
			else {
				break _loop812;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			cross_expr_AST = (AST)currentAST.root;
			cross_expr_AST = ct; SrcAST.setSpan(cross_expr_AST,jt1_AST,jt2_AST);
			currentAST.root = cross_expr_AST;
			currentAST.child = cross_expr_AST!=null &&cross_expr_AST.getFirstChild()!=null ?
				cross_expr_AST.getFirstChild() : cross_expr_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = cross_expr_AST;
	}
	
	public final void join_mod() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST join_mod_AST = null;
		Token  f = null;
		AST f_AST = null;
		AST a_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST b_AST = null;
		Token  l = null;
		AST l_AST = null;
		AST c_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST d_AST = null;
		
		{
		switch ( LA(1)) {
		case FULL:
		{
			f = LT(1);
			f_AST = astFactory.create(f);
			match(FULL);
			{
			switch ( LA(1)) {
			case LOOP:
			{
				match(LOOP);
				break;
			}
			case HASH:
			{
				match(HASH);
				break;
			}
			case MERGE:
			{
				match(MERGE);
				break;
			}
			case REMOTE:
			{
				match(REMOTE);
				break;
			}
			case JOIN:
			case OUTER:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OUTER:
			{
				AST tmp652_AST = null;
				tmp652_AST = astFactory.create(LT(1));
				match(OUTER);
				if ( inputState.guessing==0 ) {
					join_mod_AST = (AST)currentAST.root;
					join_mod_AST = astFactory.create(FULL_OUTER_JOIN,"full_outer_join");
					currentAST.root = join_mod_AST;
					currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
						join_mod_AST.getFirstChild() : join_mod_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			case JOIN:
			{
				if ( inputState.guessing==0 ) {
					join_mod_AST = (AST)currentAST.root;
					join_mod_AST = astFactory.create(FULL_JOIN,"full_join");
					currentAST.root = join_mod_AST;
					currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
						join_mod_AST.getFirstChild() : join_mod_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case RIGHT:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(RIGHT);
			{
			switch ( LA(1)) {
			case LOOP:
			{
				match(LOOP);
				break;
			}
			case HASH:
			{
				match(HASH);
				break;
			}
			case MERGE:
			{
				match(MERGE);
				break;
			}
			case REMOTE:
			{
				match(REMOTE);
				break;
			}
			case JOIN:
			case OUTER:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OUTER:
			{
				AST tmp657_AST = null;
				tmp657_AST = astFactory.create(LT(1));
				match(OUTER);
				if ( inputState.guessing==0 ) {
					join_mod_AST = (AST)currentAST.root;
					join_mod_AST = astFactory.create(RIGHT_OUTER_JOIN,"right_outer_join");
					currentAST.root = join_mod_AST;
					currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
						join_mod_AST.getFirstChild() : join_mod_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			case JOIN:
			{
				if ( inputState.guessing==0 ) {
					join_mod_AST = (AST)currentAST.root;
					join_mod_AST = astFactory.create(RIGHT_JOIN,"right_join");
					currentAST.root = join_mod_AST;
					currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
						join_mod_AST.getFirstChild() : join_mod_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case LEFT:
		{
			l = LT(1);
			l_AST = astFactory.create(l);
			match(LEFT);
			{
			switch ( LA(1)) {
			case LOOP:
			{
				match(LOOP);
				break;
			}
			case HASH:
			{
				match(HASH);
				break;
			}
			case MERGE:
			{
				match(MERGE);
				break;
			}
			case REMOTE:
			{
				match(REMOTE);
				break;
			}
			case JOIN:
			case OUTER:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OUTER:
			{
				AST tmp662_AST = null;
				tmp662_AST = astFactory.create(LT(1));
				match(OUTER);
				if ( inputState.guessing==0 ) {
					join_mod_AST = (AST)currentAST.root;
					join_mod_AST = astFactory.create(LEFT_OUTER_JOIN,"left_outer_join");
					currentAST.root = join_mod_AST;
					currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
						join_mod_AST.getFirstChild() : join_mod_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			case JOIN:
			{
				if ( inputState.guessing==0 ) {
					join_mod_AST = (AST)currentAST.root;
					join_mod_AST = astFactory.create(LEFT_JOIN,"left_join");
					currentAST.root = join_mod_AST;
					currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
						join_mod_AST.getFirstChild() : join_mod_AST;
					currentAST.advanceChildToEnd();
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case INNER:
		{
			i = LT(1);
			i_AST = astFactory.create(i);
			match(INNER);
			{
			switch ( LA(1)) {
			case LOOP:
			{
				match(LOOP);
				break;
			}
			case HASH:
			{
				match(HASH);
				break;
			}
			case MERGE:
			{
				match(MERGE);
				break;
			}
			case REMOTE:
			{
				match(REMOTE);
				break;
			}
			case JOIN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				join_mod_AST = (AST)currentAST.root;
				join_mod_AST = astFactory.create(INNER_JOIN,"inner_join");
				currentAST.root = join_mod_AST;
				currentAST.child = join_mod_AST!=null &&join_mod_AST.getFirstChild()!=null ?
					join_mod_AST.getFirstChild() : join_mod_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			join_mod_AST = (AST)currentAST.root;
			AST[] left = {f_AST,r_AST,l_AST,i_AST};
				    AST[] right = {f_AST,r_AST,l_AST,i_AST,a_AST,b_AST,c_AST,d_AST};
				    SrcAST.setSpan(join_mod_AST,left,right);
				
		}
		returnAST = join_mod_AST;
	}
	
	public final void join_table() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST join_table_AST = null;
		AST f_AST = null;
		AST args_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST cor2_AST = null;
		AST t_AST = null;
		AST cor_AST = null;
		AST args2_AST = null;
		Token  rp2 = null;
		AST rp2_AST = null;
		AST h_AST = null;
		AST s_AST = null;
		AST sq_AST = null;
		AST cor3_AST = null;
		AST cols_AST = null;
		Token  rp3 = null;
		AST rp3_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST je_AST = null;
		Token  rp4 = null;
		AST rp4_AST = null;
		
		boolean synPredMatched825 = false;
		if (((_tokenSet_126.member(LA(1))) && (_tokenSet_131.member(LA(2))))) {
			int _m825 = mark();
			synPredMatched825 = true;
			inputState.guessing++;
			try {
				{
				qualified_table_name();
				match(LPAREN);
				{
				switch ( LA(1)) {
				case NULL:
				case NUM_REAL:
				case NUM_INT:
				case MINUS:
				case AT_IDENT:
				case DOUBLE_QUOTED_STRING_LIT:
				case SINGLE_QUOTED_STRING_LIT:
				case MONEY_NUM_LIT:
				case HEX_STRING_LIT:
				case BIT_STRING_LIT:
				{
					table_func_arg_list();
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				match(RPAREN);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched825 = false;
			}
			rewind(_m825);
			inputState.guessing--;
		}
		if ( synPredMatched825 ) {
			qualified_table_name();
			f_AST = (AST)returnAST;
			AST tmp667_AST = null;
			tmp667_AST = astFactory.create(LT(1));
			match(LPAREN);
			{
			switch ( LA(1)) {
			case NULL:
			case NUM_REAL:
			case NUM_INT:
			case MINUS:
			case AT_IDENT:
			case DOUBLE_QUOTED_STRING_LIT:
			case SINGLE_QUOTED_STRING_LIT:
			case MONEY_NUM_LIT:
			case HEX_STRING_LIT:
			case BIT_STRING_LIT:
			{
				table_func_arg_list();
				args_AST = (AST)returnAST;
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
			{
			if ((_tokenSet_132.member(LA(1)))) {
				{
				if ((LA(1)==AS)) {
					AST tmp668_AST = null;
					tmp668_AST = astFactory.create(LT(1));
					match(AS);
				}
				else if ((_tokenSet_133.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				correlation_name();
				cor2_AST = (AST)returnAST;
			}
			else if ((_tokenSet_134.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			syb_lock();
			if ( inputState.guessing==0 ) {
				join_table_AST = (AST)currentAST.root;
				join_table_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(TABLE_FUNC_CALL,"table_function_call")).add(f_AST).add(args_AST).add(cor2_AST)); 
					    SrcAST.setSpan(join_table_AST,f_AST,(cor2_AST!=null)? cor2_AST : rp_AST);
					
				currentAST.root = join_table_AST;
				currentAST.child = join_table_AST!=null &&join_table_AST.getFirstChild()!=null ?
					join_table_AST.getFirstChild() : join_table_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_10.member(LA(1))) && (_tokenSet_135.member(LA(2)))) {
			table_reference();
			t_AST = (AST)returnAST;
			{
			if ((_tokenSet_132.member(LA(1)))) {
				{
				if ((LA(1)==AS)) {
					AST tmp669_AST = null;
					tmp669_AST = astFactory.create(LT(1));
					match(AS);
				}
				else if ((_tokenSet_133.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				correlation_name();
				cor_AST = (AST)returnAST;
			}
			else if ((_tokenSet_134.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			boolean synPredMatched834 = false;
			if (((LA(1)==LPAREN) && (_tokenSet_136.member(LA(2))))) {
				int _m834 = mark();
				synPredMatched834 = true;
				inputState.guessing++;
				try {
					{
					match(LPAREN);
					{
					switch ( LA(1)) {
					case NULL:
					case NUM_REAL:
					case NUM_INT:
					case MINUS:
					case AT_IDENT:
					case DOUBLE_QUOTED_STRING_LIT:
					case SINGLE_QUOTED_STRING_LIT:
					case MONEY_NUM_LIT:
					case HEX_STRING_LIT:
					case BIT_STRING_LIT:
					{
						table_func_arg_list();
						break;
					}
					case RPAREN:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					match(RPAREN);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched834 = false;
				}
				rewind(_m834);
				inputState.guessing--;
			}
			if ( synPredMatched834 ) {
				AST tmp670_AST = null;
				tmp670_AST = astFactory.create(LT(1));
				match(LPAREN);
				{
				switch ( LA(1)) {
				case NULL:
				case NUM_REAL:
				case NUM_INT:
				case MINUS:
				case AT_IDENT:
				case DOUBLE_QUOTED_STRING_LIT:
				case SINGLE_QUOTED_STRING_LIT:
				case MONEY_NUM_LIT:
				case HEX_STRING_LIT:
				case BIT_STRING_LIT:
				{
					table_func_arg_list();
					args2_AST = (AST)returnAST;
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				rp2 = LT(1);
				rp2_AST = astFactory.create(rp2);
				match(RPAREN);
				if ( inputState.guessing==0 ) {
					join_table_AST = (AST)currentAST.root;
					
								  				if (cor_AST==null)
								  				   join_table_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(TABLE_FUNC_CALL,"table_function_call")).add(t_AST).add(args2_AST).add(cor_AST));
								  				else  join_table_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TABLE_REFERENCE,"table_reference")).add(t_AST).add(cor_AST)); 
								  			
					currentAST.root = join_table_AST;
					currentAST.child = join_table_AST!=null &&join_table_AST.getFirstChild()!=null ?
						join_table_AST.getFirstChild() : join_table_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((_tokenSet_134.member(LA(1))) && (_tokenSet_137.member(LA(2)))) {
				{
				boolean synPredMatched838 = false;
				if (((LA(1)==WITH||LA(1)==LPAREN) && (_tokenSet_138.member(LA(2))))) {
					int _m838 = mark();
					synPredMatched838 = true;
					inputState.guessing++;
					try {
						{
						table_hints();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched838 = false;
					}
					rewind(_m838);
					inputState.guessing--;
				}
				if ( synPredMatched838 ) {
					table_hints();
					h_AST = (AST)returnAST;
				}
				else if ((_tokenSet_134.member(LA(1))) && (_tokenSet_137.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				syb_lock();
				s_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					join_table_AST = (AST)currentAST.root;
					join_table_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TABLE_REFERENCE,"table_reference")).add(t_AST).add(cor_AST));
					currentAST.root = join_table_AST;
					currentAST.child = join_table_AST!=null &&join_table_AST.getFirstChild()!=null ?
						join_table_AST.getFirstChild() : join_table_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				join_table_AST = (AST)currentAST.root;
				
					    AST[] left = {t_AST};
					    AST[] right = {cor_AST,rp2_AST,h_AST,s_AST};
					    SrcAST.setSpan(join_table_AST,left,right);
					
			}
		}
		else {
			boolean synPredMatched840 = false;
			if (((LA(1)==LPAREN) && (LA(2)==SELECT||LA(2)==LPAREN))) {
				int _m840 = mark();
				synPredMatched840 = true;
				inputState.guessing++;
				try {
					{
					sub_query();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched840 = false;
				}
				rewind(_m840);
				inputState.guessing--;
			}
			if ( synPredMatched840 ) {
				sub_query();
				sq_AST = (AST)returnAST;
				{
				if ((LA(1)==AS)) {
					AST tmp671_AST = null;
					tmp671_AST = astFactory.create(LT(1));
					match(AS);
				}
				else if ((_tokenSet_133.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				correlation_name();
				cor3_AST = (AST)returnAST;
				{
				boolean synPredMatched844 = false;
				if (((LA(1)==LPAREN) && (_tokenSet_2.member(LA(2))))) {
					int _m844 = mark();
					synPredMatched844 = true;
					inputState.guessing++;
					try {
						{
						match(LPAREN);
						column_name();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched844 = false;
					}
					rewind(_m844);
					inputState.guessing--;
				}
				if ( synPredMatched844 ) {
					match(LPAREN);
					column_list();
					cols_AST = (AST)returnAST;
					rp3 = LT(1);
					rp3_AST = astFactory.create(rp3);
					match(RPAREN);
				}
				else if ((_tokenSet_139.member(LA(1))) && (_tokenSet_137.member(LA(2)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					join_table_AST = (AST)currentAST.root;
					join_table_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(DERIVED_TABLE,"derived_table")).add(sq_AST).add(cor3_AST).add(cols_AST)); 
						    SrcAST.setSpan(join_table_AST,sq_AST,(rp3_AST!=null)? rp3_AST : cor3_AST);
						
					currentAST.root = join_table_AST;
					currentAST.child = join_table_AST!=null &&join_table_AST.getFirstChild()!=null ?
						join_table_AST.getFirstChild() : join_table_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else if ((LA(1)==LPAREN) && (_tokenSet_140.member(LA(2)))) {
				lp = LT(1);
				lp_AST = astFactory.create(lp);
				match(LPAREN);
				join_expr();
				je_AST = (AST)returnAST;
				rp4 = LT(1);
				rp4_AST = astFactory.create(rp4);
				match(RPAREN);
				if ( inputState.guessing==0 ) {
					join_table_AST = (AST)currentAST.root;
					join_table_AST = je_AST; SrcAST.setSpan(join_table_AST,lp_AST,rp4_AST);
					currentAST.root = join_table_AST;
					currentAST.child = join_table_AST!=null &&join_table_AST.getFirstChild()!=null ?
						join_table_AST.getFirstChild() : join_table_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			returnAST = join_table_AST;
		}
		
	public final void table_func_arg_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_func_arg_list_AST = null;
		AST arg1_AST = null;
		AST arg2_AST = null;
		AST args = astFactory.create(TABLE_FUNC_ARG_LIST,"table_func_arg_list");
		
		table_func_arg();
		arg1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			args.addChild(arg1_AST);
		}
		{
		_loop1213:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				table_func_arg();
				arg2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					args.addChild(arg2_AST);
				}
			}
			else {
				break _loop1213;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			table_func_arg_list_AST = (AST)currentAST.root;
			table_func_arg_list_AST = args; SrcAST.setSpan(table_func_arg_list_AST,arg1_AST,arg2_AST);
			currentAST.root = table_func_arg_list_AST;
			currentAST.child = table_func_arg_list_AST!=null &&table_func_arg_list_AST.getFirstChild()!=null ?
				table_func_arg_list_AST.getFirstChild() : table_func_arg_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = table_func_arg_list_AST;
	}
	
	public final void syb_lock() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST syb_lock_AST = null;
		
		{
		switch ( LA(1)) {
		case HOLDLOCK:
		{
			AST tmp674_AST = null;
			tmp674_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp674_AST);
			match(HOLDLOCK);
			break;
		}
		case NOHOLDLOCK:
		{
			AST tmp675_AST = null;
			tmp675_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp675_AST);
			match(NOHOLDLOCK);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case ON:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case HAVING:
		case GROUP:
		case ORDER:
		case COMPUTE:
		case DECLARE:
		case WHERE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case OPTION:
		case UNION:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case PLAN:
		case JOIN:
		case INNER:
		case LEFT:
		case RIGHT:
		case DENY:
		case FULL:
		case CROSS:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case SHARED:
		case READPAST:
		case AT:
		case USING:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case READPAST:
		{
			AST tmp676_AST = null;
			tmp676_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp676_AST);
			match(READPAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case ON:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case HAVING:
		case GROUP:
		case ORDER:
		case COMPUTE:
		case DECLARE:
		case WHERE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case OPTION:
		case UNION:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case PLAN:
		case JOIN:
		case INNER:
		case LEFT:
		case RIGHT:
		case DENY:
		case FULL:
		case CROSS:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case SHARED:
		case AT:
		case USING:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case SHARED:
		{
			AST tmp677_AST = null;
			tmp677_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp677_AST);
			match(SHARED);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case ON:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case HAVING:
		case GROUP:
		case ORDER:
		case COMPUTE:
		case DECLARE:
		case WHERE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case OPTION:
		case UNION:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case PLAN:
		case JOIN:
		case INNER:
		case LEFT:
		case RIGHT:
		case DENY:
		case FULL:
		case CROSS:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case AT:
		case USING:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		syb_lock_AST = (AST)currentAST.root;
		returnAST = syb_lock_AST;
	}
	
	public final void table_reference() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_reference_AST = null;
		
		if ((_tokenSet_126.member(LA(1)))) {
			qualified_table_name();
			astFactory.addASTChild(currentAST, returnAST);
			table_reference_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==AT_IDENT)) {
			AST tmp678_AST = null;
			tmp678_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp678_AST);
			match(AT_IDENT);
			table_reference_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = table_reference_AST;
	}
	
	public final void table_hints() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_hints_AST = null;
		
		switch ( LA(1)) {
		case WITH:
		{
			mssql_table_hints();
			astFactory.addASTChild(currentAST, returnAST);
			table_hints_AST = (AST)currentAST.root;
			break;
		}
		case LPAREN:
		{
			AST tmp679_AST = null;
			tmp679_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp679_AST);
			match(LPAREN);
			table_hint_list();
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp680_AST = null;
			tmp680_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp680_AST);
			match(RPAREN);
			table_hints_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = table_hints_AST;
	}
	
	public final void mssql_table_hints() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST mssql_table_hints_AST = null;
		
		AST tmp681_AST = null;
		tmp681_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp681_AST);
		match(WITH);
		AST tmp682_AST = null;
		tmp682_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp682_AST);
		match(LPAREN);
		table_hint_list();
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp683_AST = null;
		tmp683_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp683_AST);
		match(RPAREN);
		mssql_table_hints_AST = (AST)currentAST.root;
		returnAST = mssql_table_hints_AST;
	}
	
	public final void table_hint_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_hint_list_AST = null;
		
		table_hint();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop850:
		do {
			if ((_tokenSet_141.member(LA(1)))) {
				{
				if ((LA(1)==COMMA)) {
					match(COMMA);
				}
				else if ((_tokenSet_142.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				table_hint();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop850;
			}
			
		} while (true);
		}
		table_hint_list_AST = (AST)currentAST.root;
		returnAST = table_hint_list_AST;
	}
	
	public final void table_hint() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_hint_AST = null;
		
		switch ( LA(1)) {
		case INDEX:
		{
			AST tmp685_AST = null;
			tmp685_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp685_AST);
			match(INDEX);
			{
			switch ( LA(1)) {
			case EQUAL:
			{
				AST tmp686_AST = null;
				tmp686_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp686_AST);
				match(EQUAL);
				expr();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LPAREN:
			{
				AST tmp687_AST = null;
				tmp687_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp687_AST);
				match(LPAREN);
				expr_list();
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp688_AST = null;
				tmp688_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp688_AST);
				match(RPAREN);
				break;
			}
			default:
				if ((_tokenSet_143.member(LA(1)))) {
				}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			table_hint_AST = (AST)currentAST.root;
			break;
		}
		case HOLDLOCK:
		{
			AST tmp689_AST = null;
			tmp689_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp689_AST);
			match(HOLDLOCK);
			table_hint_AST = (AST)currentAST.root;
			break;
		}
		default:
			boolean synPredMatched860 = false;
			if (((LA(1)==PARALLEL||LA(1)==PREFETCH) && (_tokenSet_44.member(LA(2))))) {
				int _m860 = mark();
				synPredMatched860 = true;
				inputState.guessing++;
				try {
					{
					{
					switch ( LA(1)) {
					case PARALLEL:
					{
						match(PARALLEL);
						break;
					}
					case PREFETCH:
					{
						match(PREFETCH);
						break;
					}
					default:
					{
						throw new NoViableAltException(LT(1), getFilename());
					}
					}
					}
					unsigned_num_int();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched860 = false;
				}
				rewind(_m860);
				inputState.guessing--;
			}
			if ( synPredMatched860 ) {
				{
				switch ( LA(1)) {
				case PARALLEL:
				{
					AST tmp690_AST = null;
					tmp690_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp690_AST);
					match(PARALLEL);
					break;
				}
				case PREFETCH:
				{
					AST tmp691_AST = null;
					tmp691_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp691_AST);
					match(PREFETCH);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				unsigned_num_int();
				astFactory.addASTChild(currentAST, returnAST);
				table_hint_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_143.member(LA(2)))) {
				non_reserved_id();
				astFactory.addASTChild(currentAST, returnAST);
				table_hint_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==PARALLEL||LA(1)==PREFETCH) && (_tokenSet_44.member(LA(2)))) {
				{
				switch ( LA(1)) {
				case PARALLEL:
				{
					AST tmp692_AST = null;
					tmp692_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp692_AST);
					match(PARALLEL);
					break;
				}
				case PREFETCH:
				{
					AST tmp693_AST = null;
					tmp693_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp693_AST);
					match(PREFETCH);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				unsigned_num_int();
				astFactory.addASTChild(currentAST, returnAST);
				table_hint_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = table_hint_AST;
	}
	
	public final void non_reserved_id() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST non_reserved_id_AST = null;
		
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		non_reserved_id_AST = (AST)currentAST.root;
		returnAST = non_reserved_id_AST;
	}
	
	public final void union_stmt(
		AST unionList
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST union_stmt_AST = null;
		Token  u = null;
		AST u_AST = null;
		Token  a = null;
		AST a_AST = null;
		AST u1_AST = null;
		AST unionStmt = astFactory.create(UNION_STMT,"union_stmt");
		
		
		u = LT(1);
		u_AST = astFactory.create(u);
		match(UNION);
		{
		switch ( LA(1)) {
		case ALL:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ALL);
			if ( inputState.guessing==0 ) {
				unionStmt.addChild(a_AST);
			}
			break;
		}
		case SELECT:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		union_stmt_tail(unionList,unionStmt);
		u1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			union_stmt_AST = (AST)currentAST.root;
			
				  	SrcAST.setSpan(unionStmt,u_AST,u1_AST); 
				  	union_stmt_AST = unionStmt;
				  	//SrcAST.setSpan(##,#u,unionStmt);
				
			currentAST.root = union_stmt_AST;
			currentAST.child = union_stmt_AST!=null &&union_stmt_AST.getFirstChild()!=null ?
				union_stmt_AST.getFirstChild() : union_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = union_stmt_AST;
	}
	
	public final void union_stmt_tail(
		AST unionList, AST unionStmt
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST union_stmt_tail_AST = null;
		Token  s = null;
		AST s_AST = null;
		AST d_AST = null;
		AST tnp_AST = null;
		AST sl_AST = null;
		AST f_AST = null;
		AST w_AST = null;
		AST g_AST = null;
		AST h_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST ut_AST = null;
		AST us_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		AST left = null; AST uni = astFactory.create(UNION_STMT,"union_stmt");
		
		switch ( LA(1)) {
		case SELECT:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SELECT);
			if ( inputState.guessing==0 ) {
				uni.addChild(s_AST);
			}
			{
			if ((LA(1)==ALL||LA(1)==DISTINCT)) {
				distinct_clause();
				d_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					unionStmt.addChild(d_AST);
				}
			}
			else if ((_tokenSet_122.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			{
			if ((LA(1)==TOP)) {
				top_n_percent();
				tnp_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					unionStmt.addChild(tnp_AST);
				}
			}
			else if ((_tokenSet_117.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			select_elem_list();
			sl_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				unionStmt.addChild(sl_AST);
			}
			{
			switch ( LA(1)) {
			case FROM:
			{
				from_clause();
				f_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					unionStmt.addChild(f_AST);
				}
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case WHERE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WHERE:
			{
				where_clause();
				w_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					unionStmt.addChild(w_AST);
				}
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case GROUP:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case GROUP:
			{
				group_by_clause();
				g_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					unionStmt.addChild(g_AST);
				}
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case HAVING:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case HAVING:
			{
				having_clause();
				h_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					unionStmt.addChild(h_AST);
				}
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case ELSE:
			case END:
			case ORDER:
			case COMPUTE:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case OPTION:
			case UNION:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case PLAN:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case AT:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case SEMI_COLON:
			case LPAREN:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				union_stmt_tail_AST = (AST)currentAST.root;
				
					      AST[] lhs = {s_AST};
					      AST[] rhs = {sl_AST,f_AST,w_AST,g_AST,h_AST};
					      union_stmt_tail_AST = uni;
					      SrcAST.setSpan(unionStmt,lhs,rhs);
					      SrcAST.setSpan(union_stmt_tail_AST,lhs,rhs);
					      unionList.addChild(unionStmt);
					
				currentAST.root = union_stmt_tail_AST;
				currentAST.child = union_stmt_tail_AST!=null &&union_stmt_tail_AST.getFirstChild()!=null ?
					union_stmt_tail_AST.getFirstChild() : union_stmt_tail_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case LPAREN:
		{
			lp = LT(1);
			lp_AST = astFactory.create(lp);
			match(LPAREN);
			union_stmt_tail(unionList,unionStmt);
			ut_AST = (AST)returnAST;
			{
			_loop881:
			do {
				if ((LA(1)==UNION)) {
					union_stmt(unionList);
					us_AST = (AST)returnAST;
				}
				else {
					break _loop881;
				}
				
			} while (true);
			}
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				union_stmt_tail_AST = (AST)currentAST.root;
				union_stmt_tail_AST = uni;
					      SrcAST.setSpan(union_stmt_tail_AST,lp_AST,rp_AST); 
					      //SrcAST.setSpan(unionList,#lp,#rp);
					
				currentAST.root = union_stmt_tail_AST;
				currentAST.child = union_stmt_tail_AST!=null &&union_stmt_tail_AST.getFirstChild()!=null ?
					union_stmt_tail_AST.getFirstChild() : union_stmt_tail_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = union_stmt_tail_AST;
	}
	
	public final void order_spec_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST order_spec_list_AST = null;
		AST o1_AST = null;
		AST o_AST = null;
		AST os = astFactory.create(ORDER_SPEC_LIST,"order_spec_list");
		
		order_spec();
		o1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			os.addChild(o1_AST);
		}
		{
		_loop891:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				order_spec();
				o_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					os.addChild(o_AST);
				}
			}
			else {
				break _loop891;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			order_spec_list_AST = (AST)currentAST.root;
			order_spec_list_AST = os; 
				   SrcAST.setSpan(order_spec_list_AST,o1_AST,o_AST);
				
			currentAST.root = order_spec_list_AST;
			currentAST.child = order_spec_list_AST!=null &&order_spec_list_AST.getFirstChild()!=null ?
				order_spec_list_AST.getFirstChild() : order_spec_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = order_spec_list_AST;
	}
	
	public final void order_spec() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST order_spec_AST = null;
		AST e_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  d = null;
		AST d_AST = null;
		
		expr();
		e_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case ASC:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ASC);
			break;
		}
		case DESC:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			match(DESC);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case FOR:
		case SELECT:
		case ELSE:
		case END:
		case COMPUTE:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case OPTION:
		case UNION:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case PLAN:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case AT:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			order_spec_AST = (AST)currentAST.root;
			order_spec_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(ORDER_SPEC,"order_spec")).add(e_AST).add(a_AST).add(d_AST));
				  SrcAST.setSpan(order_spec_AST,e_AST,(a_AST!=null)? a_AST : d_AST);
			
			currentAST.root = order_spec_AST;
			currentAST.child = order_spec_AST!=null &&order_spec_AST.getFirstChild()!=null ?
				order_spec_AST.getFirstChild() : order_spec_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = order_spec_AST;
	}
	
	public final void qual_column_name_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_column_name_list_AST = null;
		AST c1_AST = null;
		AST c_AST = null;
		AST qclist = astFactory.create(QUALIFIED_COLUMN_NAME_LIST,"qualified_column_name_list");
		
		qualified_column_name();
		c1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			qclist.addChild(c1_AST);
		}
		{
		_loop901:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp695_AST = null;
				tmp695_AST = astFactory.create(LT(1));
				match(COMMA);
				qualified_column_name();
				c_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					qclist.addChild(c_AST);
				}
			}
			else {
				break _loop901;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			qual_column_name_list_AST = (AST)currentAST.root;
			qual_column_name_list_AST = qclist; SrcAST.setSpan(qual_column_name_list_AST,c1_AST,c_AST);
			currentAST.root = qual_column_name_list_AST;
			currentAST.child = qual_column_name_list_AST!=null &&qual_column_name_list_AST.getFirstChild()!=null ?
				qual_column_name_list_AST.getFirstChild() : qual_column_name_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = qual_column_name_list_AST;
	}
	
	public final void isolation_level() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST isolation_level_AST = null;
		
		switch ( LA(1)) {
		case READ:
		{
			AST tmp696_AST = null;
			tmp696_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp696_AST);
			match(READ);
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			isolation_level_AST = (AST)currentAST.root;
			break;
		}
		case NUM_INT:
		case PLUS:
		case MINUS:
		{
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			isolation_level_AST = (AST)currentAST.root;
			break;
		}
		default:
			boolean synPredMatched911 = false;
			if (((_tokenSet_2.member(LA(1))) && (LA(2)==READ))) {
				int _m911 = mark();
				synPredMatched911 = true;
				inputState.guessing++;
				try {
					{
					identifier();
					match(READ);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched911 = false;
				}
				rewind(_m911);
				inputState.guessing--;
			}
			if ( synPredMatched911 ) {
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp697_AST = null;
				tmp697_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp697_AST);
				match(READ);
				isolation_level_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_144.member(LA(2)))) {
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
				isolation_level_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = isolation_level_AST;
	}
	
	public final void option_item() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST option_item_AST = null;
		
		switch ( LA(1)) {
		case FAST:
		case MAXDOP:
		{
			{
			switch ( LA(1)) {
			case MAXDOP:
			{
				AST tmp698_AST = null;
				tmp698_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp698_AST);
				match(MAXDOP);
				break;
			}
			case FAST:
			{
				AST tmp699_AST = null;
				tmp699_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp699_AST);
				match(FAST);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			option_item_AST = (AST)currentAST.root;
			break;
		}
		case FORCE:
		{
			AST tmp700_AST = null;
			tmp700_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp700_AST);
			match(FORCE);
			AST tmp701_AST = null;
			tmp701_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp701_AST);
			match(ORDER);
			option_item_AST = (AST)currentAST.root;
			break;
		}
		case KEEP:
		case KEEPFIXED:
		case ROBUST:
		{
			{
			switch ( LA(1)) {
			case ROBUST:
			{
				AST tmp702_AST = null;
				tmp702_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp702_AST);
				match(ROBUST);
				break;
			}
			case KEEP:
			{
				AST tmp703_AST = null;
				tmp703_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp703_AST);
				match(KEEP);
				break;
			}
			case KEEPFIXED:
			{
				AST tmp704_AST = null;
				tmp704_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp704_AST);
				match(KEEPFIXED);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp705_AST = null;
			tmp705_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp705_AST);
			match(PLAN);
			option_item_AST = (AST)currentAST.root;
			break;
		}
		case EXPAND:
		{
			AST tmp706_AST = null;
			tmp706_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp706_AST);
			match(EXPAND);
			AST tmp707_AST = null;
			tmp707_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp707_AST);
			match(VIEWS);
			option_item_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((LA(1)==ORDER||LA(1)==HASH) && (LA(2)==GROUP)) {
				{
				switch ( LA(1)) {
				case HASH:
				{
					AST tmp708_AST = null;
					tmp708_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp708_AST);
					match(HASH);
					break;
				}
				case ORDER:
				{
					AST tmp709_AST = null;
					tmp709_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp709_AST);
					match(ORDER);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				AST tmp710_AST = null;
				tmp710_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp710_AST);
				match(GROUP);
				option_item_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_145.member(LA(1))) && (LA(2)==UNION)) {
				{
				switch ( LA(1)) {
				case CONCAT:
				{
					AST tmp711_AST = null;
					tmp711_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp711_AST);
					match(CONCAT);
					break;
				}
				case HASH:
				{
					AST tmp712_AST = null;
					tmp712_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp712_AST);
					match(HASH);
					break;
				}
				case MERGE:
				{
					AST tmp713_AST = null;
					tmp713_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp713_AST);
					match(MERGE);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				AST tmp714_AST = null;
				tmp714_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp714_AST);
				match(UNION);
				option_item_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_146.member(LA(1))) && (LA(2)==JOIN)) {
				{
				switch ( LA(1)) {
				case LOOP:
				{
					AST tmp715_AST = null;
					tmp715_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp715_AST);
					match(LOOP);
					break;
				}
				case MERGE:
				{
					AST tmp716_AST = null;
					tmp716_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp716_AST);
					match(MERGE);
					break;
				}
				case HASH:
				{
					AST tmp717_AST = null;
					tmp717_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp717_AST);
					match(HASH);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				AST tmp718_AST = null;
				tmp718_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp718_AST);
				match(JOIN);
				option_item_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = option_item_AST;
	}
	
	public final void update_assignment() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST update_assignment_AST = null;
		AST qc_AST = null;
		AST e_AST = null;
		Token  atID = null;
		AST atID_AST = null;
		AST e1_AST = null;
		
		if ((_tokenSet_2.member(LA(1)))) {
			qualified_column_name();
			qc_AST = (AST)returnAST;
			AST tmp719_AST = null;
			tmp719_AST = astFactory.create(LT(1));
			match(EQUAL);
			expr();
			e_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				update_assignment_AST = (AST)currentAST.root;
				update_assignment_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(UPDATE_ASSIGN,"update_assign")).add(qc_AST).add(e_AST)); SrcAST.setSpan(update_assignment_AST,qc_AST,e_AST);
				currentAST.root = update_assignment_AST;
				currentAST.child = update_assignment_AST!=null &&update_assignment_AST.getFirstChild()!=null ?
					update_assignment_AST.getFirstChild() : update_assignment_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==AT_IDENT)) {
			atID = LT(1);
			atID_AST = astFactory.create(atID);
			match(AT_IDENT);
			AST tmp720_AST = null;
			tmp720_AST = astFactory.create(LT(1));
			match(EQUAL);
			expr();
			e1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				update_assignment_AST = (AST)currentAST.root;
				update_assignment_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(UPDATE_ASSIGN,"update_assign")).add(atID_AST).add(e1_AST)); SrcAST.setSpan(update_assignment_AST,atID_AST,e1_AST);
				currentAST.root = update_assignment_AST;
				currentAST.child = update_assignment_AST!=null &&update_assignment_AST.getFirstChild()!=null ?
					update_assignment_AST.getFirstChild() : update_assignment_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = update_assignment_AST;
	}
	
	public final void update_assignment_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST update_assignment_list_AST = null;
		AST u1_AST = null;
		AST u_AST = null;
		AST ulist = astFactory.create(UPDATE_ASSIGN_LIST,"update_assign_list");
		
		update_assignment();
		u1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			ulist.addChild(u1_AST);
		}
		{
		_loop934:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				update_assignment();
				u_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					ulist.addChild(u_AST);
				}
			}
			else {
				break _loop934;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			update_assignment_list_AST = (AST)currentAST.root;
			update_assignment_list_AST = ulist;
				  	SrcAST.setSpan(update_assignment_list_AST,u1_AST,u_AST);
				
			currentAST.root = update_assignment_list_AST;
			currentAST.child = update_assignment_list_AST!=null &&update_assignment_list_AST.getFirstChild()!=null ?
				update_assignment_list_AST.getFirstChild() : update_assignment_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = update_assignment_list_AST;
	}
	
	public final void where_cursor_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST where_cursor_clause_AST = null;
		AST c_AST = null;
		
		match(WHERE);
		match(CURRENT);
		match(OF);
		cursor_ref();
		c_AST = (AST)returnAST;
		astFactory.addASTChild(currentAST, returnAST);
		where_cursor_clause_AST = (AST)currentAST.root;
		returnAST = where_cursor_clause_AST;
	}
	
	public final void cursor_ref() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cursor_ref_AST = null;
		AST n_AST = null;
		Token  atID = null;
		AST atID_AST = null;
		
		{
		if ((_tokenSet_2.member(LA(1)))) {
			name();
			n_AST = (AST)returnAST;
		}
		else if ((LA(1)==AT_IDENT)) {
			atID = LT(1);
			atID_AST = astFactory.create(atID);
			match(AT_IDENT);
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			cursor_ref_AST = (AST)currentAST.root;
			cursor_ref_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CURSOR_REF,"cursor_ref")).add(n_AST).add(atID_AST)); 
				  	SrcAST.setSpan(cursor_ref_AST,((n_AST!=null)? n_AST : atID_AST));
				
			currentAST.root = cursor_ref_AST;
			currentAST.child = cursor_ref_AST!=null &&cursor_ref_AST.getFirstChild()!=null ?
				cursor_ref_AST.getFirstChild() : cursor_ref_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = cursor_ref_AST;
	}
	
	public final void pure_stmt_space_list(
		AST ast
	) throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST pure_stmt_space_list_AST = null;
		AST s_AST = null;
		Token  sc = null;
		AST sc_AST = null;
		
		try {      // for error handling
			tsql_stmt();
			s_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				ast.addChild(s_AST);
			}
			{
			switch ( LA(1)) {
			case SEMI_COLON:
			{
				sc = LT(1);
				sc_AST = astFactory.create(sc);
				match(SEMI_COLON);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				SrcAST.setSpan(ast,ast,((sc!=null)? sc_AST : s_AST));
			}
			{
			boolean synPredMatched971 = false;
			if (((_tokenSet_147.member(LA(1))) && (_tokenSet_8.member(LA(2))))) {
				int _m971 = mark();
				synPredMatched971 = true;
				inputState.guessing++;
				try {
					{
					stmt_beginning_token();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched971 = false;
				}
				rewind(_m971);
				inputState.guessing--;
			}
			if ( synPredMatched971 ) {
				pure_stmt_space_list(ast);
			}
			else if ((_tokenSet_148.member(LA(1))) && (_tokenSet_149.member(LA(2)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			if ( inputState.guessing==0 ) {
				pure_stmt_space_list_AST = (AST)currentAST.root;
				pure_stmt_space_list_AST = ast;
				currentAST.root = pure_stmt_space_list_AST;
				currentAST.child = pure_stmt_space_list_AST!=null &&pure_stmt_space_list_AST.getFirstChild()!=null ?
					pure_stmt_space_list_AST.getFirstChild() : pure_stmt_space_list_AST;
				currentAST.advanceChildToEnd();
			}
		}
		catch (RecognitionException ex) {
			if (inputState.guessing==0) {
				
				//	   	System.out.println("pure_stmt_space_list: "+ex);
					   		if (LA(1)!=END && LA(1)!=GO && LA(1)!=EOF) {
							   	AST us = error_statement();
								MessageDescriptor message = new MessageDescriptor(
									MessageConstants.UNKNOWN_STATEMENT_IGNORED,
									((SrcAST)us).getNodeInfo());
						
								((SrcAST)us).setErrorMsg(message);
								ast.addChild(us);
								
								//parse more stmts
								if (LA(1)!=END && LA(1)!=GO && LA(1)!=EOF) {
									pure_stmt_space_list(ast);
								}
					   		} 
						pure_stmt_space_list_AST = ast;
					
			} else {
				throw ex;
			}
		}
		returnAST = pure_stmt_space_list_AST;
	}
	
	public final void stmt_beginning_token() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST stmt_beginning_token_AST = null;
		
		switch ( LA(1)) {
		case CREATE:
		{
			AST tmp725_AST = null;
			tmp725_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp725_AST);
			match(CREATE);
			{
			switch ( LA(1)) {
			case TABLE:
			{
				AST tmp726_AST = null;
				tmp726_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp726_AST);
				match(TABLE);
				break;
			}
			case UNIQUE:
			{
				AST tmp727_AST = null;
				tmp727_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp727_AST);
				match(UNIQUE);
				break;
			}
			case CLUSTERED:
			{
				AST tmp728_AST = null;
				tmp728_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp728_AST);
				match(CLUSTERED);
				break;
			}
			case NONCLUSTERED:
			{
				AST tmp729_AST = null;
				tmp729_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp729_AST);
				match(NONCLUSTERED);
				break;
			}
			case INDEX:
			{
				AST tmp730_AST = null;
				tmp730_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp730_AST);
				match(INDEX);
				break;
			}
			case DATABASE:
			{
				AST tmp731_AST = null;
				tmp731_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp731_AST);
				match(DATABASE);
				break;
			}
			case VIEW:
			{
				AST tmp732_AST = null;
				tmp732_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp732_AST);
				match(VIEW);
				break;
			}
			case FUNCTION:
			{
				AST tmp733_AST = null;
				tmp733_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp733_AST);
				match(FUNCTION);
				break;
			}
			case DOMAIN:
			{
				AST tmp734_AST = null;
				tmp734_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp734_AST);
				match(DOMAIN);
				break;
			}
			case SCHEMA:
			{
				AST tmp735_AST = null;
				tmp735_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp735_AST);
				match(SCHEMA);
				break;
			}
			case STATISTICS:
			{
				AST tmp736_AST = null;
				tmp736_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp736_AST);
				match(STATISTICS);
				break;
			}
			case RULE:
			{
				AST tmp737_AST = null;
				tmp737_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp737_AST);
				match(RULE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case INSERT:
		{
			AST tmp738_AST = null;
			tmp738_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp738_AST);
			match(INSERT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case SELECT:
		{
			AST tmp739_AST = null;
			tmp739_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp739_AST);
			match(SELECT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case UPDATE:
		{
			AST tmp740_AST = null;
			tmp740_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp740_AST);
			match(UPDATE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DELETE:
		{
			AST tmp741_AST = null;
			tmp741_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp741_AST);
			match(DELETE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case BEGIN:
		{
			AST tmp742_AST = null;
			tmp742_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp742_AST);
			match(BEGIN);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case LPAREN:
		{
			AST tmp743_AST = null;
			tmp743_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp743_AST);
			match(LPAREN);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case ALTER:
		{
			AST tmp744_AST = null;
			tmp744_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp744_AST);
			match(ALTER);
			{
			switch ( LA(1)) {
			case PROC:
			{
				AST tmp745_AST = null;
				tmp745_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp745_AST);
				match(PROC);
				break;
			}
			case PROCEDURE:
			{
				AST tmp746_AST = null;
				tmp746_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp746_AST);
				match(PROCEDURE);
				break;
			}
			case TRIGGER:
			{
				AST tmp747_AST = null;
				tmp747_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp747_AST);
				match(TRIGGER);
				break;
			}
			case TABLE:
			{
				AST tmp748_AST = null;
				tmp748_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp748_AST);
				match(TABLE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DECLARE:
		{
			AST tmp749_AST = null;
			tmp749_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp749_AST);
			match(DECLARE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case OPEN:
		{
			AST tmp750_AST = null;
			tmp750_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp750_AST);
			match(OPEN);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case CHECKPOINT:
		{
			AST tmp751_AST = null;
			tmp751_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp751_AST);
			match(CHECKPOINT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DEALLOCATE:
		{
			AST tmp752_AST = null;
			tmp752_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp752_AST);
			match(DEALLOCATE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case CLOSE:
		{
			AST tmp753_AST = null;
			tmp753_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp753_AST);
			match(CLOSE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case FETCH:
		{
			AST tmp754_AST = null;
			tmp754_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp754_AST);
			match(FETCH);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case TRUNCATE:
		{
			AST tmp755_AST = null;
			tmp755_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp755_AST);
			match(TRUNCATE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case SETUSER:
		{
			AST tmp756_AST = null;
			tmp756_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp756_AST);
			match(SETUSER);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case COMMIT:
		{
			AST tmp757_AST = null;
			tmp757_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp757_AST);
			match(COMMIT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case ROLLBACK:
		{
			AST tmp758_AST = null;
			tmp758_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp758_AST);
			match(ROLLBACK);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DROP:
		{
			AST tmp759_AST = null;
			tmp759_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp759_AST);
			match(DROP);
			{
			switch ( LA(1)) {
			case VIEW:
			{
				AST tmp760_AST = null;
				tmp760_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp760_AST);
				match(VIEW);
				break;
			}
			case TABLE:
			{
				AST tmp761_AST = null;
				tmp761_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp761_AST);
				match(TABLE);
				break;
			}
			case DEFAULT:
			{
				AST tmp762_AST = null;
				tmp762_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp762_AST);
				match(DEFAULT);
				break;
			}
			case DATABASE:
			{
				AST tmp763_AST = null;
				tmp763_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp763_AST);
				match(DATABASE);
				break;
			}
			case INDEX:
			{
				AST tmp764_AST = null;
				tmp764_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp764_AST);
				match(INDEX);
				break;
			}
			case TRIGGER:
			{
				AST tmp765_AST = null;
				tmp765_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp765_AST);
				match(TRIGGER);
				break;
			}
			case PROC:
			{
				AST tmp766_AST = null;
				tmp766_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp766_AST);
				match(PROC);
				break;
			}
			case PROCEDURE:
			{
				AST tmp767_AST = null;
				tmp767_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp767_AST);
				match(PROCEDURE);
				break;
			}
			case RULE:
			{
				AST tmp768_AST = null;
				tmp768_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp768_AST);
				match(RULE);
				break;
			}
			case FUNCTION:
			{
				AST tmp769_AST = null;
				tmp769_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp769_AST);
				match(FUNCTION);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case CONTINUE:
		{
			AST tmp770_AST = null;
			tmp770_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp770_AST);
			match(CONTINUE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case BREAK:
		{
			AST tmp771_AST = null;
			tmp771_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp771_AST);
			match(BREAK);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case RETURN:
		{
			AST tmp772_AST = null;
			tmp772_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp772_AST);
			match(RETURN);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case GOTO:
		{
			AST tmp773_AST = null;
			tmp773_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp773_AST);
			match(GOTO);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case PRINT:
		{
			AST tmp774_AST = null;
			tmp774_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp774_AST);
			match(PRINT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case RAISERROR:
		{
			AST tmp775_AST = null;
			tmp775_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp775_AST);
			match(RAISERROR);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case IF:
		{
			AST tmp776_AST = null;
			tmp776_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp776_AST);
			match(IF);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case WHILE:
		{
			AST tmp777_AST = null;
			tmp777_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp777_AST);
			match(WHILE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DUMP:
		{
			AST tmp778_AST = null;
			tmp778_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp778_AST);
			match(DUMP);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case EXEC:
		{
			AST tmp779_AST = null;
			tmp779_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp779_AST);
			match(EXEC);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case EXECUTE:
		{
			AST tmp780_AST = null;
			tmp780_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp780_AST);
			match(EXECUTE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case SAVE:
		{
			AST tmp781_AST = null;
			tmp781_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp781_AST);
			match(SAVE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case USE:
		{
			AST tmp782_AST = null;
			tmp782_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp782_AST);
			match(USE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case WAITFOR:
		{
			AST tmp783_AST = null;
			tmp783_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp783_AST);
			match(WAITFOR);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case READTEXT:
		{
			AST tmp784_AST = null;
			tmp784_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp784_AST);
			match(READTEXT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case WRITETEXT:
		{
			AST tmp785_AST = null;
			tmp785_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp785_AST);
			match(WRITETEXT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case UPDATETEXT:
		{
			AST tmp786_AST = null;
			tmp786_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp786_AST);
			match(UPDATETEXT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case KILL:
		{
			AST tmp787_AST = null;
			tmp787_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp787_AST);
			match(KILL);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case SHUTDOWN:
		{
			AST tmp788_AST = null;
			tmp788_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp788_AST);
			match(SHUTDOWN);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case BACKUP:
		{
			AST tmp789_AST = null;
			tmp789_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp789_AST);
			match(BACKUP);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case RESTORE:
		{
			AST tmp790_AST = null;
			tmp790_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp790_AST);
			match(RESTORE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DBCC:
		{
			AST tmp791_AST = null;
			tmp791_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp791_AST);
			match(DBCC);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case BULK:
		{
			AST tmp792_AST = null;
			tmp792_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp792_AST);
			match(BULK);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case LOCK:
		{
			AST tmp793_AST = null;
			tmp793_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp793_AST);
			match(LOCK);
			AST tmp794_AST = null;
			tmp794_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp794_AST);
			match(TABLE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case GRANT:
		{
			AST tmp795_AST = null;
			tmp795_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp795_AST);
			match(GRANT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case REVOKE:
		{
			AST tmp796_AST = null;
			tmp796_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp796_AST);
			match(REVOKE);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case DENY:
		{
			AST tmp797_AST = null;
			tmp797_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp797_AST);
			match(DENY);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case SET:
		{
			AST tmp798_AST = null;
			tmp798_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp798_AST);
			match(SET);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case PRAGMA_ML_COMMENT:
		{
			AST tmp799_AST = null;
			tmp799_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp799_AST);
			match(PRAGMA_ML_COMMENT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		case PRAGMA_SL_COMMENT:
		{
			AST tmp800_AST = null;
			tmp800_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp800_AST);
			match(PRAGMA_SL_COMMENT);
			stmt_beginning_token_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = stmt_beginning_token_AST;
	}
	
	public final void create_procedure_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_procedure_stmt_AST = null;
		Token  c = null;
		AST c_AST = null;
		AST qp_AST = null;
		AST p_num_AST = null;
		AST params_AST = null;
		AST stmts_AST = null;
		AST procNum = null;
		AST createProc = null;
		
		c = LT(1);
		c_AST = astFactory.create(c);
		match(CREATE);
		{
		switch ( LA(1)) {
		case PROC:
		{
			AST tmp801_AST = null;
			tmp801_AST = astFactory.create(LT(1));
			match(PROC);
			break;
		}
		case PROCEDURE:
		{
			AST tmp802_AST = null;
			tmp802_AST = astFactory.create(LT(1));
			match(PROCEDURE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		qual_procedure_name();
		qp_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case SEMI_COLON:
		{
			proc_num();
			p_num_AST = (AST)returnAST;
			break;
		}
		case WITH:
		case AS:
		case FOR:
		case LPAREN:
		case AT_IDENT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case LPAREN:
		case AT_IDENT:
		{
			proc_param_list();
			params_AST = (AST)returnAST;
			break;
		}
		case WITH:
		case AS:
		case FOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			break;
		}
		case AS:
		case FOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case FOR:
		{
			for_replication();
			break;
		}
		case AS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			createProc = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(CREATE_PROCEDURE_STMT,"create_procedure_stmt")).add(qp_AST).add(p_num_AST).add(params_AST));
				
		}
		AST tmp803_AST = null;
		tmp803_AST = astFactory.create(LT(1));
		match(AS);
		{
		stmt_space_list(createProc);
		stmts_AST = (AST)returnAST;
		}
		if ( inputState.guessing==0 ) {
			create_procedure_stmt_AST = (AST)currentAST.root;
			create_procedure_stmt_AST = createProc;
				   SrcAST.setSpan(create_procedure_stmt_AST,c_AST,stmts_AST);
				
			currentAST.root = create_procedure_stmt_AST;
			currentAST.child = create_procedure_stmt_AST!=null &&create_procedure_stmt_AST.getFirstChild()!=null ?
				create_procedure_stmt_AST.getFirstChild() : create_procedure_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = create_procedure_stmt_AST;
	}
	
	public final void proc_num() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_num_AST = null;
		Token  num = null;
		AST num_AST = null;
		
		AST tmp804_AST = null;
		tmp804_AST = astFactory.create(LT(1));
		match(SEMI_COLON);
		num = LT(1);
		num_AST = astFactory.create(num);
		match(NUM_INT);
		if ( inputState.guessing==0 ) {
			proc_num_AST = (AST)currentAST.root;
			proc_num_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(PROC_NUMBER,"proc_number")).add(num_AST));
			currentAST.root = proc_num_AST;
			currentAST.child = proc_num_AST!=null &&proc_num_AST.getFirstChild()!=null ?
				proc_num_AST.getFirstChild() : proc_num_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = proc_num_AST;
	}
	
	public final void alter_procedure_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alter_procedure_stmt_AST = null;
		AST qp_AST = null;
		AST p_num_AST = null;
		AST params_AST = null;
		AST stmts_AST = null;
		AST alterProc = null;
		
		AST tmp805_AST = null;
		tmp805_AST = astFactory.create(LT(1));
		match(ALTER);
		{
		switch ( LA(1)) {
		case PROC:
		{
			AST tmp806_AST = null;
			tmp806_AST = astFactory.create(LT(1));
			match(PROC);
			break;
		}
		case PROCEDURE:
		{
			AST tmp807_AST = null;
			tmp807_AST = astFactory.create(LT(1));
			match(PROCEDURE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		qual_procedure_name();
		qp_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case SEMI_COLON:
		{
			proc_num();
			p_num_AST = (AST)returnAST;
			break;
		}
		case LPAREN:
		case AT_IDENT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		proc_param_list();
		params_AST = (AST)returnAST;
		}
		{
		switch ( LA(1)) {
		case WITH:
		{
			with_identifier();
			break;
		}
		case AS:
		case FOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case FOR:
		{
			for_replication();
			break;
		}
		case AS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			alterProc = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(ALTER_PROCEDURE_STMT,"alter_procedure_stmt")).add(qp_AST).add(p_num_AST).add(params_AST));
				
		}
		AST tmp808_AST = null;
		tmp808_AST = astFactory.create(LT(1));
		match(AS);
		{
		stmt_space_list(alterProc);
		stmts_AST = (AST)returnAST;
		}
		if ( inputState.guessing==0 ) {
			alter_procedure_stmt_AST = (AST)currentAST.root;
			alter_procedure_stmt_AST=alterProc;
			currentAST.root = alter_procedure_stmt_AST;
			currentAST.child = alter_procedure_stmt_AST!=null &&alter_procedure_stmt_AST.getFirstChild()!=null ?
				alter_procedure_stmt_AST.getFirstChild() : alter_procedure_stmt_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = alter_procedure_stmt_AST;
	}
	
	public final void qual_procedure_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_procedure_name_AST = null;
		AST p_AST = null;
		AST o_AST = null;
		AST p2_AST = null;
		
		if ((_tokenSet_2.member(LA(1))) && (_tokenSet_150.member(LA(2)))) {
			name();
			p_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_procedure_name_AST = (AST)currentAST.root;
				qual_procedure_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(QUAL_PROCEDURE_NAME,"qual_procedure_name")).add(p_AST)); 
					    SrcAST.setSpan(qual_procedure_name_AST,p_AST);
					
				currentAST.root = qual_procedure_name_AST;
				currentAST.child = qual_procedure_name_AST!=null &&qual_procedure_name_AST.getFirstChild()!=null ?
					qual_procedure_name_AST.getFirstChild() : qual_procedure_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
			owner_name();
			o_AST = (AST)returnAST;
			AST tmp809_AST = null;
			tmp809_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			p2_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_procedure_name_AST = (AST)currentAST.root;
				qual_procedure_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(QUAL_PROCEDURE_NAME,"qual_procedure_name")).add(o_AST).add(p2_AST));
					    SrcAST.setSpan(qual_procedure_name_AST,o_AST,p2_AST);
					
				currentAST.root = qual_procedure_name_AST;
				currentAST.child = qual_procedure_name_AST!=null &&qual_procedure_name_AST.getFirstChild()!=null ?
					qual_procedure_name_AST.getFirstChild() : qual_procedure_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = qual_procedure_name_AST;
	}
	
	public final void proc_param_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_param_list_AST = null;
		
		switch ( LA(1)) {
		case LPAREN:
		{
			match(LPAREN);
			proc_params();
			astFactory.addASTChild(currentAST, returnAST);
			match(RPAREN);
			proc_param_list_AST = (AST)currentAST.root;
			break;
		}
		case AT_IDENT:
		{
			proc_params();
			astFactory.addASTChild(currentAST, returnAST);
			proc_param_list_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = proc_param_list_AST;
	}
	
	public final void proc_param() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_param_AST = null;
		Token  atID = null;
		AST atID_AST = null;
		AST dt_AST = null;
		AST def_AST = null;
		Token  o1 = null;
		AST o1_AST = null;
		Token  o2 = null;
		AST o2_AST = null;
		Token  atID2 = null;
		AST atID2_AST = null;
		Token  v = null;
		AST v_AST = null;
		Token  o3 = null;
		AST o3_AST = null;
		Token  o4 = null;
		AST o4_AST = null;
		
		if ((LA(1)==AT_IDENT) && (_tokenSet_151.member(LA(2)))) {
			atID = LT(1);
			atID_AST = astFactory.create(atID);
			match(AT_IDENT);
			{
			if ((LA(1)==AS)) {
				AST tmp812_AST = null;
				tmp812_AST = astFactory.create(LT(1));
				match(AS);
			}
			else if ((_tokenSet_49.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			datatype();
			dt_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case EQUAL:
			{
				AST tmp813_AST = null;
				tmp813_AST = astFactory.create(LT(1));
				match(EQUAL);
				default_exp();
				def_AST = (AST)returnAST;
				break;
			}
			case WITH:
			case AS:
			case FOR:
			case OUTPUT:
			case OUT:
			case COMMA:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case OUTPUT:
			{
				o1 = LT(1);
				o1_AST = astFactory.create(o1);
				match(OUTPUT);
				break;
			}
			case OUT:
			{
				o2 = LT(1);
				o2_AST = astFactory.create(o2);
				match(OUT);
				break;
			}
			case WITH:
			case AS:
			case FOR:
			case COMMA:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				proc_param_AST = (AST)currentAST.root;
				proc_param_AST = (AST)astFactory.make( (new ASTArray(6)).add(astFactory.create(PROC_PARAM,"proc_param")).add(atID_AST).add(dt_AST).add(def_AST).add(o1_AST).add(o2_AST)); 
					  AST[] left = {atID_AST};
					  AST[] right = {dt_AST,def_AST,o1_AST,o2_AST};
					  SrcAST.setSpan(proc_param_AST,left,right);
					
				currentAST.root = proc_param_AST;
				currentAST.child = proc_param_AST!=null &&proc_param_AST.getFirstChild()!=null ?
					proc_param_AST.getFirstChild() : proc_param_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((LA(1)==AT_IDENT) && (LA(2)==CURSOR)) {
			atID2 = LT(1);
			atID2_AST = astFactory.create(atID2);
			match(AT_IDENT);
			AST tmp814_AST = null;
			tmp814_AST = astFactory.create(LT(1));
			match(CURSOR);
			v = LT(1);
			v_AST = astFactory.create(v);
			match(VARYING);
			{
			switch ( LA(1)) {
			case OUTPUT:
			{
				o3 = LT(1);
				o3_AST = astFactory.create(o3);
				match(OUTPUT);
				break;
			}
			case OUT:
			{
				o4 = LT(1);
				o4_AST = astFactory.create(o4);
				match(OUT);
				break;
			}
			case WITH:
			case AS:
			case FOR:
			case COMMA:
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				proc_param_AST = (AST)currentAST.root;
				proc_param_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(PROC_PARAM,"proc_param")).add(astFactory.create(UNSUPPORTED,"unsupported"))); 
					   AST[] left = {atID2_AST};
					   AST[] right = {dt_AST,v_AST,o3_AST,o4_AST};
					   SrcAST.setSpan(proc_param_AST,left,right);
					
				currentAST.root = proc_param_AST;
				currentAST.child = proc_param_AST!=null &&proc_param_AST.getFirstChild()!=null ?
					proc_param_AST.getFirstChild() : proc_param_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = proc_param_AST;
	}
	
	public final void proc_params() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_params_AST = null;
		AST p1_AST = null;
		AST p_AST = null;
		AST param_list = astFactory.create(PROC_PARAM_LIST,"proc_param_list");
		
		proc_param();
		p1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			param_list.addChild(p1_AST);
		}
		{
		_loop1002:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				proc_param();
				p_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					param_list.addChild(p_AST);
				}
			}
			else {
				break _loop1002;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			proc_params_AST = (AST)currentAST.root;
			proc_params_AST = param_list; 
			SrcAST.setSpan(proc_params_AST,p1_AST,p_AST);
			
			currentAST.root = proc_params_AST;
			currentAST.child = proc_params_AST!=null &&proc_params_AST.getFirstChild()!=null ?
				proc_params_AST.getFirstChild() : proc_params_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = proc_params_AST;
	}
	
	public final void create_trigger_stmt() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST create_trigger_stmt_AST = null;
		Token  cr = null;
		AST cr_AST = null;
		Token  alt = null;
		AST alt_AST = null;
		AST trgr_name_AST = null;
		AST time_AST = null;
		AST events_AST = null;
		AST tbl_name_AST = null;
		AST ref_AST = null;
		AST for_AST = null;
		AST cond_AST = null;
		AST body_AST = null;
		AST t2_AST = null;
		AST time1_AST = null;
		AST events1_AST = null;
		AST stmts1_AST = null;
		AST trgr = null;
		
		{
		switch ( LA(1)) {
		case CREATE:
		{
			cr = LT(1);
			cr_AST = astFactory.create(cr);
			match(CREATE);
			break;
		}
		case ALTER:
		{
			alt = LT(1);
			alt_AST = astFactory.create(alt);
			match(ALTER);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp816_AST = null;
		tmp816_AST = astFactory.create(LT(1));
		match(TRIGGER);
		qual_trigger_name();
		trgr_name_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case FOR:
		case AFTER:
		case BEFORE:
		case INSTEAD:
		case RESOLVE:
		{
			trigger_time();
			time_AST = (AST)returnAST;
			trigger_event_list();
			events_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case ORDER:
			{
				trigger_order();
				break;
			}
			case ON:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp817_AST = null;
			tmp817_AST = astFactory.create(LT(1));
			match(ON);
			simple_qual_table_name();
			tbl_name_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case REFERENCING:
			{
				trigger_reference_clause();
				ref_AST = (AST)returnAST;
				break;
			}
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case FOR:
			case SELECT:
			case WHEN:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case FOR:
			{
				trigger_for_each_clause();
				for_AST = (AST)returnAST;
				break;
			}
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case WHEN:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case WHEN:
			{
				search_cond();
				cond_AST = (AST)returnAST;
				break;
			}
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				create_trigger_stmt_AST = (AST)currentAST.root;
				trgr = (AST)astFactory.make( (new ASTArray(8)).add(astFactory.create(ASA_TRIGGER,"asa_trigger")).add(trgr_name_AST).add(time_AST).add(events_AST).add(tbl_name_AST).add(ref_AST).add(for_AST).add(cond_AST));
					  		  create_trigger_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CREATE_TRIGGER_STMT,"create_trigger_stmt")).add(trgr));
					 		
				currentAST.root = create_trigger_stmt_AST;
				currentAST.child = create_trigger_stmt_AST!=null &&create_trigger_stmt_AST.getFirstChild()!=null ?
					create_trigger_stmt_AST.getFirstChild() : create_trigger_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			stmt_space_list(trgr);
			body_AST = (AST)returnAST;
			break;
		}
		case ON:
		{
			AST tmp818_AST = null;
			tmp818_AST = astFactory.create(LT(1));
			match(ON);
			simple_qual_table_name();
			t2_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case WITH:
			{
				with_identifier();
				break;
			}
			case FOR:
			case AFTER:
			case BEFORE:
			case INSTEAD:
			case RESOLVE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			trigger_time();
			time1_AST = (AST)returnAST;
			trigger_event_list();
			events1_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case WITH:
			{
				with_identifier();
				break;
			}
			case NOT:
			case AS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case NOT:
			{
				notForReplication();
				break;
			}
			case AS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				create_trigger_stmt_AST = (AST)currentAST.root;
				
					 			trgr = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(SQLSERVER_TRIGGER,"sqlserver_trigger")).add(trgr_name_AST).add(t2_AST).add(time1_AST).add(events1_AST));
					 			create_trigger_stmt_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CREATE_TRIGGER_STMT,"create_trigger_stmt")).add(trgr));
					 		
				currentAST.root = create_trigger_stmt_AST;
				currentAST.child = create_trigger_stmt_AST!=null &&create_trigger_stmt_AST.getFirstChild()!=null ?
					create_trigger_stmt_AST.getFirstChild() : create_trigger_stmt_AST;
				currentAST.advanceChildToEnd();
			}
			AST tmp819_AST = null;
			tmp819_AST = astFactory.create(LT(1));
			match(AS);
			{
			stmt_space_list(trgr);
			stmts1_AST = (AST)returnAST;
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			create_trigger_stmt_AST = (AST)currentAST.root;
			
				 	  if (alt != null) 
							{ create_trigger_stmt_AST.setType(ALTER_TRIGGER_STMT); create_trigger_stmt_AST.setText ("alter_trigger_stmt"); }
				 	
		}
		returnAST = create_trigger_stmt_AST;
	}
	
	public final void trigger_time() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_time_AST = null;
		Token  b = null;
		AST b_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  f = null;
		AST f_AST = null;
		Token  i = null;
		AST i_AST = null;
		
		{
		switch ( LA(1)) {
		case BEFORE:
		{
			b = LT(1);
			b_AST = astFactory.create(b);
			match(BEFORE);
			break;
		}
		case AFTER:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(AFTER);
			break;
		}
		case RESOLVE:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(RESOLVE);
			break;
		}
		case FOR:
		{
			f = LT(1);
			f_AST = astFactory.create(f);
			match(FOR);
			break;
		}
		case INSTEAD:
		{
			i = LT(1);
			i_AST = astFactory.create(i);
			match(INSTEAD);
			AST tmp820_AST = null;
			tmp820_AST = astFactory.create(LT(1));
			match(OF);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			trigger_time_AST = (AST)currentAST.root;
			trigger_time_AST = (AST)astFactory.make( (new ASTArray(6)).add(astFactory.create(TRIGGER_TIME,"trigger_time")).add(b_AST).add(a_AST).add(r_AST).add(f_AST).add(i_AST));
			currentAST.root = trigger_time_AST;
			currentAST.child = trigger_time_AST!=null &&trigger_time_AST.getFirstChild()!=null ?
				trigger_time_AST.getFirstChild() : trigger_time_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = trigger_time_AST;
	}
	
	public final void trigger_event_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_event_list_AST = null;
		AST e_AST = null;
		AST e1_AST = null;
		AST events = astFactory.create(TRIGGER_EVENT_LIST,"trigger_event_list");
		
		trigger_event();
		e_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			events.addChild(e_AST);
		}
		{
		_loop1023:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				trigger_event();
				e1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					events.addChild(e1_AST);
				}
			}
			else {
				break _loop1023;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			trigger_event_list_AST = (AST)currentAST.root;
			trigger_event_list_AST = events;
			currentAST.root = trigger_event_list_AST;
			currentAST.child = trigger_event_list_AST!=null &&trigger_event_list_AST.getFirstChild()!=null ?
				trigger_event_list_AST.getFirstChild() : trigger_event_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = trigger_event_list_AST;
	}
	
	public final void trigger_order() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_order_AST = null;
		
		AST tmp822_AST = null;
		tmp822_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp822_AST);
		match(ORDER);
		AST tmp823_AST = null;
		tmp823_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp823_AST);
		match(NUM_INT);
		trigger_order_AST = (AST)currentAST.root;
		returnAST = trigger_order_AST;
	}
	
	public final void simple_qual_table_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_qual_table_name_AST = null;
		AST o_AST = null;
		AST t_AST = null;
		AST t2_AST = null;
		AST t3_AST = null;
		
		boolean synPredMatched1036 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m1036 = mark();
			synPredMatched1036 = true;
			inputState.guessing++;
			try {
				{
				owner_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1036 = false;
			}
			rewind(_m1036);
			inputState.guessing--;
		}
		if ( synPredMatched1036 ) {
			owner_name();
			o_AST = (AST)returnAST;
			AST tmp824_AST = null;
			tmp824_AST = astFactory.create(LT(1));
			match(DOT);
			table_name();
			t_AST = (AST)returnAST;
		}
		else if ((LA(1)==DOT)) {
			AST tmp825_AST = null;
			tmp825_AST = astFactory.create(LT(1));
			match(DOT);
			table_name();
			t2_AST = (AST)returnAST;
		}
		else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_152.member(LA(2)))) {
			table_name();
			t3_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				simple_qual_table_name_AST = (AST)currentAST.root;
				simple_qual_table_name_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(QUALIFIED_TABLE_NAME,"qualified_table_name")).add(o_AST).add(t_AST).add(t2_AST).add(t3_AST));
				currentAST.root = simple_qual_table_name_AST;
				currentAST.child = simple_qual_table_name_AST!=null &&simple_qual_table_name_AST.getFirstChild()!=null ?
					simple_qual_table_name_AST.getFirstChild() : simple_qual_table_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = simple_qual_table_name_AST;
	}
	
	public final void trigger_reference_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_reference_clause_AST = null;
		AST ref_AST = null;
		AST rlist = astFactory.create(TRIGGER_REFERENCE_LIST,"trigger_reference_list");
		
		match(REFERENCING);
		{
		int _cnt1029=0;
		_loop1029:
		do {
			if ((_tokenSet_153.member(LA(1)))) {
				trigger_reference();
				ref_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					rlist.addChild(ref_AST);
				}
			}
			else {
				if ( _cnt1029>=1 ) { break _loop1029; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt1029++;
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			trigger_reference_clause_AST = (AST)currentAST.root;
			trigger_reference_clause_AST = rlist;
			currentAST.root = trigger_reference_clause_AST;
			currentAST.child = trigger_reference_clause_AST!=null &&trigger_reference_clause_AST.getFirstChild()!=null ?
				trigger_reference_clause_AST.getFirstChild() : trigger_reference_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = trigger_reference_clause_AST;
	}
	
	public final void trigger_for_each_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_for_each_clause_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  s = null;
		AST s_AST = null;
		
		AST tmp827_AST = null;
		tmp827_AST = astFactory.create(LT(1));
		match(FOR);
		match(EACH);
		{
		switch ( LA(1)) {
		case ROW:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(ROW);
			break;
		}
		case STATEMENT:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			match(STATEMENT);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			trigger_for_each_clause_AST = (AST)currentAST.root;
			trigger_for_each_clause_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TRIGGER_FOR_EACH,"trigger_for_each")).add(r_AST).add(s_AST));
			currentAST.root = trigger_for_each_clause_AST;
			currentAST.child = trigger_for_each_clause_AST!=null &&trigger_for_each_clause_AST.getFirstChild()!=null ?
				trigger_for_each_clause_AST.getFirstChild() : trigger_for_each_clause_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = trigger_for_each_clause_AST;
	}
	
	public final void search_cond() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST search_cond_AST = null;
		
		match(WHEN);
		cond_expr();
		astFactory.addASTChild(currentAST, returnAST);
		search_cond_AST = (AST)currentAST.root;
		returnAST = search_cond_AST;
	}
	
	public final void trigger_event() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_event_AST = null;
		AST clist_AST = null;
		
		switch ( LA(1)) {
		case DELETE:
		{
			AST tmp830_AST = null;
			tmp830_AST = astFactory.create(LT(1));
			match(DELETE);
			if ( inputState.guessing==0 ) {
				trigger_event_AST = (AST)currentAST.root;
				trigger_event_AST = astFactory.create(ON_DELETE,"on_delete");
				currentAST.root = trigger_event_AST;
				currentAST.child = trigger_event_AST!=null &&trigger_event_AST.getFirstChild()!=null ?
					trigger_event_AST.getFirstChild() : trigger_event_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case INSERT:
		{
			AST tmp831_AST = null;
			tmp831_AST = astFactory.create(LT(1));
			match(INSERT);
			if ( inputState.guessing==0 ) {
				trigger_event_AST = (AST)currentAST.root;
				trigger_event_AST = astFactory.create(ON_INSERT,"on_insert");
				currentAST.root = trigger_event_AST;
				currentAST.child = trigger_event_AST!=null &&trigger_event_AST.getFirstChild()!=null ?
					trigger_event_AST.getFirstChild() : trigger_event_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case UPDATE:
		{
			AST tmp832_AST = null;
			tmp832_AST = astFactory.create(LT(1));
			match(UPDATE);
			{
			switch ( LA(1)) {
			case OF:
			{
				AST tmp833_AST = null;
				tmp833_AST = astFactory.create(LT(1));
				match(OF);
				column_list();
				clist_AST = (AST)returnAST;
				break;
			}
			case NOT:
			case WITH:
			case ON:
			case AS:
			case ORDER:
			case COMMA:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				trigger_event_AST = (AST)currentAST.root;
				trigger_event_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(ON_UPDATE,"on_update")).add(clist_AST));
				currentAST.root = trigger_event_AST;
				currentAST.child = trigger_event_AST!=null &&trigger_event_AST.getFirstChild()!=null ?
					trigger_event_AST.getFirstChild() : trigger_event_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = trigger_event_AST;
	}
	
	public final void trigger_reference() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trigger_reference_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST ref_AST = null;
		
		{
		switch ( LA(1)) {
		case OLD:
		{
			o = LT(1);
			o_AST = astFactory.create(o);
			match(OLD);
			break;
		}
		case NEW:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NEW);
			break;
		}
		case REMOTE:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(REMOTE);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		AST tmp834_AST = null;
		tmp834_AST = astFactory.create(LT(1));
		match(AS);
		name();
		ref_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			trigger_reference_AST = (AST)currentAST.root;
			trigger_reference_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(TRIGGER_REFERENCE,"trigger_reference")).add(o_AST).add(n_AST).add(r_AST).add(ref_AST));
			currentAST.root = trigger_reference_AST;
			currentAST.child = trigger_reference_AST!=null &&trigger_reference_AST.getFirstChild()!=null ?
				trigger_reference_AST.getFirstChild() : trigger_reference_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = trigger_reference_AST;
	}
	
	public final void with_view_attr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_view_attr_AST = null;
		
		AST tmp835_AST = null;
		tmp835_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp835_AST);
		match(WITH);
		table_hint_list();
		astFactory.addASTChild(currentAST, returnAST);
		with_view_attr_AST = (AST)currentAST.root;
		returnAST = with_view_attr_AST;
	}
	
	public final void sql_server_cursor_options() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sql_server_cursor_options_AST = null;
		
		{
		switch ( LA(1)) {
		case LOCAL:
		{
			AST tmp836_AST = null;
			tmp836_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp836_AST);
			match(LOCAL);
			break;
		}
		case GLOBAL:
		{
			AST tmp837_AST = null;
			tmp837_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp837_AST);
			match(GLOBAL);
			break;
		}
		case FOR:
		case DYNAMIC:
		case FAST_FORWARD:
		case FORWARD_ONLY:
		case KEYSET:
		case OPTIMISTIC:
		case READ_ONLY:
		case SCROLL:
		case STATIC:
		case TYPE_WARNING:
		case LITERAL_scroll_locks:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case FORWARD_ONLY:
		{
			AST tmp838_AST = null;
			tmp838_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp838_AST);
			match(FORWARD_ONLY);
			break;
		}
		case SCROLL:
		{
			AST tmp839_AST = null;
			tmp839_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp839_AST);
			match(SCROLL);
			break;
		}
		case FOR:
		case DYNAMIC:
		case FAST_FORWARD:
		case KEYSET:
		case OPTIMISTIC:
		case READ_ONLY:
		case STATIC:
		case TYPE_WARNING:
		case LITERAL_scroll_locks:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case STATIC:
		{
			AST tmp840_AST = null;
			tmp840_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp840_AST);
			match(STATIC);
			break;
		}
		case KEYSET:
		{
			AST tmp841_AST = null;
			tmp841_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp841_AST);
			match(KEYSET);
			break;
		}
		case DYNAMIC:
		{
			AST tmp842_AST = null;
			tmp842_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp842_AST);
			match(DYNAMIC);
			break;
		}
		case FAST_FORWARD:
		{
			AST tmp843_AST = null;
			tmp843_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp843_AST);
			match(FAST_FORWARD);
			break;
		}
		case FOR:
		case OPTIMISTIC:
		case READ_ONLY:
		case TYPE_WARNING:
		case LITERAL_scroll_locks:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case READ_ONLY:
		{
			AST tmp844_AST = null;
			tmp844_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp844_AST);
			match(READ_ONLY);
			break;
		}
		case LITERAL_scroll_locks:
		{
			AST tmp845_AST = null;
			tmp845_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp845_AST);
			match(LITERAL_scroll_locks);
			break;
		}
		case OPTIMISTIC:
		{
			AST tmp846_AST = null;
			tmp846_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp846_AST);
			match(OPTIMISTIC);
			break;
		}
		case FOR:
		case TYPE_WARNING:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case TYPE_WARNING:
		{
			AST tmp847_AST = null;
			tmp847_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp847_AST);
			match(TYPE_WARNING);
			break;
		}
		case FOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		sql_server_cursor_options_AST = (AST)currentAST.root;
		returnAST = sql_server_cursor_options_AST;
	}
	
	public final void fetch_index() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fetch_index_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  b = null;
		AST b_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  e = null;
		AST e_AST = null;
		Token  f = null;
		AST f_AST = null;
		AST n_AST = null;
		Token  fr = null;
		AST fr_AST = null;
		
		{
		switch ( LA(1)) {
		case NEXT:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(NEXT);
			break;
		}
		case PRIOR:
		{
			b = LT(1);
			b_AST = astFactory.create(b);
			match(PRIOR);
			break;
		}
		case FIRST:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			match(FIRST);
			break;
		}
		case LAST:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			match(LAST);
			break;
		}
		case ABSOLUTE:
		case RELATIVE:
		{
			{
			switch ( LA(1)) {
			case ABSOLUTE:
			{
				e = LT(1);
				e_AST = astFactory.create(e);
				match(ABSOLUTE);
				break;
			}
			case RELATIVE:
			{
				f = LT(1);
				f_AST = astFactory.create(f);
				match(RELATIVE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			rowNum();
			n_AST = (AST)returnAST;
			break;
		}
		case FROM:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		fr = LT(1);
		fr_AST = astFactory.create(fr);
		match(FROM);
		if ( inputState.guessing==0 ) {
			fetch_index_AST = (AST)currentAST.root;
			fetch_index_AST = (AST)astFactory.make( (new ASTArray(8)).add(astFactory.create(FETCH_INDEX,"fetch_index")).add(a_AST).add(b_AST).add(c_AST).add(d_AST).add(e_AST).add(f_AST).add(n_AST)); 
				    AST[] left = {n_AST,fr_AST};
				    AST[] right = {fr_AST};
				    SrcAST.setSpan(fetch_index_AST,left,right);
				
			currentAST.root = fetch_index_AST;
			currentAST.child = fetch_index_AST!=null &&fetch_index_AST.getFirstChild()!=null ?
				fetch_index_AST.getFirstChild() : fetch_index_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = fetch_index_AST;
	}
	
	public final void fetch_target_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fetch_target_list_AST = null;
		AST f_AST = null;
		AST f1_AST = null;
		AST ft_list = astFactory.create(FETCH_TARGET_LIST,"fetch_target_list");
		
		fetch_target();
		f_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			ft_list.addChild(f_AST);
		}
		{
		_loop1072:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				fetch_target();
				f1_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					ft_list.addChild(f1_AST);
				}
			}
			else {
				break _loop1072;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			fetch_target_list_AST = (AST)currentAST.root;
			fetch_target_list_AST = ft_list; 
				    SrcAST.setSpan(fetch_target_list_AST,f_AST,f1_AST); 
				
			currentAST.root = fetch_target_list_AST;
			currentAST.child = fetch_target_list_AST!=null &&fetch_target_list_AST.getFirstChild()!=null ?
				fetch_target_list_AST.getFirstChild() : fetch_target_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = fetch_target_list_AST;
	}
	
	public final void rowNum() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST rowNum_AST = null;
		AST a_AST = null;
		Token  b = null;
		AST b_AST = null;
		
		{
		switch ( LA(1)) {
		case NUM_INT:
		case PLUS:
		case MINUS:
		{
			unsigned_num_int();
			a_AST = (AST)returnAST;
			break;
		}
		case AT_IDENT:
		{
			b = LT(1);
			b_AST = astFactory.create(b);
			match(AT_IDENT);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			rowNum_AST = (AST)currentAST.root;
			rowNum_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(FETCH_VALUE,"fetch_value")).add(a_AST).add(b_AST)); 
				    SrcAST.setSpan(rowNum_AST,(a_AST!=null)? a_AST : b_AST);
				
			currentAST.root = rowNum_AST;
			currentAST.child = rowNum_AST!=null &&rowNum_AST.getFirstChild()!=null ?
				rowNum_AST.getFirstChild() : rowNum_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = rowNum_AST;
	}
	
	public final void fetch_target() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fetch_target_AST = null;
		Token  id = null;
		AST id_AST = null;
		
		id = LT(1);
		id_AST = astFactory.create(id);
		astFactory.addASTChild(currentAST, id_AST);
		match(AT_IDENT);
		fetch_target_AST = (AST)currentAST.root;
		returnAST = fetch_target_AST;
	}
	
	public final void opt_with_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST opt_with_clause_AST = null;
		
		AST tmp849_AST = null;
		tmp849_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp849_AST);
		match(WITH);
		AST tmp850_AST = null;
		tmp850_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp850_AST);
		match(PASSWD);
		char_string_lit();
		astFactory.addASTChild(currentAST, returnAST);
		opt_with_clause_AST = (AST)currentAST.root;
		returnAST = opt_with_clause_AST;
	}
	
	public final void alter_role_set_options() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alter_role_set_options_AST = null;
		
		switch ( LA(1)) {
		case PASSWD:
		{
			AST tmp851_AST = null;
			tmp851_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp851_AST);
			match(PASSWD);
			AST tmp852_AST = null;
			tmp852_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp852_AST);
			match(EXPIRATION);
			alter_role_set_options_AST = (AST)currentAST.root;
			break;
		}
		case MAX:
		case MIN:
		{
			{
			switch ( LA(1)) {
			case MIN:
			{
				AST tmp853_AST = null;
				tmp853_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp853_AST);
				match(MIN);
				break;
			}
			case MAX:
			{
				AST tmp854_AST = null;
				tmp854_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp854_AST);
				match(MAX);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp855_AST = null;
			tmp855_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp855_AST);
			match(PASSWD);
			AST tmp856_AST = null;
			tmp856_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp856_AST);
			match(LENGTH);
			alter_role_set_options_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = alter_role_set_options_AST;
	}
	
	public final void declaration_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_list_AST = null;
		
		declaration();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1101:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				declaration();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1101;
			}
			
		} while (true);
		}
		declaration_list_AST = (AST)currentAST.root;
		returnAST = declaration_list_AST;
	}
	
	public final void declaration() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_AST = null;
		Token  i = null;
		AST i_AST = null;
		AST dt_AST = null;
		Token  cur = null;
		AST cur_AST = null;
		AST def_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		
		i = LT(1);
		i_AST = astFactory.create(i);
		match(AT_IDENT);
		{
		switch ( LA(1)) {
		case CURSOR:
		{
			cur = LT(1);
			cur_AST = astFactory.create(cur);
			match(CURSOR);
			if ( inputState.guessing==0 ) {
				declaration_AST = (AST)currentAST.root;
				declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CURSOR_DECL,"cursor_decl")).add(i_AST)); 
						      SrcAST.setSpan(declaration_AST,i_AST,cur_AST);
						
				currentAST.root = declaration_AST;
				currentAST.child = declaration_AST!=null &&declaration_AST.getFirstChild()!=null ?
					declaration_AST.getFirstChild() : declaration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case TABLE:
		{
			AST tmp858_AST = null;
			tmp858_AST = astFactory.create(LT(1));
			match(TABLE);
			AST tmp859_AST = null;
			tmp859_AST = astFactory.create(LT(1));
			match(LPAREN);
			col_or_table_constr_def_list();
			def_AST = (AST)returnAST;
			rp = LT(1);
			rp_AST = astFactory.create(rp);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				declaration_AST = (AST)currentAST.root;
				declaration_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TABLE_DECL,"table_decl")).add(i_AST).add(def_AST)); 
						      SrcAST.setSpan(declaration_AST,i_AST,rp_AST);
						
				currentAST.root = declaration_AST;
				currentAST.child = declaration_AST!=null &&declaration_AST.getFirstChild()!=null ?
					declaration_AST.getFirstChild() : declaration_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
			if ((_tokenSet_151.member(LA(1)))) {
				{
				if ((LA(1)==AS)) {
					AST tmp860_AST = null;
					tmp860_AST = astFactory.create(LT(1));
					match(AS);
				}
				else if ((_tokenSet_49.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				{
				datatype();
				dt_AST = (AST)returnAST;
				}
				if ( inputState.guessing==0 ) {
					declaration_AST = (AST)currentAST.root;
					declaration_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(VAR_DECL,"var_decl")).add(i_AST).add(dt_AST)); 
							      SrcAST.setSpan(declaration_AST,i_AST,dt_AST);
							
					currentAST.root = declaration_AST;
					currentAST.child = declaration_AST!=null &&declaration_AST.getFirstChild()!=null ?
						declaration_AST.getFirstChild() : declaration_AST;
					currentAST.advanceChildToEnd();
				}
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		returnAST = declaration_AST;
	}
	
	public final void string_or_var_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST string_or_var_list_AST = null;
		
		string_or_var();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1108:
		do {
			if ((LA(1)==PLUS)) {
				match(PLUS);
				string_or_var();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1108;
			}
			
		} while (true);
		}
		string_or_var_list_AST = (AST)currentAST.root;
		returnAST = string_or_var_list_AST;
	}
	
	public final void string_or_var() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST string_or_var_AST = null;
		
		switch ( LA(1)) {
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		{
			quoted_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			string_or_var_AST = (AST)currentAST.root;
			break;
		}
		case AT_IDENT:
		{
			AST tmp862_AST = null;
			tmp862_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp862_AST);
			match(AT_IDENT);
			string_or_var_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = string_or_var_AST;
	}
	
	public final void format_str_or_var() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST format_str_or_var_AST = null;
		
		if ((_tokenSet_34.member(LA(1)))) {
			char_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			format_str_or_var_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==AT_IDENT)) {
			AST tmp863_AST = null;
			tmp863_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp863_AST);
			match(AT_IDENT);
			format_str_or_var_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = format_str_or_var_AST;
	}
	
	public final void with_error_data_options() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_error_data_options_AST = null;
		
		AST tmp864_AST = null;
		tmp864_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp864_AST);
		match(WITH);
		AST tmp865_AST = null;
		tmp865_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp865_AST);
		match(ERRORDATA);
		{
		boolean synPredMatched1135 = false;
		if (((LA(1)==AT_IDENT) && (LA(2)==EQUAL))) {
			int _m1135 = mark();
			synPredMatched1135 = true;
			inputState.guessing++;
			try {
				{
				variable_assignment();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1135 = false;
			}
			rewind(_m1135);
			inputState.guessing--;
		}
		if ( synPredMatched1135 ) {
			variable_assignment_list();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_117.member(LA(1))) && (_tokenSet_154.member(LA(2)))) {
			select_elem_list();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		with_error_data_options_AST = (AST)currentAST.root;
		returnAST = with_error_data_options_AST;
	}
	
	public final void with_error_options() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_error_options_AST = null;
		
		AST tmp866_AST = null;
		tmp866_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp866_AST);
		match(WITH);
		{
		switch ( LA(1)) {
		case COMMA:
		{
			match(COMMA);
			break;
		}
		case LOG:
		case SETERROR:
		case WAIT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		switch ( LA(1)) {
		case LOG:
		{
			AST tmp868_AST = null;
			tmp868_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp868_AST);
			match(LOG);
			break;
		}
		case WAIT:
		{
			AST tmp869_AST = null;
			tmp869_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp869_AST);
			match(WAIT);
			break;
		}
		case SETERROR:
		{
			AST tmp870_AST = null;
			tmp870_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp870_AST);
			match(SETERROR);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		with_error_options_AST = (AST)currentAST.root;
		returnAST = with_error_options_AST;
	}
	
	public final AST  else_block() throws RecognitionException, TokenStreamException {
		AST t;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST else_block_AST = null;
		AST ts_AST = null;
		AST ts1_AST = null;
		t = null;
		
		switch ( LA(1)) {
		case SEMI_COLON:
		{
			match(SEMI_COLON);
			match(ELSE);
			tsql_stmt();
			ts_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				t=ts_AST;
			}
			else_block_AST = (AST)currentAST.root;
			break;
		}
		case ELSE:
		{
			match(ELSE);
			tsql_stmt();
			ts1_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			if ( inputState.guessing==0 ) {
				t=ts1_AST;
			}
			else_block_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = else_block_AST;
		return t;
	}
	
	public final void qual_sp_proc_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_sp_proc_name_AST = null;
		AST d1_AST = null;
		AST o1_AST = null;
		Token  s1 = null;
		AST s1_AST = null;
		AST d2_AST = null;
		Token  s2 = null;
		AST s2_AST = null;
		Token  s3 = null;
		AST s3_AST = null;
		
		{
		boolean synPredMatched1148 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m1148 = mark();
			synPredMatched1148 = true;
			inputState.guessing++;
			try {
				{
				database_name();
				match(DOT);
				owner_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1148 = false;
			}
			rewind(_m1148);
			inputState.guessing--;
		}
		if ( synPredMatched1148 ) {
			database_name();
			d1_AST = (AST)returnAST;
			AST tmp874_AST = null;
			tmp874_AST = astFactory.create(LT(1));
			match(DOT);
			owner_name();
			o1_AST = (AST)returnAST;
			AST tmp875_AST = null;
			tmp875_AST = astFactory.create(LT(1));
			match(DOT);
			s1 = LT(1);
			s1_AST = astFactory.create(s1);
			match(SP_NAME);
		}
		else {
			boolean synPredMatched1150 = false;
			if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
				int _m1150 = mark();
				synPredMatched1150 = true;
				inputState.guessing++;
				try {
					{
					database_name();
					match(DOT);
					match(DOT);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1150 = false;
				}
				rewind(_m1150);
				inputState.guessing--;
			}
			if ( synPredMatched1150 ) {
				database_name();
				d2_AST = (AST)returnAST;
				AST tmp876_AST = null;
				tmp876_AST = astFactory.create(LT(1));
				match(DOT);
				AST tmp877_AST = null;
				tmp877_AST = astFactory.create(LT(1));
				match(DOT);
				s2 = LT(1);
				s2_AST = astFactory.create(s2);
				match(SP_NAME);
			}
			else if ((LA(1)==SP_NAME)) {
				s3 = LT(1);
				s3_AST = astFactory.create(s3);
				match(SP_NAME);
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				qual_sp_proc_name_AST = (AST)currentAST.root;
				qual_sp_proc_name_AST = (AST)astFactory.make( (new ASTArray(7)).add(astFactory.create(QUAL_SP_PROC_NAME,"qual_sp_proc_name")).add(d1_AST).add(d2_AST).add(o1_AST).add(s1_AST).add(s2_AST).add(s3_AST)); 
					  AST[] left = {d1_AST,d2_AST,s3_AST};
					  AST[] right = {s1_AST,s2_AST,s3_AST};
					  SrcAST.setSpan(qual_sp_proc_name_AST,left,right);
					
				currentAST.root = qual_sp_proc_name_AST;
				currentAST.child = qual_sp_proc_name_AST!=null &&qual_sp_proc_name_AST.getFirstChild()!=null ?
					qual_sp_proc_name_AST.getFirstChild() : qual_sp_proc_name_AST;
				currentAST.advanceChildToEnd();
			}
			returnAST = qual_sp_proc_name_AST;
		}
		
	public final void sp_arg_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sp_arg_list_AST = null;
		AST a1_AST = null;
		AST a2_AST = null;
		AST args = astFactory.create(SP_ARG_LIST,"sp_arg_list");
		
		sp_arg();
		a1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			args.addChild(a1_AST);
		}
		{
		_loop1155:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				sp_arg();
				a2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					args.addChild(a2_AST);
				}
			}
			else {
				break _loop1155;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			sp_arg_list_AST = (AST)currentAST.root;
			sp_arg_list_AST = args;
				  SrcAST.setSpan(sp_arg_list_AST,a1_AST,a2_AST);
				
			currentAST.root = sp_arg_list_AST;
			currentAST.child = sp_arg_list_AST!=null &&sp_arg_list_AST.getFirstChild()!=null ?
				sp_arg_list_AST.getFirstChild() : sp_arg_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = sp_arg_list_AST;
	}
	
	public final void sp_arg() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST sp_arg_AST = null;
		Token  at = null;
		AST at_AST = null;
		AST i_AST = null;
		AST c_AST = null;
		Token  n = null;
		AST n_AST = null;
		
		{
		if ((LA(1)==AT_IDENT)) {
			at = LT(1);
			at_AST = astFactory.create(at);
			match(AT_IDENT);
			AST tmp879_AST = null;
			tmp879_AST = astFactory.create(LT(1));
			match(EQUAL);
		}
		else if ((_tokenSet_155.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case NUM_REAL:
		case NUM_INT:
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		case MONEY_NUM_LIT:
		case HEX_STRING_LIT:
		case BIT_STRING_LIT:
		{
			constant_literal();
			c_AST = (AST)returnAST;
			break;
		}
		case NULL:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NULL);
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				identifier();
				i_AST = (AST)returnAST;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			sp_arg_AST = (AST)currentAST.root;
			sp_arg_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(SP_ARG,"sp_arg")).add(at_AST).add(i_AST).add(c_AST).add(n_AST)); 
				  AST[] left = {at_AST,i_AST,c_AST,n_AST};
				  AST[] right = {i_AST,c_AST,n_AST};
				  SrcAST.setSpan(sp_arg_AST,left,right);
				
			currentAST.root = sp_arg_AST;
			currentAST.child = sp_arg_AST!=null &&sp_arg_AST.getFirstChild()!=null ?
				sp_arg_AST.getFirstChild() : sp_arg_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = sp_arg_AST;
	}
	
	public final void remote_proc_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST remote_proc_name_AST = null;
		AST s_AST = null;
		AST d_AST = null;
		AST o_AST = null;
		AST n_AST = null;
		AST s3_AST = null;
		AST d3_AST = null;
		AST n5_AST = null;
		AST d1_AST = null;
		AST o1_AST = null;
		AST n1_AST = null;
		AST s2_AST = null;
		AST o3_AST = null;
		AST n3_AST = null;
		AST s4_AST = null;
		AST n6_AST = null;
		AST d2_AST = null;
		AST n4_AST = null;
		AST o2_AST = null;
		AST n2_AST = null;
		AST n7_AST = null;
		
		{
		boolean synPredMatched1446 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m1446 = mark();
			synPredMatched1446 = true;
			inputState.guessing++;
			try {
				{
				server_name();
				match(DOT);
				database_name();
				match(DOT);
				owner_name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1446 = false;
			}
			rewind(_m1446);
			inputState.guessing--;
		}
		if ( synPredMatched1446 ) {
			server_name();
			s_AST = (AST)returnAST;
			AST tmp880_AST = null;
			tmp880_AST = astFactory.create(LT(1));
			match(DOT);
			database_name();
			d_AST = (AST)returnAST;
			AST tmp881_AST = null;
			tmp881_AST = astFactory.create(LT(1));
			match(DOT);
			owner_name();
			o_AST = (AST)returnAST;
			AST tmp882_AST = null;
			tmp882_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			n_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				remote_proc_name_AST = (AST)currentAST.root;
				remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(s_AST).add(d_AST).add(o_AST).add(n_AST)); 
							   	  SrcAST.setSpanAndText(remote_proc_name_AST,s_AST,n_AST,SrcAST.getText(s_AST) + "." + SrcAST.getText(d_AST) + "." + SrcAST.getText(o_AST) + "." + SrcAST.getText(n_AST)); 
							
				currentAST.root = remote_proc_name_AST;
				currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
					remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			boolean synPredMatched1448 = false;
			if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
				int _m1448 = mark();
				synPredMatched1448 = true;
				inputState.guessing++;
				try {
					{
					server_name();
					match(DOT);
					database_name();
					match(DOT);
					match(DOT);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1448 = false;
				}
				rewind(_m1448);
				inputState.guessing--;
			}
			if ( synPredMatched1448 ) {
				server_name();
				s3_AST = (AST)returnAST;
				AST tmp883_AST = null;
				tmp883_AST = astFactory.create(LT(1));
				match(DOT);
				database_name();
				d3_AST = (AST)returnAST;
				AST tmp884_AST = null;
				tmp884_AST = astFactory.create(LT(1));
				match(DOT);
				AST tmp885_AST = null;
				tmp885_AST = astFactory.create(LT(1));
				match(DOT);
				name();
				n5_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					remote_proc_name_AST = (AST)currentAST.root;
					remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(s3_AST).add(d3_AST).add(n5_AST)); 
								   	  SrcAST.setSpanAndText(remote_proc_name_AST,s3_AST,n5_AST,SrcAST.getText(s3_AST) + "." + SrcAST.getText(d3_AST) + ".." + SrcAST.getText(n5_AST)); 
								
					currentAST.root = remote_proc_name_AST;
					currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
						remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
					currentAST.advanceChildToEnd();
				}
			}
			else {
				boolean synPredMatched1450 = false;
				if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
					int _m1450 = mark();
					synPredMatched1450 = true;
					inputState.guessing++;
					try {
						{
						database_name();
						match(DOT);
						owner_name();
						match(DOT);
						name();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched1450 = false;
					}
					rewind(_m1450);
					inputState.guessing--;
				}
				if ( synPredMatched1450 ) {
					database_name();
					d1_AST = (AST)returnAST;
					AST tmp886_AST = null;
					tmp886_AST = astFactory.create(LT(1));
					match(DOT);
					owner_name();
					o1_AST = (AST)returnAST;
					AST tmp887_AST = null;
					tmp887_AST = astFactory.create(LT(1));
					match(DOT);
					name();
					n1_AST = (AST)returnAST;
					if ( inputState.guessing==0 ) {
						remote_proc_name_AST = (AST)currentAST.root;
						remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(d1_AST).add(o1_AST).add(n1_AST)); 
									   	 SrcAST.setSpanAndText(remote_proc_name_AST,d1_AST,n1_AST,SrcAST.getText(d1_AST) + "." + SrcAST.getText(o1_AST) + "." + SrcAST.getText(n1_AST)); 
									
						currentAST.root = remote_proc_name_AST;
						currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
							remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
						currentAST.advanceChildToEnd();
					}
				}
				else {
					boolean synPredMatched1452 = false;
					if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
						int _m1452 = mark();
						synPredMatched1452 = true;
						inputState.guessing++;
						try {
							{
							server_name();
							match(DOT);
							match(DOT);
							owner_name();
							match(DOT);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched1452 = false;
						}
						rewind(_m1452);
						inputState.guessing--;
					}
					if ( synPredMatched1452 ) {
						server_name();
						s2_AST = (AST)returnAST;
						AST tmp888_AST = null;
						tmp888_AST = astFactory.create(LT(1));
						match(DOT);
						AST tmp889_AST = null;
						tmp889_AST = astFactory.create(LT(1));
						match(DOT);
						owner_name();
						o3_AST = (AST)returnAST;
						AST tmp890_AST = null;
						tmp890_AST = astFactory.create(LT(1));
						match(DOT);
						name();
						n3_AST = (AST)returnAST;
						if ( inputState.guessing==0 ) {
							remote_proc_name_AST = (AST)currentAST.root;
							remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(s2_AST).add(d3_AST).add(n3_AST)); 
										   	 SrcAST.setSpanAndText(remote_proc_name_AST,s2_AST,n3_AST,SrcAST.getText(s2_AST) + ".." + SrcAST.getText(o3_AST) + "." + SrcAST.getText(n3_AST)); 
										
							currentAST.root = remote_proc_name_AST;
							currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
								remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
							currentAST.advanceChildToEnd();
						}
					}
					else {
						boolean synPredMatched1454 = false;
						if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
							int _m1454 = mark();
							synPredMatched1454 = true;
							inputState.guessing++;
							try {
								{
								server_name();
								match(DOT);
								match(DOT);
								match(DOT);
								}
							}
							catch (RecognitionException pe) {
								synPredMatched1454 = false;
							}
							rewind(_m1454);
							inputState.guessing--;
						}
						if ( synPredMatched1454 ) {
							server_name();
							s4_AST = (AST)returnAST;
							AST tmp891_AST = null;
							tmp891_AST = astFactory.create(LT(1));
							match(DOT);
							AST tmp892_AST = null;
							tmp892_AST = astFactory.create(LT(1));
							match(DOT);
							AST tmp893_AST = null;
							tmp893_AST = astFactory.create(LT(1));
							match(DOT);
							name();
							n6_AST = (AST)returnAST;
							if ( inputState.guessing==0 ) {
								remote_proc_name_AST = (AST)currentAST.root;
								remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(s4_AST).add(n6_AST)); 
											   	 SrcAST.setSpanAndText(remote_proc_name_AST,s4_AST,n6_AST,SrcAST.getText(s4_AST) + "..." + SrcAST.getText(n6_AST)); 
											
								currentAST.root = remote_proc_name_AST;
								currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
									remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
								currentAST.advanceChildToEnd();
							}
						}
						else {
							boolean synPredMatched1456 = false;
							if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
								int _m1456 = mark();
								synPredMatched1456 = true;
								inputState.guessing++;
								try {
									{
									database_name();
									match(DOT);
									match(DOT);
									name();
									}
								}
								catch (RecognitionException pe) {
									synPredMatched1456 = false;
								}
								rewind(_m1456);
								inputState.guessing--;
							}
							if ( synPredMatched1456 ) {
								database_name();
								d2_AST = (AST)returnAST;
								AST tmp894_AST = null;
								tmp894_AST = astFactory.create(LT(1));
								match(DOT);
								AST tmp895_AST = null;
								tmp895_AST = astFactory.create(LT(1));
								match(DOT);
								name();
								n4_AST = (AST)returnAST;
								if ( inputState.guessing==0 ) {
									remote_proc_name_AST = (AST)currentAST.root;
									remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(d2_AST).add(n4_AST)); 
												  SrcAST.setSpanAndText(remote_proc_name_AST,d2_AST,n4_AST,SrcAST.getText(d2_AST) + ".." + SrcAST.getText(n4_AST)); 
												
									currentAST.root = remote_proc_name_AST;
									currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
										remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
									currentAST.advanceChildToEnd();
								}
							}
							else if ((_tokenSet_2.member(LA(1))) && (LA(2)==DOT)) {
								owner_name();
								o2_AST = (AST)returnAST;
								AST tmp896_AST = null;
								tmp896_AST = astFactory.create(LT(1));
								match(DOT);
								name();
								n2_AST = (AST)returnAST;
								if ( inputState.guessing==0 ) {
									remote_proc_name_AST = (AST)currentAST.root;
									remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(o2_AST).add(n2_AST)); 
												SrcAST.setSpanAndText(remote_proc_name_AST,o2_AST,n2_AST,SrcAST.getText(o2_AST) + "." + SrcAST.getText(n2_AST)); 
											
									currentAST.root = remote_proc_name_AST;
									currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
										remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
									currentAST.advanceChildToEnd();
								}
							}
							else if ((_tokenSet_2.member(LA(1))) && (_tokenSet_45.member(LA(2)))) {
								name();
								n7_AST = (AST)returnAST;
								if ( inputState.guessing==0 ) {
									remote_proc_name_AST = (AST)currentAST.root;
									remote_proc_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(REMOTE_PROC_NAME,"remote_proc_name")).add(n7_AST)); 
												SrcAST.setSpanAndText(remote_proc_name_AST,n7_AST,n7_AST,SrcAST.getText(n7_AST)); 
											
									currentAST.root = remote_proc_name_AST;
									currentAST.child = remote_proc_name_AST!=null &&remote_proc_name_AST.getFirstChild()!=null ?
										remote_proc_name_AST.getFirstChild() : remote_proc_name_AST;
									currentAST.advanceChildToEnd();
								}
							}
							else {
								throw new NoViableAltException(LT(1), getFilename());
							}
							}}}}}
							}
							returnAST = remote_proc_name_AST;
						}
						
	public final void proc_arg_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_arg_list_AST = null;
		AST a_AST = null;
		AST a2_AST = null;
		AST args = astFactory.create(PROC_ARG_LIST,"proc_arg_list");
		
		proc_arg();
		a_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			args.addChild(a_AST);
		}
		{
		_loop1176:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				proc_arg();
				a2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					args.addChild(a2_AST);
				}
			}
			else {
				break _loop1176;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			proc_arg_list_AST = (AST)currentAST.root;
			proc_arg_list_AST = args;
			currentAST.root = proc_arg_list_AST;
			currentAST.child = proc_arg_list_AST!=null &&proc_arg_list_AST.getFirstChild()!=null ?
				proc_arg_list_AST.getFirstChild() : proc_arg_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = proc_arg_list_AST;
	}
	
	public final void proc_arg() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST proc_arg_AST = null;
		Token  id = null;
		AST id_AST = null;
		AST e_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  o1 = null;
		AST o1_AST = null;
		
		{
		if ((LA(1)==AT_IDENT) && (LA(2)==EQUAL)) {
			id = LT(1);
			id_AST = astFactory.create(id);
			match(AT_IDENT);
			AST tmp898_AST = null;
			tmp898_AST = astFactory.create(LT(1));
			match(EQUAL);
		}
		else if ((_tokenSet_47.member(LA(1))) && (_tokenSet_156.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		arg_expr();
		e_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case OUTPUT:
		{
			o = LT(1);
			o_AST = astFactory.create(o);
			match(OUTPUT);
			break;
		}
		case OUT:
		{
			o1 = LT(1);
			o1_AST = astFactory.create(o1);
			match(OUT);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case WITH:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			proc_arg_AST = (AST)currentAST.root;
			proc_arg_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(PROC_ARG,"proc_arg")).add(id_AST).add(e_AST).add(o_AST).add(o1_AST));
			currentAST.root = proc_arg_AST;
			currentAST.child = proc_arg_AST!=null &&proc_arg_AST.getFirstChild()!=null ?
				proc_arg_AST.getFirstChild() : proc_arg_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = proc_arg_AST;
	}
	
	public final void arg_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST arg_expr_AST = null;
		
		switch ( LA(1)) {
		case PLUS:
		{
			AST tmp899_AST = null;
			tmp899_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp899_AST);
			match(PLUS);
			arg_primary_expr();
			astFactory.addASTChild(currentAST, returnAST);
			arg_expr_AST = (AST)currentAST.root;
			break;
		}
		case MINUS:
		{
			AST tmp900_AST = null;
			tmp900_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp900_AST);
			match(MINUS);
			arg_primary_expr();
			astFactory.addASTChild(currentAST, returnAST);
			arg_expr_AST = (AST)currentAST.root;
			break;
		}
		case AT_IDENT:
		{
			AST tmp901_AST = null;
			tmp901_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp901_AST);
			match(AT_IDENT);
			arg_expr_AST = (AST)currentAST.root;
			break;
		}
		case GLOBAL_VAR:
		{
			AST tmp902_AST = null;
			tmp902_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp902_AST);
			match(GLOBAL_VAR);
			arg_expr_AST = (AST)currentAST.root;
			break;
		}
		case NULL:
		{
			AST tmp903_AST = null;
			tmp903_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp903_AST);
			match(NULL);
			arg_expr_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_157.member(LA(1)))) {
				arg_primary_expr();
				astFactory.addASTChild(currentAST, returnAST);
				arg_expr_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = arg_expr_AST;
	}
	
	public final void arg_primary_expr() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST arg_primary_expr_AST = null;
		
		if ((_tokenSet_2.member(LA(1)))) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			arg_primary_expr_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_158.member(LA(1)))) {
			constant_literal();
			astFactory.addASTChild(currentAST, returnAST);
			arg_primary_expr_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = arg_primary_expr_AST;
	}
	
	public final void function_param_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_param_list_AST = null;
		AST p1_AST = null;
		AST p2_AST = null;
		AST params = astFactory.create(FUNC_PARAM_LIST,"func_param_list");
		
		function_param();
		p1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			params.addChild(p1_AST);
		}
		{
		_loop1206:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				function_param();
				p2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					params.addChild(p2_AST);
				}
			}
			else {
				break _loop1206;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			function_param_list_AST = (AST)currentAST.root;
			function_param_list_AST = params;
			currentAST.root = function_param_list_AST;
			currentAST.child = function_param_list_AST!=null &&function_param_list_AST.getFirstChild()!=null ?
				function_param_list_AST.getFirstChild() : function_param_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = function_param_list_AST;
	}
	
	public final void function_option_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_option_list_AST = null;
		
		function_option();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1209:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp905_AST = null;
				tmp905_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp905_AST);
				match(COMMA);
				function_option();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1209;
			}
			
		} while (true);
		}
		function_option_list_AST = (AST)currentAST.root;
		returnAST = function_option_list_AST;
	}
	
	public final void function_param() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_param_AST = null;
		Token  atID = null;
		AST atID_AST = null;
		AST dt_AST = null;
		AST def_AST = null;
		
		atID = LT(1);
		atID_AST = astFactory.create(atID);
		match(AT_IDENT);
		{
		if ((LA(1)==AS)) {
			AST tmp906_AST = null;
			tmp906_AST = astFactory.create(LT(1));
			match(AS);
		}
		else if ((_tokenSet_49.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		datatype();
		dt_AST = (AST)returnAST;
		{
		switch ( LA(1)) {
		case EQUAL:
		{
			AST tmp907_AST = null;
			tmp907_AST = astFactory.create(LT(1));
			match(EQUAL);
			default_exp();
			def_AST = (AST)returnAST;
			break;
		}
		case COMMA:
		case RPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			function_param_AST = (AST)currentAST.root;
			function_param_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(FUNC_PARAM,"func_param")).add(atID_AST).add(dt_AST).add(def_AST));
			currentAST.root = function_param_AST;
			currentAST.child = function_param_AST!=null &&function_param_AST.getFirstChild()!=null ?
				function_param_AST.getFirstChild() : function_param_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = function_param_AST;
	}
	
	public final void function_option() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_option_AST = null;
		
		switch ( LA(1)) {
		case ENCRYPTION:
		{
			AST tmp908_AST = null;
			tmp908_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp908_AST);
			match(ENCRYPTION);
			function_option_AST = (AST)currentAST.root;
			break;
		}
		case SCHEMABINDING:
		{
			AST tmp909_AST = null;
			tmp909_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp909_AST);
			match(SCHEMABINDING);
			function_option_AST = (AST)currentAST.root;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = function_option_AST;
	}
	
	public final void table_func_arg() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST table_func_arg_AST = null;
		Token  m = null;
		AST m_AST = null;
		AST c_AST = null;
		Token  n = null;
		AST n_AST = null;
		Token  atID = null;
		AST atID_AST = null;
		
		switch ( LA(1)) {
		case NUM_REAL:
		case NUM_INT:
		case MINUS:
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		case MONEY_NUM_LIT:
		case HEX_STRING_LIT:
		case BIT_STRING_LIT:
		{
			{
			switch ( LA(1)) {
			case MINUS:
			{
				m = LT(1);
				m_AST = astFactory.create(m);
				match(MINUS);
				break;
			}
			case NUM_REAL:
			case NUM_INT:
			case DOUBLE_QUOTED_STRING_LIT:
			case SINGLE_QUOTED_STRING_LIT:
			case MONEY_NUM_LIT:
			case HEX_STRING_LIT:
			case BIT_STRING_LIT:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			constant_literal();
			c_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				table_func_arg_AST = (AST)currentAST.root;
				table_func_arg_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TABLE_FUNC_ARG,"table_func_arg")).add(m_AST).add(c_AST));
					  	SrcAST.setSpan(table_func_arg_AST,(m_AST!=null)? m_AST : c_AST, c_AST);
					
				currentAST.root = table_func_arg_AST;
				currentAST.child = table_func_arg_AST!=null &&table_func_arg_AST.getFirstChild()!=null ?
					table_func_arg_AST.getFirstChild() : table_func_arg_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NULL:
		{
			n = LT(1);
			n_AST = astFactory.create(n);
			match(NULL);
			if ( inputState.guessing==0 ) {
				table_func_arg_AST = (AST)currentAST.root;
				table_func_arg_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TABLE_FUNC_ARG,"table_func_arg")).add(n_AST)); SrcAST.setSpan(table_func_arg_AST,n_AST);
				currentAST.root = table_func_arg_AST;
				currentAST.child = table_func_arg_AST!=null &&table_func_arg_AST.getFirstChild()!=null ?
					table_func_arg_AST.getFirstChild() : table_func_arg_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case AT_IDENT:
		{
			atID = LT(1);
			atID_AST = astFactory.create(atID);
			match(AT_IDENT);
			if ( inputState.guessing==0 ) {
				table_func_arg_AST = (AST)currentAST.root;
				table_func_arg_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TABLE_FUNC_ARG,"table_func_arg")).add(atID_AST)); SrcAST.setSpan(table_func_arg_AST,atID_AST);
				currentAST.root = table_func_arg_AST;
				currentAST.child = table_func_arg_AST!=null &&table_func_arg_AST.getFirstChild()!=null ?
					table_func_arg_AST.getFirstChild() : table_func_arg_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = table_func_arg_AST;
	}
	
	public final void statistics_option() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST statistics_option_AST = null;
		
		AST tmp910_AST = null;
		tmp910_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp910_AST);
		match(WITH);
		{
		switch ( LA(1)) {
		case FULLSCAN:
		{
			AST tmp911_AST = null;
			tmp911_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp911_AST);
			match(FULLSCAN);
			break;
		}
		case SAMPLE:
		{
			AST tmp912_AST = null;
			tmp912_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp912_AST);
			match(SAMPLE);
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case PERCENT:
			{
				AST tmp913_AST = null;
				tmp913_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp913_AST);
				match(PERCENT);
				break;
			}
			case ROWS:
			{
				AST tmp914_AST = null;
				tmp914_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp914_AST);
				match(ROWS);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case RESAMPLE:
		{
			AST tmp915_AST = null;
			tmp915_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp915_AST);
			match(RESAMPLE);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case INDEX:
		case SELECT:
		case ALL:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case NORECOMPUTE:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case COMMA:
		case SEMI_COLON:
		case LPAREN:
		case COLUMNS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		boolean synPredMatched1249 = false;
		if (((_tokenSet_159.member(LA(1))) && (_tokenSet_160.member(LA(2))))) {
			int _m1249 = mark();
			synPredMatched1249 = true;
			inputState.guessing++;
			try {
				{
				{
				switch ( LA(1)) {
				case COMMA:
				{
					match(COMMA);
					break;
				}
				case INDEX:
				case ALL:
				case COLUMNS:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				{
				switch ( LA(1)) {
				case ALL:
				{
					match(ALL);
					break;
				}
				case COLUMNS:
				{
					match(COLUMNS);
					break;
				}
				case INDEX:
				{
					match(INDEX);
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1249 = false;
			}
			rewind(_m1249);
			inputState.guessing--;
		}
		if ( synPredMatched1249 ) {
			{
			switch ( LA(1)) {
			case COMMA:
			{
				AST tmp916_AST = null;
				tmp916_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp916_AST);
				match(COMMA);
				break;
			}
			case INDEX:
			case ALL:
			case COLUMNS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			{
			switch ( LA(1)) {
			case ALL:
			{
				AST tmp917_AST = null;
				tmp917_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp917_AST);
				match(ALL);
				break;
			}
			case COLUMNS:
			{
				AST tmp918_AST = null;
				tmp918_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp918_AST);
				match(COLUMNS);
				break;
			}
			case INDEX:
			{
				AST tmp919_AST = null;
				tmp919_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp919_AST);
				match(INDEX);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		else if ((_tokenSet_161.member(LA(1))) && (_tokenSet_22.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		switch ( LA(1)) {
		case NORECOMPUTE:
		case COMMA:
		{
			{
			switch ( LA(1)) {
			case COMMA:
			{
				AST tmp920_AST = null;
				tmp920_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp920_AST);
				match(COMMA);
				break;
			}
			case NORECOMPUTE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			AST tmp921_AST = null;
			tmp921_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp921_AST);
			match(NORECOMPUTE);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		statistics_option_AST = (AST)currentAST.root;
		returnAST = statistics_option_AST;
	}
	
	public final void insert_data() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST insert_data_AST = null;
		
		if ((_tokenSet_162.member(LA(1)))) {
			string_or_var();
			astFactory.addASTChild(currentAST, returnAST);
			insert_data_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_2.member(LA(1)))) {
			qualified_column_name();
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp922_AST = null;
			tmp922_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp922_AST);
			match(AT_IDENT);
			insert_data_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = insert_data_AST;
	}
	
	public final void dbcc_option_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dbcc_option_list_AST = null;
		
		dbcc_option();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1279:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				dbcc_option();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1279;
			}
			
		} while (true);
		}
		dbcc_option_list_AST = (AST)currentAST.root;
		returnAST = dbcc_option_list_AST;
	}
	
	public final void dbcc_option() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dbcc_option_AST = null;
		
		switch ( LA(1)) {
		case NULL:
		{
			AST tmp924_AST = null;
			tmp924_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp924_AST);
			match(NULL);
			dbcc_option_AST = (AST)currentAST.root;
			break;
		}
		case ON:
		{
			AST tmp925_AST = null;
			tmp925_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp925_AST);
			match(ON);
			dbcc_option_AST = (AST)currentAST.root;
			break;
		}
		case OFF:
		{
			AST tmp926_AST = null;
			tmp926_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp926_AST);
			match(OFF);
			dbcc_option_AST = (AST)currentAST.root;
			break;
		}
		case FULL:
		{
			AST tmp927_AST = null;
			tmp927_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp927_AST);
			match(FULL);
			dbcc_option_AST = (AST)currentAST.root;
			break;
		}
		case NUM_INT:
		case PLUS:
		case MINUS:
		{
			unsigned_num_int();
			astFactory.addASTChild(currentAST, returnAST);
			dbcc_option_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case NUM_INT:
				case PLUS:
				case MINUS:
				{
					unsigned_num_int();
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case COMMA:
				case RPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				dbcc_option_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = dbcc_option_AST;
	}
	
	public final void backup_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST backup_list_AST = null;
		
		backup_item();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1298:
		do {
			if ((_tokenSet_163.member(LA(1)))) {
				{
				if ((LA(1)==COMMA)) {
					match(COMMA);
				}
				else if ((_tokenSet_57.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				backup_item();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1298;
			}
			
		} while (true);
		}
		backup_list_AST = (AST)currentAST.root;
		returnAST = backup_list_AST;
	}
	
	public final void to_backup() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST to_backup_AST = null;
		
		AST tmp929_AST = null;
		tmp929_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp929_AST);
		match(TO);
		backup_list();
		astFactory.addASTChild(currentAST, returnAST);
		to_backup_AST = (AST)currentAST.root;
		returnAST = to_backup_AST;
	}
	
	public final void with_backup() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_backup_AST = null;
		
		AST tmp930_AST = null;
		tmp930_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp930_AST);
		match(WITH);
		backup_list();
		astFactory.addASTChild(currentAST, returnAST);
		with_backup_AST = (AST)currentAST.root;
		returnAST = with_backup_AST;
	}
	
	public final void backup_item() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST backup_item_AST = null;
		
		if ((_tokenSet_2.member(LA(1)))) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			{
			boolean synPredMatched1293 = false;
			if (((LA(1)==EQUAL))) {
				int _m1293 = mark();
				synPredMatched1293 = true;
				inputState.guessing++;
				try {
					{
					match(EQUAL);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1293 = false;
				}
				rewind(_m1293);
				inputState.guessing--;
			}
			if ( synPredMatched1293 ) {
				AST tmp931_AST = null;
				tmp931_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp931_AST);
				match(EQUAL);
				{
				switch ( LA(1)) {
				case AT_IDENT:
				{
					AST tmp932_AST = null;
					tmp932_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp932_AST);
					match(AT_IDENT);
					break;
				}
				case NUM_INT:
				case PLUS:
				case MINUS:
				{
					unsigned_num_int();
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				default:
					if ((_tokenSet_2.member(LA(1)))) {
						identifier();
						astFactory.addASTChild(currentAST, returnAST);
					}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
			}
			else if ((_tokenSet_164.member(LA(1)))) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			backup_item_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==ORDER)) {
			AST tmp933_AST = null;
			tmp933_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp933_AST);
			match(ORDER);
			AST tmp934_AST = null;
			tmp934_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp934_AST);
			match(LPAREN);
			order_spec_list();
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp935_AST = null;
			tmp935_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp935_AST);
			match(RPAREN);
			backup_item_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = backup_item_AST;
	}
	
	public final void from_restore() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST from_restore_AST = null;
		
		AST tmp936_AST = null;
		tmp936_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp936_AST);
		match(FROM);
		backup_list();
		astFactory.addASTChild(currentAST, returnAST);
		from_restore_AST = (AST)currentAST.root;
		returnAST = from_restore_AST;
	}
	
	public final void with_bulk() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST with_bulk_AST = null;
		
		AST tmp937_AST = null;
		tmp937_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp937_AST);
		match(WITH);
		AST tmp938_AST = null;
		tmp938_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp938_AST);
		match(LPAREN);
		backup_list();
		astFactory.addASTChild(currentAST, returnAST);
		AST tmp939_AST = null;
		tmp939_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp939_AST);
		match(RPAREN);
		with_bulk_AST = (AST)currentAST.root;
		returnAST = with_bulk_AST;
	}
	
	public final void permissions() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST permissions_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST perms_AST = null;
		AST comms_AST = null;
		
		{
		switch ( LA(1)) {
		case ALL:
		{
			a = LT(1);
			a_AST = astFactory.create(a);
			match(ALL);
			{
			switch ( LA(1)) {
			case PREVILEGES:
			{
				p = LT(1);
				p_AST = astFactory.create(p);
				match(PREVILEGES);
				break;
			}
			case ON:
			case FROM:
			case TO:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			break;
		}
		case EXEC:
		case EXECUTE:
		case REFERENCES:
		case SELECT:
		case UPDATE:
		case DELETE:
		case INSERT:
		case LPAREN:
		{
			permission_list();
			perms_AST = (AST)returnAST;
			break;
		}
		case CREATE:
		case SET:
		case BACKUP:
		{
			command_list();
			comms_AST = (AST)returnAST;
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			permissions_AST = (AST)currentAST.root;
			permissions_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(PERMISSIONS,"permissions")).add(a_AST).add(p_AST).add(perms_AST).add(comms_AST));
			currentAST.root = permissions_AST;
			currentAST.child = permissions_AST!=null &&permissions_AST.getFirstChild()!=null ?
				permissions_AST.getFirstChild() : permissions_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = permissions_AST;
	}
	
	public final void on_object() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST on_object_AST = null;
		Token  o = null;
		AST o_AST = null;
		AST obj_AST = null;
		AST cols_AST = null;
		Token  rp = null;
		AST rp_AST = null;
		Token  s = null;
		AST s_AST = null;
		
		o = LT(1);
		o_AST = astFactory.create(o);
		match(ON);
		{
		if ((_tokenSet_2.member(LA(1)))) {
			{
			identifier();
			obj_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp940_AST = null;
				tmp940_AST = astFactory.create(LT(1));
				match(LPAREN);
				column_list();
				cols_AST = (AST)returnAST;
				rp = LT(1);
				rp_AST = astFactory.create(rp);
				match(RPAREN);
				break;
			}
			case FROM:
			case TO:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			}
		}
		else if ((LA(1)==SP_NAME)) {
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SP_NAME);
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			on_object_AST = (AST)currentAST.root;
			on_object_AST = (AST)astFactory.make( (new ASTArray(4)).add(astFactory.create(PERMISSIONS_ON,"permissions_on")).add(obj_AST).add(cols_AST).add(s_AST));
				  	AST[] left = {o_AST};
				  	AST[] right = {obj_AST,rp_AST,s_AST};
				  	SrcAST.setSpan(on_object_AST,left,right);
				
			currentAST.root = on_object_AST;
			currentAST.child = on_object_AST!=null &&on_object_AST.getFirstChild()!=null ?
				on_object_AST.getFirstChild() : on_object_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = on_object_AST;
	}
	
	public final void permissions_to() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST permissions_to_AST = null;
		Token  p = null;
		AST p_AST = null;
		AST names_AST = null;
		
		{
		if ((LA(1)==PUBLIC)) {
			p = LT(1);
			p_AST = astFactory.create(p);
			match(PUBLIC);
		}
		else if ((_tokenSet_2.member(LA(1)))) {
			name_list();
			names_AST = (AST)returnAST;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			permissions_to_AST = (AST)currentAST.root;
			permissions_to_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(PERMISSIONS_TO,"permissions_to")).add(p_AST).add(names_AST)); 
				    SrcAST.setSpan(permissions_to_AST,(p_AST!=null)? p_AST : names_AST);
				
			currentAST.root = permissions_to_AST;
			currentAST.child = permissions_to_AST!=null &&permissions_to_AST.getFirstChild()!=null ?
				permissions_to_AST.getFirstChild() : permissions_to_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = permissions_to_AST;
	}
	
	public final void permission_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST permission_list_AST = null;
		AST p1_AST = null;
		AST p2_AST = null;
		AST permissions = astFactory.create(PERMISSION_LIST,"permission_list");
		
		permission();
		p1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			permissions.addChild(p1_AST);
		}
		{
		_loop1326:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				permission();
				p2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					permissions.addChild(p2_AST);
				}
			}
			else {
				break _loop1326;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			permission_list_AST = (AST)currentAST.root;
			permission_list_AST = permissions; 
				    SrcAST.setSpan(permission_list_AST,p1_AST,p2_AST);
				
			currentAST.root = permission_list_AST;
			currentAST.child = permission_list_AST!=null &&permission_list_AST.getFirstChild()!=null ?
				permission_list_AST.getFirstChild() : permission_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = permission_list_AST;
	}
	
	public final void command_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST command_list_AST = null;
		AST c1_AST = null;
		AST c2_AST = null;
		AST commands = astFactory.create(COMMAND_LIST,"command_list");
		
		command();
		c1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			commands.addChild(c1_AST);
		}
		{
		_loop1338:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				command();
				c2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					commands.addChild(c2_AST);
				}
			}
			else {
				break _loop1338;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			command_list_AST = (AST)currentAST.root;
			command_list_AST = commands; SrcAST.setSpan(command_list_AST,c1_AST,c2_AST);
			currentAST.root = command_list_AST;
			currentAST.child = command_list_AST!=null &&command_list_AST.getFirstChild()!=null ?
				command_list_AST.getFirstChild() : command_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = command_list_AST;
	}
	
	public final void permission() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST permission_AST = null;
		Token  s = null;
		AST s_AST = null;
		AST clist_AST = null;
		Token  i = null;
		AST i_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  u = null;
		AST u_AST = null;
		AST clist2_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST clist3_AST = null;
		Token  e1 = null;
		AST e1_AST = null;
		Token  e2 = null;
		AST e2_AST = null;
		Token  lp = null;
		AST lp_AST = null;
		AST clist4_AST = null;
		AST qt_AST = null;
		AST perm = astFactory.create(PERMISSION,"permission");
		
		switch ( LA(1)) {
		case SELECT:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SELECT);
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp943_AST = null;
				tmp943_AST = astFactory.create(LT(1));
				match(LPAREN);
				column_list();
				clist_AST = (AST)returnAST;
				AST tmp944_AST = null;
				tmp944_AST = astFactory.create(LT(1));
				match(RPAREN);
				break;
			}
			case ON:
			case FROM:
			case TO:
			case COMMA:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(3)).add(perm).add(s_AST).add(clist_AST)); 
					    SrcAST.setSpan(permission_AST,s_AST,clist_AST);
					
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case INSERT:
		{
			i = LT(1);
			i_AST = astFactory.create(i);
			match(INSERT);
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(2)).add(perm).add(i_AST)); SrcAST.setSpan(permission_AST,i_AST);
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case DELETE:
		{
			d = LT(1);
			d_AST = astFactory.create(d);
			match(DELETE);
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(2)).add(perm).add(d_AST)); SrcAST.setSpan(permission_AST,d_AST);
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case UPDATE:
		{
			u = LT(1);
			u_AST = astFactory.create(u);
			match(UPDATE);
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp945_AST = null;
				tmp945_AST = astFactory.create(LT(1));
				match(LPAREN);
				column_list();
				clist2_AST = (AST)returnAST;
				AST tmp946_AST = null;
				tmp946_AST = astFactory.create(LT(1));
				match(RPAREN);
				break;
			}
			case ON:
			case FROM:
			case TO:
			case COMMA:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(3)).add(perm).add(u_AST).add(clist2_AST)); SrcAST.setSpan(permission_AST,u_AST,clist2_AST);
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case REFERENCES:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(REFERENCES);
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp947_AST = null;
				tmp947_AST = astFactory.create(LT(1));
				match(LPAREN);
				column_list();
				clist3_AST = (AST)returnAST;
				AST tmp948_AST = null;
				tmp948_AST = astFactory.create(LT(1));
				match(RPAREN);
				break;
			}
			case ON:
			case FROM:
			case TO:
			case COMMA:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(3)).add(perm).add(r_AST).add(clist3_AST)); SrcAST.setSpan(permission_AST,r_AST,clist3_AST);
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case EXEC:
		case EXECUTE:
		{
			{
			switch ( LA(1)) {
			case EXEC:
			{
				e1 = LT(1);
				e1_AST = astFactory.create(e1);
				match(EXEC);
				break;
			}
			case EXECUTE:
			{
				e2 = LT(1);
				e2_AST = astFactory.create(e2);
				match(EXECUTE);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(3)).add(perm).add(e1_AST).add(e2_AST)); SrcAST.setSpan(permission_AST,(e1_AST!=null)? e1_AST : e2_AST);
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case LPAREN:
		{
			lp = LT(1);
			lp_AST = astFactory.create(lp);
			match(LPAREN);
			column_list();
			clist4_AST = (AST)returnAST;
			AST tmp949_AST = null;
			tmp949_AST = astFactory.create(LT(1));
			match(RPAREN);
			AST tmp950_AST = null;
			tmp950_AST = astFactory.create(LT(1));
			match(ON);
			qualified_table_name();
			qt_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				permission_AST = (AST)currentAST.root;
				permission_AST = (AST)astFactory.make( (new ASTArray(3)).add(perm).add(qt_AST).add(clist4_AST)); SrcAST.setSpan(permission_AST,lp_AST,qt_AST);
				currentAST.root = permission_AST;
				currentAST.child = permission_AST!=null &&permission_AST.getFirstChild()!=null ?
					permission_AST.getFirstChild() : permission_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = permission_AST;
	}
	
	public final void command() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST command_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  d = null;
		AST d_AST = null;
		Token  def = null;
		AST def_AST = null;
		Token  f = null;
		AST f_AST = null;
		Token  p = null;
		AST p_AST = null;
		Token  r = null;
		AST r_AST = null;
		Token  t = null;
		AST t_AST = null;
		Token  v = null;
		AST v_AST = null;
		Token  s = null;
		AST s_AST = null;
		Token  p1 = null;
		AST p1_AST = null;
		Token  s1 = null;
		AST s1_AST = null;
		Token  a1 = null;
		AST a1_AST = null;
		Token  b2 = null;
		AST b2_AST = null;
		Token  d2 = null;
		AST d2_AST = null;
		Token  l2 = null;
		AST l2_AST = null;
		AST comm = astFactory.create(COMMAND,"command");
		
		switch ( LA(1)) {
		case CREATE:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			match(CREATE);
			{
			switch ( LA(1)) {
			case DATABASE:
			{
				d = LT(1);
				d_AST = astFactory.create(d);
				match(DATABASE);
				break;
			}
			case DEFAULT:
			{
				def = LT(1);
				def_AST = astFactory.create(def);
				match(DEFAULT);
				break;
			}
			case FUNCTION:
			{
				f = LT(1);
				f_AST = astFactory.create(f);
				match(FUNCTION);
				break;
			}
			case PROCEDURE:
			{
				p = LT(1);
				p_AST = astFactory.create(p);
				match(PROCEDURE);
				break;
			}
			case RULE:
			{
				r = LT(1);
				r_AST = astFactory.create(r);
				match(RULE);
				break;
			}
			case TABLE:
			{
				t = LT(1);
				t_AST = astFactory.create(t);
				match(TABLE);
				break;
			}
			case VIEW:
			{
				v = LT(1);
				v_AST = astFactory.create(v);
				match(VIEW);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				command_AST = (AST)currentAST.root;
				command_AST = (AST)astFactory.make( (new ASTArray(9)).add(comm).add(c_AST).add(d_AST).add(def_AST).add(f_AST).add(p_AST).add(r_AST).add(t_AST).add(v_AST)); 
					    AST[] left = {c_AST}; AST[] right = {d_AST,def_AST,f_AST,p_AST,r_AST,t_AST,v_AST};
					    SrcAST.setSpan(command_AST,left,right);
					
				currentAST.root = command_AST;
				currentAST.child = command_AST!=null &&command_AST.getFirstChild()!=null ?
					command_AST.getFirstChild() : command_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case SET:
		{
			s = LT(1);
			s_AST = astFactory.create(s);
			match(SET);
			{
			switch ( LA(1)) {
			case PROXY:
			{
				p1 = LT(1);
				p1_AST = astFactory.create(p1);
				match(PROXY);
				break;
			}
			case SESSION:
			{
				s1 = LT(1);
				s1_AST = astFactory.create(s1);
				match(SESSION);
				a1 = LT(1);
				a1_AST = astFactory.create(a1);
				match(AUTHORIZATION);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				command_AST = (AST)currentAST.root;
				command_AST = (AST)astFactory.make( (new ASTArray(5)).add(comm).add(s_AST).add(p1_AST).add(s1_AST).add(a1_AST)); 
					    SrcAST.setSpan(command_AST,s_AST,(p1_AST!=null)? p1_AST : a1_AST);
					
				currentAST.root = command_AST;
				currentAST.child = command_AST!=null &&command_AST.getFirstChild()!=null ?
					command_AST.getFirstChild() : command_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case BACKUP:
		{
			b2 = LT(1);
			b2_AST = astFactory.create(b2);
			match(BACKUP);
			{
			switch ( LA(1)) {
			case DATABASE:
			{
				d2 = LT(1);
				d2_AST = astFactory.create(d2);
				match(DATABASE);
				break;
			}
			case LOG:
			{
				l2 = LT(1);
				l2_AST = astFactory.create(l2);
				match(LOG);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				command_AST = (AST)currentAST.root;
				command_AST = (AST)astFactory.make( (new ASTArray(4)).add(comm).add(b2_AST).add(d2_AST).add(l2_AST)); 
					    SrcAST.setSpan(command_AST,b2_AST,(d2_AST!=null)? d2_AST : l2_AST);
					
				currentAST.root = command_AST;
				currentAST.child = command_AST!=null &&command_AST.getFirstChild()!=null ?
					command_AST.getFirstChild() : command_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = command_AST;
	}
	
	public final void identifier_or_string() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST identifier_or_string_AST = null;
		AST i_AST = null;
		AST q_AST = null;
		Token  c = null;
		AST c_AST = null;
		Token  o = null;
		AST o_AST = null;
		Token  e = null;
		AST e_AST = null;
		
		{
		switch ( LA(1)) {
		case DOUBLE_QUOTED_STRING_LIT:
		case SINGLE_QUOTED_STRING_LIT:
		{
			quoted_string_lit();
			q_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case CLOSE:
		{
			c = LT(1);
			c_AST = astFactory.create(c);
			astFactory.addASTChild(currentAST, c_AST);
			match(CLOSE);
			o = LT(1);
			o_AST = astFactory.create(o);
			astFactory.addASTChild(currentAST, o_AST);
			match(ON);
			e = LT(1);
			e_AST = astFactory.create(e);
			astFactory.addASTChild(currentAST, e_AST);
			match(ENDTRAN);
			break;
		}
		default:
			if ((_tokenSet_2.member(LA(1)))) {
				identifier();
				i_AST = (AST)returnAST;
				astFactory.addASTChild(currentAST, returnAST);
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			identifier_or_string_AST = (AST)currentAST.root;
			identifier_or_string_AST = (AST)astFactory.make( (new ASTArray(5)).add(i_AST).add(q_AST).add(c_AST).add(o_AST).add(e_AST));
			currentAST.root = identifier_or_string_AST;
			currentAST.child = identifier_or_string_AST!=null &&identifier_or_string_AST.getFirstChild()!=null ?
				identifier_or_string_AST.getFirstChild() : identifier_or_string_AST;
			currentAST.advanceChildToEnd();
		}
		identifier_or_string_AST = (AST)currentAST.root;
		returnAST = identifier_or_string_AST;
	}
	
	public final void identifier_or_string_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST identifier_or_string_list_AST = null;
		AST i1_AST = null;
		AST i2_AST = null;
		AST list = astFactory.create(IDENTIFIER_OR_STRING_LIST,"identifier_or_string_list");
		
		identifier_or_string();
		i1_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			list.addChild(i1_AST);
		}
		{
		_loop1358:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				identifier_or_string();
				i2_AST = (AST)returnAST;
				if ( inputState.guessing==0 ) {
					list.addChild(i2_AST);
				}
			}
			else {
				break _loop1358;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			identifier_or_string_list_AST = (AST)currentAST.root;
			identifier_or_string_list_AST = list;
			currentAST.root = identifier_or_string_list_AST;
			currentAST.child = identifier_or_string_list_AST!=null &&identifier_or_string_list_AST.getFirstChild()!=null ?
				identifier_or_string_list_AST.getFirstChild() : identifier_or_string_list_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = identifier_or_string_list_AST;
	}
	
	public final void set_pair() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST set_pair_AST = null;
		AST i1_AST = null;
		AST i2_AST = null;
		
		identifier_or_string();
		i1_AST = (AST)returnAST;
		identifier_or_string();
		i2_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			set_pair_AST = (AST)currentAST.root;
			String opt = i1_AST.getText();
				  if (opt.equals("dateformat"))
				  	 { set_pair_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SET_DATEFORMAT,"set_dateformat")).add(i2_AST)); }
				  else { set_pair_AST = astFactory.create(UNSUPPORTED_SET_STMT,"unsupported_set_stmt"); }
				  SrcAST.setSpan(set_pair_AST,i1_AST,i2_AST);
				
			currentAST.root = set_pair_AST;
			currentAST.child = set_pair_AST!=null &&set_pair_AST.getFirstChild()!=null ?
				set_pair_AST.getFirstChild() : set_pair_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = set_pair_AST;
	}
	
	public final void set_pair_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST set_pair_list_AST = null;
		
		set_pair();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1385:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				set_pair();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1385;
			}
			
		} while (true);
		}
		set_pair_list_AST = (AST)currentAST.root;
		returnAST = set_pair_list_AST;
	}
	
	public final void rowcount_textsize_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST rowcount_textsize_list_AST = null;
		
		rowcount_textsize();
		astFactory.addASTChild(currentAST, returnAST);
		{
		switch ( LA(1)) {
		case COMMA:
		{
			AST tmp953_AST = null;
			tmp953_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp953_AST);
			match(COMMA);
			rowcount_textsize();
			astFactory.addASTChild(currentAST, returnAST);
			break;
		}
		case EOF:
		case DUMP:
		case DEALLOCATE:
		case TRUNCATE:
		case OPEN:
		case FETCH:
		case EXEC:
		case EXECUTE:
		case CREATE:
		case GO:
		case CHECKPOINT:
		case ALTER:
		case DROP:
		case SELECT:
		case ELSE:
		case END:
		case DECLARE:
		case UPDATE:
		case DELETE:
		case INSERT:
		case SET:
		case BEGIN:
		case WHILE:
		case BREAK:
		case CONTINUE:
		case GOTO:
		case RETURN:
		case PRINT:
		case RAISERROR:
		case IF:
		case WAITFOR:
		case USE:
		case SETUSER:
		case COMMIT:
		case ROLLBACK:
		case SAVE:
		case CLOSE:
		case GRANT:
		case REVOKE:
		case READTEXT:
		case WRITETEXT:
		case KILL:
		case DBCC:
		case RECONFIGURE:
		case DENY:
		case UPDATETEXT:
		case SHUTDOWN:
		case BACKUP:
		case RESTORE:
		case BULK:
		case LOCK:
		case PRAGMA_ML_COMMENT:
		case PRAGMA_SL_COMMENT:
		case SEMI_COLON:
		case LPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		rowcount_textsize_list_AST = (AST)currentAST.root;
		returnAST = rowcount_textsize_list_AST;
	}
	
	public final void offset_var_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST offset_var_list_AST = null;
		
		offset_var();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1393:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				offset_var();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1393;
			}
			
		} while (true);
		}
		offset_var_list_AST = (AST)currentAST.root;
		returnAST = offset_var_list_AST;
	}
	
	public final void identifier_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST identifier_list_AST = null;
		
		identifier();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1389:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp955_AST = null;
				tmp955_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp955_AST);
				match(COMMA);
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1389;
			}
			
		} while (true);
		}
		identifier_list_AST = (AST)currentAST.root;
		returnAST = identifier_list_AST;
	}
	
	public final void offset_var() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST offset_var_AST = null;
		
		switch ( LA(1)) {
		case SELECT:
		{
			AST tmp956_AST = null;
			tmp956_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp956_AST);
			match(SELECT);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		case FROM:
		{
			AST tmp957_AST = null;
			tmp957_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp957_AST);
			match(FROM);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		case ORDER:
		{
			AST tmp958_AST = null;
			tmp958_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp958_AST);
			match(ORDER);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		case COMPUTE:
		{
			AST tmp959_AST = null;
			tmp959_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp959_AST);
			match(COMPUTE);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		case TABLE:
		{
			AST tmp960_AST = null;
			tmp960_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp960_AST);
			match(TABLE);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		case PROCEDURE:
		{
			AST tmp961_AST = null;
			tmp961_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp961_AST);
			match(PROCEDURE);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		case EXEC:
		{
			AST tmp962_AST = null;
			tmp962_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp962_AST);
			match(EXEC);
			offset_var_AST = (AST)currentAST.root;
			break;
		}
		default:
			if ((_tokenSet_34.member(LA(1)))) {
				char_string_lit();
				astFactory.addASTChild(currentAST, returnAST);
				offset_var_AST = (AST)currentAST.root;
			}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = offset_var_AST;
	}
	
	public final void rowcount_textsize() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST rowcount_textsize_AST = null;
		Token  r = null;
		AST r_AST = null;
		AST n_AST = null;
		Token  a = null;
		AST a_AST = null;
		Token  t = null;
		AST t_AST = null;
		AST n1_AST = null;
		
		switch ( LA(1)) {
		case ROWCOUNT:
		{
			r = LT(1);
			r_AST = astFactory.create(r);
			match(ROWCOUNT);
			{
			switch ( LA(1)) {
			case NUM_INT:
			case PLUS:
			case MINUS:
			{
				unsigned_num_int();
				n_AST = (AST)returnAST;
				break;
			}
			case AT_IDENT:
			{
				a = LT(1);
				a_AST = astFactory.create(a);
				match(AT_IDENT);
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				rowcount_textsize_AST = (AST)currentAST.root;
				rowcount_textsize_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(SET_ROWCOUNT,"set_rowcount")).add(n_AST).add(a_AST)); 
					  	SrcAST.setSpan(rowcount_textsize_AST,r_AST,(n_AST!=null)? n_AST : a_AST);
					
				currentAST.root = rowcount_textsize_AST;
				currentAST.child = rowcount_textsize_AST!=null &&rowcount_textsize_AST.getFirstChild()!=null ?
					rowcount_textsize_AST.getFirstChild() : rowcount_textsize_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case TEXTSIZE:
		{
			t = LT(1);
			t_AST = astFactory.create(t);
			match(TEXTSIZE);
			unsigned_num_int();
			n1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				rowcount_textsize_AST = (AST)currentAST.root;
				rowcount_textsize_AST = astFactory.create(UNSUPPORTED_SET_STMT,"unsupported_set_stmt");
					    SrcAST.setSpan(rowcount_textsize_AST,t_AST,n1_AST);
					
				currentAST.root = rowcount_textsize_AST;
				currentAST.child = rowcount_textsize_AST!=null &&rowcount_textsize_AST.getFirstChild()!=null ?
					rowcount_textsize_AST.getFirstChild() : rowcount_textsize_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = rowcount_textsize_AST;
	}
	
	public final void stripe_device_clause() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST stripe_device_clause_AST = null;
		
		{
		if ((_tokenSet_2.member(LA(1))) && (LA(2)==EQUAL)) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp963_AST = null;
			tmp963_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp963_AST);
			match(EQUAL);
		}
		else if ((_tokenSet_39.member(LA(1))) && (_tokenSet_165.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		stripe_device();
		astFactory.addASTChild(currentAST, returnAST);
		{
		if ((LA(1)==AT)) {
			AST tmp964_AST = null;
			tmp964_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp964_AST);
			match(AT);
			name();
			astFactory.addASTChild(currentAST, returnAST);
		}
		else if ((_tokenSet_166.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		{
		dump_option_list();
		astFactory.addASTChild(currentAST, returnAST);
		}
		stripe_device_clause_AST = (AST)currentAST.root;
		returnAST = stripe_device_clause_AST;
	}
	
	public final void stripe_on() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST stripe_on_AST = null;
		
		AST tmp965_AST = null;
		tmp965_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp965_AST);
		match(STRIPE);
		AST tmp966_AST = null;
		tmp966_AST = astFactory.create(LT(1));
		astFactory.addASTChild(currentAST, tmp966_AST);
		match(ON);
		stripe_device_clause();
		astFactory.addASTChild(currentAST, returnAST);
		stripe_on_AST = (AST)currentAST.root;
		returnAST = stripe_on_AST;
	}
	
	public final void dump_option_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dump_option_list_AST = null;
		
		dump_option();
		astFactory.addASTChild(currentAST, returnAST);
		{
		_loop1420:
		do {
			if ((LA(1)==COMMA)) {
				AST tmp967_AST = null;
				tmp967_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp967_AST);
				match(COMMA);
				dump_option();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				break _loop1420;
			}
			
		} while (true);
		}
		dump_option_list_AST = (AST)currentAST.root;
		returnAST = dump_option_list_AST;
	}
	
	public final void stripe_device() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST stripe_device_AST = null;
		
		if ((LA(1)==AT_IDENT)) {
			AST tmp968_AST = null;
			tmp968_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp968_AST);
			match(AT_IDENT);
			stripe_device_AST = (AST)currentAST.root;
		}
		else if ((_tokenSet_34.member(LA(1)))) {
			char_string_lit();
			astFactory.addASTChild(currentAST, returnAST);
			stripe_device_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = stripe_device_AST;
	}
	
	public final void dump_option() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dump_option_AST = null;
		
		{
		boolean synPredMatched1416 = false;
		if (((_tokenSet_2.member(LA(1))) && (_tokenSet_167.member(LA(2))))) {
			int _m1416 = mark();
			synPredMatched1416 = true;
			inputState.guessing++;
			try {
				{
				{
				match(_tokenSet_168);
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1416 = false;
			}
			rewind(_m1416);
			inputState.guessing--;
		}
		if ( synPredMatched1416 ) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case EQUAL:
			{
				AST tmp969_AST = null;
				tmp969_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp969_AST);
				match(EQUAL);
				identifier();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case DUMP:
			case DEALLOCATE:
			case TRUNCATE:
			case OPEN:
			case FETCH:
			case EXEC:
			case EXECUTE:
			case CREATE:
			case GO:
			case WITH:
			case CHECKPOINT:
			case ALTER:
			case DROP:
			case SELECT:
			case ELSE:
			case END:
			case DECLARE:
			case UPDATE:
			case DELETE:
			case INSERT:
			case SET:
			case BEGIN:
			case WHILE:
			case BREAK:
			case CONTINUE:
			case GOTO:
			case RETURN:
			case PRINT:
			case RAISERROR:
			case IF:
			case WAITFOR:
			case USE:
			case SETUSER:
			case COMMIT:
			case ROLLBACK:
			case SAVE:
			case CLOSE:
			case GRANT:
			case REVOKE:
			case READTEXT:
			case WRITETEXT:
			case KILL:
			case DBCC:
			case RECONFIGURE:
			case DENY:
			case UPDATETEXT:
			case SHUTDOWN:
			case BACKUP:
			case RESTORE:
			case BULK:
			case LOCK:
			case STRIPE:
			case PRAGMA_ML_COMMENT:
			case PRAGMA_SL_COMMENT:
			case COMMA:
			case SEMI_COLON:
			case LPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
		}
		else if ((_tokenSet_169.member(LA(1))) && (_tokenSet_170.member(LA(2)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		dump_option_AST = (AST)currentAST.root;
		returnAST = dump_option_AST;
	}
	
	public final void qual_owner_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qual_owner_name_AST = null;
		AST d_AST = null;
		AST o_AST = null;
		AST o1_AST = null;
		
		boolean synPredMatched1424 = false;
		if (((_tokenSet_2.member(LA(1))) && (LA(2)==DOT))) {
			int _m1424 = mark();
			synPredMatched1424 = true;
			inputState.guessing++;
			try {
				{
				name();
				match(DOT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1424 = false;
			}
			rewind(_m1424);
			inputState.guessing--;
		}
		if ( synPredMatched1424 ) {
			name();
			d_AST = (AST)returnAST;
			AST tmp970_AST = null;
			tmp970_AST = astFactory.create(LT(1));
			match(DOT);
			name();
			o_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_owner_name_AST = (AST)currentAST.root;
				qual_owner_name_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(QUAL_OWNER_NAME,"qual_owner_name")).add(d_AST).add(o_AST));
				currentAST.root = qual_owner_name_AST;
				currentAST.child = qual_owner_name_AST!=null &&qual_owner_name_AST.getFirstChild()!=null ?
					qual_owner_name_AST.getFirstChild() : qual_owner_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else if ((_tokenSet_2.member(LA(1))) && (LA(2)==COMMA||LA(2)==RPAREN)) {
			name();
			o1_AST = (AST)returnAST;
			if ( inputState.guessing==0 ) {
				qual_owner_name_AST = (AST)currentAST.root;
				qual_owner_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(QUAL_OWNER_NAME,"qual_owner_name")).add(o1_AST));
				currentAST.root = qual_owner_name_AST;
				currentAST.child = qual_owner_name_AST!=null &&qual_owner_name_AST.getFirstChild()!=null ?
					qual_owner_name_AST.getFirstChild() : qual_owner_name_AST;
				currentAST.advanceChildToEnd();
			}
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = qual_owner_name_AST;
	}
	
	public final void db2_identifier() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST db2_identifier_AST = null;
		
		if ((_tokenSet_2.member(LA(1)))) {
			identifier();
			astFactory.addASTChild(currentAST, returnAST);
			db2_identifier_AST = (AST)currentAST.root;
		}
		else if ((LA(1)==DOUBLE_QUOTED_STRING_LIT)) {
			AST tmp971_AST = null;
			tmp971_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp971_AST);
			match(DOUBLE_QUOTED_STRING_LIT);
			db2_identifier_AST = (AST)currentAST.root;
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		returnAST = db2_identifier_AST;
	}
	
	public final void global_pragma_list() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST global_pragma_list_AST = null;
		
		{
		int _cnt1435=0;
		_loop1435:
		do {
			if ((_tokenSet_171.member(LA(1)))) {
				global_pragma();
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				if ( _cnt1435>=1 ) { break _loop1435; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			
			_cnt1435++;
		} while (true);
		}
		global_pragma_list_AST = (AST)currentAST.root;
		returnAST = global_pragma_list_AST;
	}
	
	public final void global_pragma() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST global_pragma_AST = null;
		Token  l1 = null;
		AST l1_AST = null;
		AST qp_AST = null;
		Token  r1 = null;
		AST r1_AST = null;
		Token  l2 = null;
		AST l2_AST = null;
		AST qp1_AST = null;
		Token  r2 = null;
		AST r2_AST = null;
		Token  l3 = null;
		AST l3_AST = null;
		AST ow_AST = null;
		AST di_AST = null;
		Token  r3 = null;
		AST r3_AST = null;
		Token  l4 = null;
		AST l4_AST = null;
		AST ow2_AST = null;
		Token  r4 = null;
		AST r4_AST = null;
		Token  l5 = null;
		AST l5_AST = null;
		AST t1_AST = null;
		AST t2_AST = null;
		AST t3_AST = null;
		AST t4_AST = null;
		Token  r5 = null;
		AST r5_AST = null;
		Token  l6 = null;
		AST l6_AST = null;
		AST v_AST = null;
		Token  r6 = null;
		AST r6_AST = null;
		Token  l7 = null;
		AST l7_AST = null;
		AST opt_AST = null;
		Token  r7 = null;
		AST r7_AST = null;
		Token  l8 = null;
		AST l8_AST = null;
		AST qc_AST = null;
		AST dt_AST = null;
		Token  r8 = null;
		AST r8_AST = null;
		Token  l9 = null;
		AST l9_AST = null;
		AST qo_AST = null;
		Token  r9 = null;
		AST r9_AST = null;
		Token  l10 = null;
		AST l10_AST = null;
		AST qv_AST = null;
		AST v2_AST = null;
		Token  r10 = null;
		AST r10_AST = null;
		Token  l11 = null;
		AST l11_AST = null;
		AST qt_AST = null;
		AST t5_AST = null;
		Token  r11 = null;
		AST r11_AST = null;
		Token  l12 = null;
		AST l12_AST = null;
		AST qp2_AST = null;
		AST p1_AST = null;
		Token  r12 = null;
		AST r12_AST = null;
		Token  l13 = null;
		AST l13_AST = null;
		AST qc1_AST = null;
		AST c2_AST = null;
		Token  r13 = null;
		AST r13_AST = null;
		Token  l14 = null;
		AST l14_AST = null;
		AST qi_AST = null;
		AST id_AST = null;
		Token  r14 = null;
		AST r14_AST = null;
		Token  l15 = null;
		AST l15_AST = null;
		AST kw_AST = null;
		Token  r15 = null;
		AST r15_AST = null;
		Token  l16 = null;
		AST l16_AST = null;
		Token  dq = null;
		AST dq_AST = null;
		Token  r16 = null;
		AST r16_AST = null;
		
		switch ( LA(1)) {
		case CALLED_ONLY_WITHIN_TRANSACTION:
		{
			l1 = LT(1);
			l1_AST = astFactory.create(l1);
			match(CALLED_ONLY_WITHIN_TRANSACTION);
			AST tmp972_AST = null;
			tmp972_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_procedure_name();
			qp_AST = (AST)returnAST;
			r1 = LT(1);
			r1_AST = astFactory.create(r1);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CALLED_ONLY_WITHIN_TRANSACTION_PRAGMA,"called_only_within_transaction_pragma")).add(qp_AST)); 
					    SrcAST.setSpan(global_pragma_AST,l1_AST,r1_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case NOT_CALLED_WITHIN_TRANSACTION:
		{
			l2 = LT(1);
			l2_AST = astFactory.create(l2);
			match(NOT_CALLED_WITHIN_TRANSACTION);
			AST tmp973_AST = null;
			tmp973_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_procedure_name();
			qp1_AST = (AST)returnAST;
			r2 = LT(1);
			r2_AST = astFactory.create(r2);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(NOT_CALLED_WITHIN_TRANSACTION_PRAGMA,"not_called_within_transaction_pragma")).add(qp1_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l2_AST,r2_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case TRANSLATE_OWNER_NAME:
		{
			l3 = LT(1);
			l3_AST = astFactory.create(l3);
			match(TRANSLATE_OWNER_NAME);
			AST tmp974_AST = null;
			tmp974_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_owner_name();
			ow_AST = (AST)returnAST;
			AST tmp975_AST = null;
			tmp975_AST = astFactory.create(LT(1));
			match(COMMA);
			db2_identifier();
			di_AST = (AST)returnAST;
			r3 = LT(1);
			r3_AST = astFactory.create(r3);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TRANSLATE_OWNER_NAME_PRAGMA,"translate_owner_name_pragma")).add(ow_AST).add(di_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l3_AST,r3_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case IGNORE_OWNER_NAME:
		{
			l4 = LT(1);
			l4_AST = astFactory.create(l4);
			match(IGNORE_OWNER_NAME);
			AST tmp976_AST = null;
			tmp976_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_owner_name();
			ow2_AST = (AST)returnAST;
			r4 = LT(1);
			r4_AST = astFactory.create(r4);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(IGNORE_OWNER_NAME_PRAGMA,"ignore_owner_name_pragma")).add(ow2_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l4_AST,r4_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case TRANSLATE_TYPE:
		{
			l5 = LT(1);
			l5_AST = astFactory.create(l5);
			match(TRANSLATE_TYPE);
			AST tmp977_AST = null;
			tmp977_AST = astFactory.create(LT(1));
			match(LPAREN);
			char_string_lit();
			t1_AST = (AST)returnAST;
			AST tmp978_AST = null;
			tmp978_AST = astFactory.create(LT(1));
			match(COMMA);
			char_string_lit();
			t2_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case COMMA:
			{
				AST tmp979_AST = null;
				tmp979_AST = astFactory.create(LT(1));
				match(COMMA);
				char_string_lit();
				t3_AST = (AST)returnAST;
				{
				switch ( LA(1)) {
				case COMMA:
				{
					AST tmp980_AST = null;
					tmp980_AST = astFactory.create(LT(1));
					match(COMMA);
					char_string_lit();
					t4_AST = (AST)returnAST;
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(LT(1), getFilename());
				}
				}
				}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			r5 = LT(1);
			r5_AST = astFactory.create(r5);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(5)).add(astFactory.create(TRANSLATE_TYPE_PRAGMA,"translate_type_pragma")).add(t1_AST).add(t2_AST).add(t3_AST).add(t4_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l5_AST,r5_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case VARIABLE_PREFIX:
		{
			l6 = LT(1);
			l6_AST = astFactory.create(l6);
			match(VARIABLE_PREFIX);
			AST tmp981_AST = null;
			tmp981_AST = astFactory.create(LT(1));
			match(LPAREN);
			char_string_lit();
			v_AST = (AST)returnAST;
			r6 = LT(1);
			r6_AST = astFactory.create(r6);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(VARIABLE_PREFIX_PRAGMA,"variable_prefix_pragma")).add(v_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l6_AST,r6_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case CREATE_TABLE_OPTIONS:
		{
			l7 = LT(1);
			l7_AST = astFactory.create(l7);
			match(CREATE_TABLE_OPTIONS);
			AST tmp982_AST = null;
			tmp982_AST = astFactory.create(LT(1));
			match(LPAREN);
			char_string_lit();
			opt_AST = (AST)returnAST;
			r7 = LT(1);
			r7_AST = astFactory.create(r7);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CREATE_TABLE_OPTIONS_PRAGMA,"create_table_options_pragma")).add(opt_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l7_AST,r7_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case BIND_COLUMN_TYPE:
		{
			l8 = LT(1);
			l8_AST = astFactory.create(l8);
			match(BIND_COLUMN_TYPE);
			AST tmp983_AST = null;
			tmp983_AST = astFactory.create(LT(1));
			match(LPAREN);
			qualified_column_name();
			qc_AST = (AST)returnAST;
			AST tmp984_AST = null;
			tmp984_AST = astFactory.create(LT(1));
			match(COMMA);
			datatype();
			dt_AST = (AST)returnAST;
			{
			switch ( LA(1)) {
			case FOR:
			{
				AST tmp985_AST = null;
				tmp985_AST = astFactory.create(LT(1));
				match(FOR);
				AST tmp986_AST = null;
				tmp986_AST = astFactory.create(LT(1));
				match(BIT);
				AST tmp987_AST = null;
				tmp987_AST = astFactory.create(LT(1));
				match(DATA);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			r8 = LT(1);
			r8_AST = astFactory.create(r8);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(BIND_COLUMN_TYPE_PRAGMA,"bind_column_type_pragma")).add(qc_AST).add(dt_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l8_AST,r8_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case SET_DEFAULT_SCHEMA:
		{
			l9 = LT(1);
			l9_AST = astFactory.create(l9);
			match(SET_DEFAULT_SCHEMA);
			AST tmp988_AST = null;
			tmp988_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_owner_name();
			qo_AST = (AST)returnAST;
			r9 = LT(1);
			r9_AST = astFactory.create(r9);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SET_DEFAULT_SCHEMA_PRAGMA,"set_default_schema_pragma")).add(qo_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l9_AST,r9_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case RENAME_VIEW:
		{
			l10 = LT(1);
			l10_AST = astFactory.create(l10);
			match(RENAME_VIEW);
			AST tmp989_AST = null;
			tmp989_AST = astFactory.create(LT(1));
			match(LPAREN);
			ownerDOTname();
			qv_AST = (AST)returnAST;
			match(COMMA);
			db2_identifier();
			v2_AST = (AST)returnAST;
			r10 = LT(1);
			r10_AST = astFactory.create(r10);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(RENAME_VIEW_PRAGMA,"rename_view_pragma")).add(qv_AST).add(v2_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l10_AST,r10_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case RENAME_TABLE:
		{
			l11 = LT(1);
			l11_AST = astFactory.create(l11);
			match(RENAME_TABLE);
			AST tmp991_AST = null;
			tmp991_AST = astFactory.create(LT(1));
			match(LPAREN);
			qualified_table_name();
			qt_AST = (AST)returnAST;
			AST tmp992_AST = null;
			tmp992_AST = astFactory.create(LT(1));
			match(COMMA);
			db2_identifier();
			t5_AST = (AST)returnAST;
			r11 = LT(1);
			r11_AST = astFactory.create(r11);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(RENAME_TABLE_PRAGMA,"rename_table_pragma")).add(qt_AST).add(t5_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l11_AST,r11_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case RENAME_PROCEDURE:
		{
			l12 = LT(1);
			l12_AST = astFactory.create(l12);
			match(RENAME_PROCEDURE);
			AST tmp993_AST = null;
			tmp993_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_procedure_name();
			qp2_AST = (AST)returnAST;
			AST tmp994_AST = null;
			tmp994_AST = astFactory.create(LT(1));
			match(COMMA);
			db2_identifier();
			p1_AST = (AST)returnAST;
			r12 = LT(1);
			r12_AST = astFactory.create(r12);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(RENAME_PROCEDURE_PRAGMA,"rename_procedure_pragma")).add(qp2_AST).add(p1_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l12_AST,r12_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case RENAME_COLUMN:
		{
			l13 = LT(1);
			l13_AST = astFactory.create(l13);
			match(RENAME_COLUMN);
			AST tmp995_AST = null;
			tmp995_AST = astFactory.create(LT(1));
			match(LPAREN);
			qualified_column_name();
			qc1_AST = (AST)returnAST;
			AST tmp996_AST = null;
			tmp996_AST = astFactory.create(LT(1));
			match(COMMA);
			db2_identifier();
			c2_AST = (AST)returnAST;
			r13 = LT(1);
			r13_AST = astFactory.create(r13);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(RENAME_COLUMN_PRAGMA,"rename_column_pragma")).add(qc1_AST).add(c2_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l13_AST,r13_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case RENAME_INDEX:
		{
			l14 = LT(1);
			l14_AST = astFactory.create(l14);
			match(RENAME_INDEX);
			AST tmp997_AST = null;
			tmp997_AST = astFactory.create(LT(1));
			match(LPAREN);
			qual_index_name();
			qi_AST = (AST)returnAST;
			AST tmp998_AST = null;
			tmp998_AST = astFactory.create(LT(1));
			match(COMMA);
			db2_identifier();
			id_AST = (AST)returnAST;
			r14 = LT(1);
			r14_AST = astFactory.create(r14);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(RENAME_INDEX_PRAGMA,"rename_index_pragma")).add(qi_AST).add(id_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l14_AST,r14_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case TREAT_AS_KEYWORD:
		{
			l15 = LT(1);
			l15_AST = astFactory.create(l15);
			match(TREAT_AS_KEYWORD);
			AST tmp999_AST = null;
			tmp999_AST = astFactory.create(LT(1));
			match(LPAREN);
			char_string_lit();
			kw_AST = (AST)returnAST;
			r15 = LT(1);
			r15_AST = astFactory.create(r15);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(TREAT_AS_KEYWORD_PRAGMA,"treat_as_keyword_pragma")).add(kw_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l15_AST,r15_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		case EXTEND_EXCEPTION_HANDLER:
		{
			l16 = LT(1);
			l16_AST = astFactory.create(l16);
			match(EXTEND_EXCEPTION_HANDLER);
			AST tmp1000_AST = null;
			tmp1000_AST = astFactory.create(LT(1));
			match(LPAREN);
			dq = LT(1);
			dq_AST = astFactory.create(dq);
			match(DOUBLE_QUOTED_STRING_LIT);
			r16 = LT(1);
			r16_AST = astFactory.create(r16);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				global_pragma_AST = (AST)currentAST.root;
				global_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(EXTEND_EXCEPTION_HANDLER_PRAGMA,"extend_exception_handler_pragma")).add(dq_AST)); 
					  	SrcAST.setSpan(global_pragma_AST,l16_AST,r16_AST);
					
				currentAST.root = global_pragma_AST;
				currentAST.child = global_pragma_AST!=null &&global_pragma_AST.getFirstChild()!=null ?
					global_pragma_AST.getFirstChild() : global_pragma_AST;
				currentAST.advanceChildToEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		returnAST = global_pragma_AST;
	}
	
	public final void column_rename_pragma() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST column_rename_pragma_AST = null;
		AST di_AST = null;
		
		AST tmp1001_AST = null;
		tmp1001_AST = astFactory.create(LT(1));
		match(RENAME_TO);
		AST tmp1002_AST = null;
		tmp1002_AST = astFactory.create(LT(1));
		match(LPAREN);
		db2_identifier();
		di_AST = (AST)returnAST;
		AST tmp1003_AST = null;
		tmp1003_AST = astFactory.create(LT(1));
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			column_rename_pragma_AST = (AST)currentAST.root;
			column_rename_pragma_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(RENAME_COLUMN_PRAGMA,"rename_column_pragma")).add(di_AST));
			currentAST.root = column_rename_pragma_AST;
			currentAST.child = column_rename_pragma_AST!=null &&column_rename_pragma_AST.getFirstChild()!=null ?
				column_rename_pragma_AST.getFirstChild() : column_rename_pragma_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = column_rename_pragma_AST;
	}
	
	public final void tableDOTname() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST tableDOTname_AST = null;
		AST t_AST = null;
		AST n_AST = null;
		
		table_name();
		t_AST = (AST)returnAST;
		AST tmp1004_AST = null;
		tmp1004_AST = astFactory.create(LT(1));
		match(DOT);
		name();
		n_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			tableDOTname_AST = (AST)currentAST.root;
			tableDOTname_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(TABLE_DOT_NAME,"table_dot_name")).add(t_AST).add(n_AST)); 
				    SrcAST.setSpan(tableDOTname_AST,t_AST,n_AST);
				
			currentAST.root = tableDOTname_AST;
			currentAST.child = tableDOTname_AST!=null &&tableDOTname_AST.getFirstChild()!=null ?
				tableDOTname_AST.getFirstChild() : tableDOTname_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = tableDOTname_AST;
	}
	
	public final void server_name() throws RecognitionException, TokenStreamException {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST server_name_AST = null;
		AST n_AST = null;
		
		name();
		n_AST = (AST)returnAST;
		if ( inputState.guessing==0 ) {
			server_name_AST = (AST)currentAST.root;
			server_name_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(SERVER_NAME,"server_name")).add(n_AST));
			currentAST.root = server_name_AST;
			currentAST.child = server_name_AST!=null &&server_name_AST.getFirstChild()!=null ?
				server_name_AST.getFirstChild() : server_name_AST;
			currentAST.advanceChildToEnd();
		}
		returnAST = server_name_AST;
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"\"dump\"",
		"\"deallocate\"",
		"\"truncate\"",
		"\"trigger\"",
		"\"open\"",
		"\"fetch\"",
		"\"column_name_start\"",
		"\"data_type_start\"",
		"\"exec\"",
		"\"execute\"",
		"\"double\"",
		"\"precision\"",
		"\"holdlock\"",
		"\"varying\"",
		"\"national\"",
		"\"convert\"",
		"\"create\"",
		"\"table\"",
		"\"identity\"",
		"\"null\"",
		"\"not\"",
		"\"go\"",
		"\"user\"",
		"\"unique\"",
		"\"primary\"",
		"\"key\"",
		"\"clustered\"",
		"\"nonclustered\"",
		"\"with\"",
		"\"fillfactor\"",
		"\"on\"",
		"\"references\"",
		"\"check\"",
		"\"checkpoint\"",
		"\"and\"",
		"\"or\"",
		"\"in\"",
		"\"between\"",
		"\"like\"",
		"\"escape\"",
		"\"is\"",
		"\"foreign\"",
		"\"alter\"",
		"\"drop\"",
		"\"constraint\"",
		"\"add\"",
		"\"default\"",
		"\"rule\"",
		"\"as\"",
		"\"index\"",
		"\"database\"",
		"\"for\"",
		"\"load\"",
		"\"procedure\"",
		"\"proc\"",
		"\"isolation\"",
		"\"read\"",
		"\"browse\"",
		"\"select\"",
		"\"all\"",
		"\"distinct\"",
		"\"case\"",
		"\"when\"",
		"\"else\"",
		"\"end\"",
		"\"having\"",
		"\"group\"",
		"\"by\"",
		"\"any\"",
		"\"some\"",
		"\"exists\"",
		"\"from\"",
		"\"order\"",
		"\"asc\"",
		"\"desc\"",
		"\"compute\"",
		"\"declare\"",
		"\"count\"",
		"\"sum\"",
		"\"where\"",
		"\"only\"",
		"\"update\"",
		"\"into\"",
		"\"of\"",
		"\"delete\"",
		"\"current\"",
		"\"insert\"",
		"\"values\"",
		"\"set\"",
		"\"begin\"",
		"\"while\"",
		"\"break\"",
		"\"continue\"",
		"\"goto\"",
		"\"return\"",
		"\"print\"",
		"\"raiserror\"",
		"\"if\"",
		"\"waitfor\"",
		"\"use\"",
		"\"setuser\"",
		"\"commit\"",
		"\"rollback\"",
		"\"transaction\"",
		"\"tran\"",
		"\"work\"",
		"\"save\"",
		"\"off\"",
		"\"close\"",
		"\"cursor\"",
		"\"identity_insert\"",
		"\"offsets\"",
		"\"rowcount\"",
		"\"textsize\"",
		"\"authorization\"",
		"\"statistics\"",
		"\"level\"",
		"\"previleges\"",
		"\"public\"",
		"\"grant\"",
		"\"revoke\"",
		"\"cascade\"",
		"\"option\"",
		"\"to\"",
		"\"view\"",
		"\"union\"",
		"\"readtext\"",
		"\"writetext\"",
		"\"kill\"",
		"\"dbcc\"",
		"\"reconfigure\"",
		"\"plan\"",
		"\"join\"",
		"\"pragma\"",
		"\"rename_column\"",
		"\"rename_index\"",
		"\"rename_procedure\"",
		"\"translate_owner_name\"",
		"\"rename_table\"",
		"\"rename_view\"",
		"\"bind_column_type\"",
		"\"inner\"",
		"\"outer\"",
		"\"left\"",
		"\"right\"",
		"\"collate\"",
		"\"deny\"",
		"\"full\"",
		"\"cross\"",
		"\"updatetext\"",
		"\"top\"",
		"\"percent\"",
		"\"rowguidcol\"",
		"\"shutdown\"",
		"\"backup\"",
		"\"restore\"",
		"\"bulk\"",
		"\"function\"",
		"\"avg\"",
		"\"max\"",
		"\"min\"",
		"\"lock\"",
		"\"online\"",
		"\"replace\"",
		"\"role\"",
		"\"noholdlock\"",
		"\"shared\"",
		"\"readpast\"",
		"\"long\"",
		"\"unsigned\"",
		"\"temporary\"",
		"\"autoincrement\"",
		"\"absolute\"",
		"\"action\"",
		"\"activation\"",
		"\"after\"",
		"\"allow_dup_row\"",
		"\"allrows\"",
		"\"at\"",
		"\"auto\"",
		"\"before\"",
		"\"binary\"",
		"\"cast\"",
		"\"character\"",
		"\"char\"",
		"\"consumers\"",
		"\"concat\"",
		"\"count_big\"",
		"\"column\"",
		"\"cube\"",
		"\"datapages\"",
		"\"datarows\"",
		"\"date\"",
		"\"delay\"",
		"\"disable\"",
		"\"distributed\"",
		"\"domain\"",
		"\"dynamic\"",
		"\"each\"",
		"\"elements\"",
		"\"enable\"",
		"\"encryption\"",
		"\"errordata\"",
		"\"errorexit\"",
		"\"exclusive\"",
		"\"expand\"",
		"\"expiration\"",
		"\"exp_row_size\"",
		"\"external\"",
		"\"fast\"",
		"\"fast_forward\"",
		"\"fastfirstrow\"",
		"\"first\"",
		"\"force\"",
		"\"forward_only\"",
		"\"fullscan\"",
		"\"global\"",
		"\"hash\"",
		"\"identity_gap\"",
		"\"insensitive\"",
		"\"instead\"",
		"\"ignore_dup_key\"",
		"\"ignore_dup_row\"",
		"\"keep\"",
		"\"keepfixed\"",
		"\"keyset\"",
		"\"last\"",
		"\"length\"",
		"\"local\"",
		"\"log\"",
		"\"loop\"",
		"\"maxdop\"",
		"\"max_rows_per_page\"",
		"\"maximum\"",
		"\"merge\"",
		"\"membership\"",
		"\"mirrorexit\"",
		"\"mode\"",
		"\"modify\"",
		"\"name\"",
		"\"new\"",
		"\"next\"",
		"\"no\"",
		"\"nocheck\"",
		"\"norecompute\"",
		"\"nowait\"",
		"\"old\"",
		"\"output\"",
		"\"out\"",
		"\"optimistic\"",
		"\"parallel\"",
		"\"partition\"",
		"\"passwd\"",
		"\"prefetch\"",
		"\"prior\"",
		"\"processexit\"",
		"\"proxy_update\"",
		"\"robust\"",
		"\"referencing\"",
		"\"rollup\"",
		"\"read_only\"",
		"\"relative\"",
		"\"remote\"",
		"\"replication\"",
		"\"resample\"",
		"\"reservepagegap\"",
		"\"resolve\"",
		"\"returns\"",
		"\"raw\"",
		"\"row\"",
		"\"rows\"",
		"\"sample\"",
		"\"schema\"",
		"\"schemabinding\"",
		"\"scroll\"",
		"\"scroll_lock\"",
		"\"seterror\"",
		"\"share\"",
		"\"size\"",
		"\"sorted_data\"",
		"\"static\"",
		"\"statement\"",
		"\"stripe\"",
		"\"text\"",
		"\"textimage_on\"",
		"\"then\"",
		"\"timestamp\"",
		"\"time\"",
		"\"type_warning\"",
		"\"unicode\"",
		"\"unpartition\"",
		"\"using\"",
		"\"views\"",
		"\"wait\"",
		"\"xml\"",
		"\"xmldata\"",
		"\"called_only_within_transaction\"",
		"\"not_called_within_transaction\"",
		"\"ignore_owner_name\"",
		"\"translate_type\"",
		"\"variable_prefix\"",
		"\"create_table_options\"",
		"\"set_default_schema\"",
		"\"single_row\"",
		"DOTDOT",
		"DOT",
		"NUM_REAL",
		"NUM_INT",
		"LIST_CONSTRUCTOR",
		"SET_CONSTRUCTOR",
		"MULTISET_CONSTRUCTOR",
		"BAD_STRING_LITERAL",
		"PRAGMA_ML_COMMENT",
		"PRAGMA_SL_COMMENT",
		"SP_NAME",
		"LESS_GREATER",
		"LTE",
		"GTE",
		"NOT_EQUAL",
		"NOT_LESS",
		"NOT_GREATER",
		"PLUS",
		"MINUS",
		"STAR",
		"COMMA",
		"SEMI_COLON",
		"COLON",
		"EQUAL",
		"LT",
		"GT",
		"NOT_OPERATOR",
		"LPAREN",
		"RPAREN",
		"XOR",
		"SLASH",
		"STAR_SLASH",
		"LEFT_OUTER_JOIN",
		"RIGHT_OUTER_JOIN",
		"TILDE",
		"OR_SIGN",
		"AND_SIGN",
		"AT_SIGN",
		"WS",
		"NEWLINE",
		"SKIPLINE",
		"SLASH_STAR",
		"SL_COMMENT",
		"SIMPLE_IDENT",
		"IDENT",
		"AT_IDENT",
		"GLOBAL_VAR",
		"DOUBLE_QUOTED_STRING_LIT",
		"DELIMITED_IDENT",
		"SINGLE_QUOTED_STRING_LIT",
		"EXACT_NUMERIC",
		"MONEY_NUM_LIT",
		"HEX_STRING_LIT",
		"BIT_STRING_LIT",
		"EXPONENT",
		"CREATE_TABLE",
		"SERVER_NAME",
		"TSQL_AST",
		"OWNER_DOT_NAME",
		"QUALIFIED_TABLE_NAME",
		"QUALIFIED_COLUMN_NAME",
		"OWNER_NAME",
		"DATABASE_NAME",
		"TABLE_NAME",
		"COLUMN_DEF",
		"COMPUTED_COLUMN",
		"COLUMN_NAME",
		"COLUMN_CONSTR_DEF",
		"COLUMN_CONSTR",
		"CONSTR_NAME",
		"IDENTITY_CONSTR",
		"SEED",
		"INCREMENT",
		"NULL_CONSTR",
		"NOT_NULL_CONSTR",
		"DEFAULT_CONSTR",
		"UNIQUE_CONSTR",
		"PRIMARY_KEY_CONSTR",
		"UNIQUE_OR_PKEY_OPTIONS",
		"ORDER_CLAUSE",
		"REFERENCES_CLAUSE",
		"COLUMN_LIST",
		"COLUMN_NAME_ORDER_LIST",
		"OFF_IN_ROW",
		"COLLATE_DEF",
		"CLUSTER_DEF",
		"TABLE_PROPERTIES",
		"TABLE_CONSTR_LIST",
		"COLUMN_DEF_LIST",
		"TABLE_CONSTR_DEF",
		"TABLE_CONSTR",
		"FOREIGN_KEY_CLAUSE",
		"ON_DELETE_ACTION",
		"ON_UPDATE_ACTION",
		"CHECK_CONSTR",
		"TIMESTAMP_COLUMN",
		"IDENTIFIER",
		"QUOTED_IDENTIFIER",
		"END_OF_FILE",
		"DOFILE",
		"DATATYPE",
		"UNARY_PLUS",
		"UNARY_MINUS",
		"SIZE_CONSTR",
		"TYPE_NAME",
		"SPECIAL_VALUE",
		"CURRENT_TIMESTAMP",
		"CURRENT_TIME",
		"CURRENT_DATE",
		"AGGREGATE_EXPR",
		"SUM_EXPR",
		"AVG_EXPR",
		"COUNT_STAR",
		"COUNT_BIG_STAR",
		"MAX_EXPR",
		"MIN_EXPR",
		"CONVERT_EXPR",
		"EXPR_FUNCTION_CALL",
		"CAST_EXPR",
		"COUNT_EXPR",
		"STMT",
		"STMT_LIST",
		"BLOCK_STMT",
		"CONSTANT_LITERAL",
		"UNSIGNED_NUM_INT",
		"EXPR",
		"EXPR_LIST",
		"WHEN_COND",
		"IN_COND",
		"NOT_IN_COND",
		"BETWEEN_COND",
		"NOT_BETWEEN_COND",
		"AND_CLAUSE",
		"ELSE_CLAUSE",
		"LIKE_COND",
		"NOT_LIKE_COND",
		"EXISTS_COND",
		"UPDATE_COND",
		"ESCAPE_OPT",
		"IS_NULL_COND",
		"IS_NOT_NULL_COND",
		"COMPARISON_COND",
		"SIMPLE_COMPARISON",
		"JOIN_COMPARISON",
		"SUBQUERY_COMPARISON",
		"NOT_EXPR",
		"AND_EXPR",
		"OR_EXPR",
		"COND_EXPR",
		"CASE_EXPR",
		"FUNCTION_CALL",
		"CREATE_INDEX_STMT",
		"INDEX_NAME",
		"QUAL_INDEX_NAME",
		"IGNORED_INPUT",
		"CREATE_DEFAULT_STMT",
		"DEFAULT_NAME",
		"QUAL_DEFAULT_NAME",
		"DEFAULT_NAME_LIST",
		"DROP_DEFAULT_STMT",
		"CREATE_DATABASE_STMT",
		"ALTER_DATABASE_STMT",
		"DROP_DATABASE_STMT",
		"DATABASE_NAME_LIST",
		"SELECT_STMT",
		"DISTINCT_CLAUSE",
		"TOP_N_CLAUSE",
		"SELECT_ELEM",
		"COLUMN_HEADING",
		"SELECT_ELEM_LIST",
		"STAR_SELECT_ELEM",
		"IDENTITY_SELECT_ELEM",
		"EXPR_SELECT_ELEM",
		"SYB_SPECS",
		"MSSQL_SPECS",
		"FROM_CLAUSE",
		"FROM_ELEM_LIST",
		"TABLE_REFERENCE",
		"DERIVED_TABLE",
		"INTO_CLAUSE",
		"WHERE_CLAUSE",
		"HAVING_CLAUSE",
		"GROUP_BY_CLAUSE",
		"SIMPLE_UNION",
		"UNION_STMT",
		"UNION_LIST",
		"CROSS_JOIN",
		"FULL_OUTER_JOIN",
		"FULL_JOIN",
		"RIGHT_JOIN",
		"LEFT_JOIN",
		"INNER_JOIN",
		"NESTED_UNION",
		"ORDER_BY_CLAUSE",
		"ORDER_SPEC",
		"ORDER_SPEC_LIST",
		"VAR_EXPR_ASSIGN",
		"VAR_CURSOR_ASSIGN",
		"VARIABLE_ASSIGNMENT_LIST",
		"CURSOR_VAR_OPTION_LIST",
		"QUALIFIED_COLUMN_NAME_LIST",
		"UPDATE_CLAUSE",
		"UPDATE_LIST",
		"VARIABLE_ASSIGN_SELECT",
		"ORDINARY_SELECT",
		"COMPUTE_CLAUSE",
		"SUBQUERY",
		"INSERT_STMT",
		"INSERT_SELECT",
		"INSERT_VALUES",
		"UPDATE_STMT",
		"SIMPLE_UPDATE",
		"JOINED_UPDATE",
		"CURSOR_UPDATE",
		"UPDATE_ASSIGN",
		"UPDATE_ASSIGN_LIST",
		"CURSOR_REF",
		"INSERT_EXEC",
		"CREATE_PROCEDURE_STMT",
		"ALTER_PROCEDURE_STMT",
		"LABELLED_STMT",
		"QUAL_PROCEDURE_NAME",
		"PROC_PARAM",
		"PROC_PARAM_LIST",
		"PROC_NUMBER",
		"UNSUPPORTED",
		"CREATE_TRIGGER_STMT",
		"ALTER_TRIGGER_STMT",
		"QUAL_TRIGGER_NAME",
		"ASA_TRIGGER",
		"SQLSERVER_TRIGGER",
		"TRIGGER_TIME",
		"TRIGGER_EVENT_LIST",
		"TRIGGER_EVENT",
		"TRIGGER_REFERENCE",
		"TRIGGER_REFERENCE_LIST",
		"TRIGGER_FOR_EACH",
		"ON_DELETE",
		"ON_INSERT",
		"ON_UPDATE",
		"CREATE_VIEW_STMT",
		"ALTER_VIEW_STMT",
		"DELETE_STMT",
		"SIMPLE_DELETE",
		"JOINED_DELETE",
		"CURSOR_DELETE",
		"DECLARE_CURSOR_STMT",
		"CLOSE_CURSOR_STMT",
		"OPEN_CURSOR_STMT",
		"CHECKPOINT_STMT",
		"DEALLOCATE_STMT",
		"FETCH_STMT",
		"FETCH_INDEX",
		"FETCH_TARGET_LIST",
		"FETCH_VALUE",
		"TRUNCATE_STMT",
		"COMMIT_STMT",
		"ROLLBACK_STMT",
		"SETUSER_STMT",
		"ALTER_TABLE_STMT",
		"ADD_COLUMN",
		"ALTER_COLUMN",
		"ADD_CONSTR",
		"DROP_ALTERATION",
		"REPLACE_COLUMN",
		"NAME_LIST",
		"CONSTR_NAME_LIST",
		"COL_AND_CONSTR_NAME_LIST",
		"DROP_TABLE_STMT",
		"DROP_VIEW_STMT",
		"CREATE_RULE_STMT",
		"DROP_RULE_STMT",
		"CREATE_ROLE_STMT",
		"ALTER_ROLE_STMT",
		"DROP_ROLE_STMT",
		"VARIABLE_DECL_STMT",
		"VAR_DECL",
		"CURSOR_DECL",
		"TABLE_DECL",
		"DROP_INDEX_STMT",
		"DROP_TRIGGER_STMT",
		"TABLE_DOT_NAME",
		"EXEC_STRING_STMT",
		"BREAK_STMT",
		"GOTO_STMT",
		"CONTINUE_STMT",
		"RETURN_STMT",
		"PRINT_STMT",
		"RAISERROR_STMT",
		"ERROR_NUM",
		"IF_STMT",
		"PROC_CALL_STMT",
		"REMOTE_PROC_NAME",
		"PROC_ARG",
		"PROC_ARG_LIST",
		"DROP_PROCEDURE_STMT",
		"BEGIN_TRANSACTION_STMT",
		"SAVE_TRANSACTION_STMT",
		"ROLLBACK_TRIGGER_STMT",
		"USE_STMT",
		"WHILE_STMT",
		"ERROR_STMT",
		"CREATE_FUNCTION_STMT",
		"FUNC_PARAM_LIST",
		"FUNC_PARAM",
		"TABLE_FUNC_ARG",
		"TABLE_FUNC_ARG_LIST",
		"TABLE_FUNC_CALL",
		"QUAL_FUNC_NAME",
		"QUAL_FUNC_NAME_LIST",
		"QUAL_FUNC_CALL_NAME",
		"USER_DEF_FUNC_CALL_EXPR",
		"DROP_FUNCTION_STMT",
		"CREATE_DOMAIN_STMT",
		"DECLARE_LOC_TEMP_TABLE",
		"WAITFOR_STMT",
		"CREATE_STATISTICS_STMT",
		"UPDATE_STATISTICS_STMT",
		"DROP_STATISTICS_STMT",
		"READTEXT_STMT",
		"WRITETEXT_STMT",
		"UPDATETEXT_STMT",
		"KILL_STMT",
		"DBCC_STMT",
		"RECONFIGURE_STMT",
		"CREATE_SCHEMA_STMT",
		"SHUTDOWN_STMT",
		"BACKUP_STMT",
		"RESTORE_STMT",
		"BULK_INSERT_STMT",
		"LOCK_STMT",
		"DUMP_STMT",
		"GRANT_STMT",
		"PERMISSIONS",
		"PERMISSION",
		"PERMISSION_LIST",
		"COMMAND",
		"COMMAND_LIST",
		"PERMISSIONS_TO",
		"PERMISSIONS_ON",
		"REVOKE_STMT",
		"DENY_STMT",
		"SET_STMT",
		"SET_ANSI_NULL",
		"SET_ANSI_NULL_DFLT_ON",
		"SET_ANSI_NULL_DFLT_OFF",
		"SET_NOCOUNT",
		"UNSUPPORTED_SET_STMT",
		"SET_DATEFORMAT",
		"SET_CURSOR",
		"IDENTIFIER_OR_STRING_LIST",
		"SET_ROWCOUNT",
		"SET_IDENTITY_INSERT",
		"PRAGMA_STMT",
		"GLOBAL_PRAGMA",
		"QUAL_OWNER_NAME",
		"CALLED_ONLY_WITHIN_TRANSACTION_PRAGMA",
		"NOT_CALLED_WITHIN_TRANSACTION_PRAGMA",
		"TRANSLATE_OWNER_NAME_PRAGMA",
		"IGNORE_OWNER_NAME_PRAGMA",
		"TRANSLATE_TYPE_PRAGMA",
		"BIND_COLUMN_TYPE_PRAGMA",
		"VARIABLE_PREFIX_PRAGMA",
		"CREATE_TABLE_OPTIONS_PRAGMA",
		"SET_DEFAULT_SCHEMA_PRAGMA",
		"RENAME_VIEW_PRAGMA",
		"RENAME_COLUMN_PRAGMA",
		"RENAME_TABLE_PRAGMA",
		"RENAME_PROCEDURE_PRAGMA",
		"SINGLE_ROW_PRAGMA",
		"RENAME_INDEX_PRAGMA",
		"TREAT_AS_KEYWORD_PRAGMA",
		"EXTEND_EXCEPTION_HANDLER_PRAGMA",
		"PAIR",
		"UNTRANSLATED_STMT",
		"SET_QUOTED_ID_STMT",
		"SQL_SERVER_FORMAT",
		"GRANT_PERMISSIONS",
		"GRANT_CONNECT",
		"GRANT_ROLE",
		"SP_PROC_CALL_STMT",
		"SP_ARG",
		"QUAL_SP_PROC_NAME",
		"SP_ARG_LIST",
		"OWNER_DOT_NAME_LIST",
		"TABLE_DOT_NAME_LIST",
		"CALL_EXPRESSION",
		"SIMPLE_NAME",
		"DISTINCT_QUALIF",
		"ALL_QUALIF",
		"EXISTING",
		"FILE",
		"DELIMITER",
		"RAPREN",
		"ATTACH",
		"FILEGROUP",
		"REMOVE",
		"READONLY",
		"READWRITE",
		"\"scroll_locks\"",
		"\"unlock\"",
		"PRESERVE",
		"COLUMNS",
		"BYTES",
		"CHARS",
		"CHARACTERS",
		"CONNECT",
		"PREVILEGES",
		"PROXY",
		"SESSION",
		"ENDTRAN",
		"TRANSLATE_OWNER_NAME",
		"BIT",
		"DATA",
		"TREAT_AS_KEYWORD",
		"EXTEND_EXCEPTION_HANDLER",
		"RENAME_TO",
		"SCROLL_LOCKS",
		"TYPE"
	};
	
	protected void buildTokenTypeASTClassMap() {
		tokenTypeToASTClassMap=null;
	};
	
	private static final long[] mk_tokenSet_0() {
		long[] data = new long[24];
		data[0]=70368745226240L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	private static final long[] mk_tokenSet_1() {
		long[] data = new long[12];
		data[0]=432345564227567616L;
		data[5]=1024L;
		return data;
	}
	public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
	private static final long[] mk_tokenSet_2() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_2 = new BitSet(mk_tokenSet_2());
	private static final long[] mk_tokenSet_3() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4616189618046107391L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_3 = new BitSet(mk_tokenSet_3());
	private static final long[] mk_tokenSet_4() {
		long[] data = new long[24];
		data[0]=4611897262141879154L;
		data[1]=1729742896541794304L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3526318508222447359L;
		data[5]=4032974323712L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_4 = new BitSet(mk_tokenSet_4());
	private static final long[] mk_tokenSet_5() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=12884901888L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_5 = new BitSet(mk_tokenSet_5());
	private static final long[] mk_tokenSet_6() {
		long[] data = new long[24];
		data[0]=4611897266436846450L;
		data[1]=1729742896541794304L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3526318508222447359L;
		data[5]=4050154195552L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_6 = new BitSet(mk_tokenSet_6());
	private static final long[] mk_tokenSet_7() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794304L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_7 = new BitSet(mk_tokenSet_7());
	private static final long[] mk_tokenSet_8() {
		long[] data = new long[24];
		data[0]=-4148729870966836238L;
		data[1]=1783249530434030611L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_8 = new BitSet(mk_tokenSet_8());
	private static final long[] mk_tokenSet_9() {
		long[] data = new long[12];
		data[0]=9007202610184192L;
		return data;
	}
	public static final BitSet _tokenSet_9 = new BitSet(mk_tokenSet_9());
	private static final long[] mk_tokenSet_10() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=18014398500830975L;
		data[5]=12884901888L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_10 = new BitSet(mk_tokenSet_10());
	private static final long[] mk_tokenSet_11() {
		long[] data = new long[24];
		data[1]=2048L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=18014398500830975L;
		data[5]=12884901888L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_11 = new BitSet(mk_tokenSet_11());
	private static final long[] mk_tokenSet_12() {
		long[] data = new long[12];
		data[0]=4611897262099936112L;
		data[1]=1729742896541794320L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_12 = new BitSet(mk_tokenSet_12());
	private static final long[] mk_tokenSet_13() {
		long[] data = new long[24];
		data[0]=2097152L;
		data[1]=53788108830801920L;
		data[2]=-18153899045170048L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=176093659136L;
		data[10]=2017612633061982208L;
		data[11]=6332416L;
		return data;
	}
	public static final BitSet _tokenSet_13 = new BitSet(mk_tokenSet_13());
	private static final long[] mk_tokenSet_14() {
		long[] data = new long[12];
		data[0]=4611686018427387904L;
		data[1]=268435456L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_14 = new BitSet(mk_tokenSet_14());
	private static final long[] mk_tokenSet_15() {
		long[] data = new long[24];
		data[0]=-4610560118507438080L;
		data[1]=33947651L;
		data[2]=-18155015669558272L;
		data[3]=-33554433L;
		data[4]=72057594029276927L;
		data[5]=4050158387424L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_15 = new BitSet(mk_tokenSet_15());
	private static final long[] mk_tokenSet_16() {
		long[] data = new long[24];
		data[0]=4611897262133490546L;
		data[1]=1729769284820860952L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295000576L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_16 = new BitSet(mk_tokenSet_16());
	private static final long[] mk_tokenSet_17() {
		long[] data = new long[12];
		data[1]=26388279066624L;
		data[3]=128L;
		return data;
	}
	public static final BitSet _tokenSet_17 = new BitSet(mk_tokenSet_17());
	private static final long[] mk_tokenSet_18() {
		long[] data = new long[12];
		data[2]=9007199254740992L;
		data[3]=12L;
		return data;
	}
	public static final BitSet _tokenSet_18 = new BitSet(mk_tokenSet_18());
	private static final long[] mk_tokenSet_19() {
		long[] data = new long[12];
		data[0]=4611897283608327026L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[3]=1048576L;
		data[4]=3458764518115508224L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_19 = new BitSet(mk_tokenSet_19());
	private static final long[] mk_tokenSet_20() {
		long[] data = new long[24];
		data[0]=-4148729862108466190L;
		data[1]=1783249530434030619L;
		data[2]=-134965482234627L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_20 = new BitSet(mk_tokenSet_20());
	private static final long[] mk_tokenSet_21() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896542318616L;
		data[2]=145529766140L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_21 = new BitSet(mk_tokenSet_21());
	private static final long[] mk_tokenSet_22() {
		long[] data = new long[24];
		data[0]=-4148729870966836238L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_22 = new BitSet(mk_tokenSet_22());
	private static final long[] mk_tokenSet_23() {
		long[] data = new long[12];
		data[0]=4611686018427400192L;
		data[1]=402653184L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_23 = new BitSet(mk_tokenSet_23());
	private static final long[] mk_tokenSet_24() {
		long[] data = new long[24];
		data[0]=1125899915755520L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387552L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_24 = new BitSet(mk_tokenSet_24());
	private static final long[] mk_tokenSet_25() {
		long[] data = new long[24];
		data[1]=281474976710656L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=176093659136L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_25 = new BitSet(mk_tokenSet_25());
	private static final long[] mk_tokenSet_26() {
		long[] data = new long[24];
		data[0]=2097152L;
		data[1]=38306985111715840L;
		data[2]=137438953600L;
		data[11]=8192L;
		return data;
	}
	public static final BitSet _tokenSet_26 = new BitSet(mk_tokenSet_26());
	private static final long[] mk_tokenSet_27() {
		long[] data = new long[12];
		data[0]=-9223372036854775808L;
		data[1]=1L;
		data[2]=67108864L;
		data[4]=2251799813685248L;
		data[5]=8589934592L;
		return data;
	}
	public static final BitSet _tokenSet_27 = new BitSet(mk_tokenSet_27());
	private static final long[] mk_tokenSet_28() {
		long[] data = new long[12];
		data[0]=4647926063447421810L;
		data[1]=6341428914969182232L;
		data[2]=18014544039248124L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_28 = new BitSet(mk_tokenSet_28());
	private static final long[] mk_tokenSet_29() {
		long[] data = new long[24];
		data[0]=-1266426040730242062L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_29 = new BitSet(mk_tokenSet_29());
	private static final long[] mk_tokenSet_30() {
		long[] data = new long[12];
		data[1]=2048L;
		data[2]=281474976710656L;
		data[3]=9007474149425152L;
		data[4]=516L;
		return data;
	}
	public static final BitSet _tokenSet_30 = new BitSet(mk_tokenSet_30());
	private static final long[] mk_tokenSet_31() {
		long[] data = new long[24];
		data[1]=2048L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=40532396637683455L;
		data[5]=12884901984L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_31 = new BitSet(mk_tokenSet_31());
	private static final long[] mk_tokenSet_32() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896545988632L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_32 = new BitSet(mk_tokenSet_32());
	private static final long[] mk_tokenSet_33() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_33 = new BitSet(mk_tokenSet_33());
	private static final long[] mk_tokenSet_34() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=176093659136L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_34 = new BitSet(mk_tokenSet_34());
	private static final long[] mk_tokenSet_35() {
		long[] data = new long[24];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295000576L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_35 = new BitSet(mk_tokenSet_35());
	private static final long[] mk_tokenSet_36() {
		long[] data = new long[12];
		data[0]=703687441776640L;
		data[3]=65536L;
		return data;
	}
	public static final BitSet _tokenSet_36 = new BitSet(mk_tokenSet_36());
	private static final long[] mk_tokenSet_37() {
		long[] data = new long[12];
		data[2]=1125899906842624L;
		data[3]=140737488420864L;
		return data;
	}
	public static final BitSet _tokenSet_37 = new BitSet(mk_tokenSet_37());
	private static final long[] mk_tokenSet_38() {
		long[] data = new long[12];
		data[4]=36028797018963968L;
		data[5]=8589934688L;
		return data;
	}
	public static final BitSet _tokenSet_38 = new BitSet(mk_tokenSet_38());
	private static final long[] mk_tokenSet_39() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=184683593728L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_39 = new BitSet(mk_tokenSet_39());
	private static final long[] mk_tokenSet_40() {
		long[] data = new long[12];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33536L;
		return data;
	}
	public static final BitSet _tokenSet_40 = new BitSet(mk_tokenSet_40());
	private static final long[] mk_tokenSet_41() {
		long[] data = new long[24];
		data[0]=1125899915755520L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_41 = new BitSet(mk_tokenSet_41());
	private static final long[] mk_tokenSet_42() {
		long[] data = new long[24];
		data[0]=4613023162049246066L;
		data[1]=1729742896575741982L;
		data[2]=-18154870072683396L;
		data[3]=-33554433L;
		data[4]=3530822107849817855L;
		data[5]=4050183946976L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_42 = new BitSet(mk_tokenSet_42());
	private static final long[] mk_tokenSet_43() {
		long[] data = new long[12];
		data[0]=4611897262099936112L;
		data[1]=1729742896541794312L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_43 = new BitSet(mk_tokenSet_43());
	private static final long[] mk_tokenSet_44() {
		long[] data = new long[12];
		data[4]=36028797018963968L;
		data[5]=96L;
		return data;
	}
	public static final BitSet _tokenSet_44 = new BitSet(mk_tokenSet_44());
	private static final long[] mk_tokenSet_45() {
		long[] data = new long[24];
		data[0]=4611897266436846450L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3517311308967706367L;
		data[5]=4050154193504L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_45 = new BitSet(mk_tokenSet_45());
	private static final long[] mk_tokenSet_46() {
		long[] data = new long[24];
		data[0]=-4148729870966836238L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158914528L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_46 = new BitSet(mk_tokenSet_46());
	private static final long[] mk_tokenSet_47() {
		long[] data = new long[24];
		data[0]=8388608L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050154160224L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_47 = new BitSet(mk_tokenSet_47());
	private static final long[] mk_tokenSet_48() {
		long[] data = new long[12];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_48 = new BitSet(mk_tokenSet_48());
	private static final long[] mk_tokenSet_49() {
		long[] data = new long[24];
		data[0]=278528L;
		data[2]=-18102359437618176L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_49 = new BitSet(mk_tokenSet_49());
	private static final long[] mk_tokenSet_50() {
		long[] data = new long[24];
		data[0]=-4148729870966836238L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119936L;
		return data;
	}
	public static final BitSet _tokenSet_50 = new BitSet(mk_tokenSet_50());
	private static final long[] mk_tokenSet_51() {
		long[] data = new long[12];
		data[0]=4611897262133556082L;
		data[1]=1729742896541794328L;
		data[2]=18029937202036860L;
		data[4]=3458765063576354816L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_51 = new BitSet(mk_tokenSet_51());
	private static final long[] mk_tokenSet_52() {
		long[] data = new long[24];
		data[0]=-3572269118663412750L;
		data[1]=1783249530434030619L;
		data[2]=-126169389212419L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7120768L;
		return data;
	}
	public static final BitSet _tokenSet_52 = new BitSet(mk_tokenSet_52());
	private static final long[] mk_tokenSet_53() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=18014544039247996L;
		data[4]=3458765063576354816L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_53 = new BitSet(mk_tokenSet_53());
	private static final long[] mk_tokenSet_54() {
		long[] data = new long[24];
		data[0]=-3572269118663412750L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7120768L;
		return data;
	}
	public static final BitSet _tokenSet_54 = new BitSet(mk_tokenSet_54());
	private static final long[] mk_tokenSet_55() {
		long[] data = new long[24];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=184683627008L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_55 = new BitSet(mk_tokenSet_55());
	private static final long[] mk_tokenSet_56() {
		long[] data = new long[24];
		data[0]=17188257792L;
		data[1]=140737488355328L;
		data[2]=-18155135987362816L;
		data[3]=-33554433L;
		data[4]=40532396637683455L;
		data[5]=4294967392L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_56 = new BitSet(mk_tokenSet_56());
	private static final long[] mk_tokenSet_57() {
		long[] data = new long[24];
		data[1]=4096L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_57 = new BitSet(mk_tokenSet_57());
	private static final long[] mk_tokenSet_58() {
		long[] data = new long[12];
		data[0]=4611897266428457842L;
		data[1]=1729742896541796376L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_58 = new BitSet(mk_tokenSet_58());
	private static final long[] mk_tokenSet_59() {
		long[] data = new long[12];
		data[0]=-4611685984066588672L;
		data[1]=354418688L;
		data[2]=1073741824L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_59 = new BitSet(mk_tokenSet_59());
	private static final long[] mk_tokenSet_60() {
		long[] data = new long[12];
		data[0]=-4611685984066588672L;
		data[1]=576460752657842176L;
		data[2]=1073741824L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_60 = new BitSet(mk_tokenSet_60());
	private static final long[] mk_tokenSet_61() {
		long[] data = new long[24];
		data[0]=8388608L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4032974290944L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_61 = new BitSet(mk_tokenSet_61());
	private static final long[] mk_tokenSet_62() {
		long[] data = new long[24];
		data[0]=4611897266436846450L;
		data[1]=1729742896541794304L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3517311308967706367L;
		data[5]=4050154192992L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_62 = new BitSet(mk_tokenSet_62());
	private static final long[] mk_tokenSet_63() {
		long[] data = new long[12];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794304L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_63 = new BitSet(mk_tokenSet_63());
	private static final long[] mk_tokenSet_64() {
		long[] data = new long[24];
		data[0]=4649051963363177330L;
		data[1]=6341428915003129882L;
		data[2]=-140471697419012L;
		data[3]=-33554433L;
		data[4]=3517311308967706367L;
		data[5]=4050158455648L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_64 = new BitSet(mk_tokenSet_64());
	private static final long[] mk_tokenSet_65() {
		long[] data = new long[24];
		data[0]=4654436392486646642L;
		data[1]=-2881802384262457224L;
		data[2]=-124648742464002L;
		data[3]=-33554433L;
		data[4]=3472275312694001407L;
		data[5]=4295066368L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_65 = new BitSet(mk_tokenSet_65());
	private static final long[] mk_tokenSet_66() {
		long[] data = new long[24];
		data[2]=-18155135997717504L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_66 = new BitSet(mk_tokenSet_66());
	private static final long[] mk_tokenSet_67() {
		long[] data = new long[12];
		data[0]=4654436375306711922L;
		data[1]=1729883634030149656L;
		data[2]=145800298620L;
		data[3]=1729382256910270464L;
		data[4]=3458764513820540928L;
		data[5]=101120L;
		return data;
	}
	public static final BitSet _tokenSet_67 = new BitSet(mk_tokenSet_67());
	private static final long[] mk_tokenSet_68() {
		long[] data = new long[24];
		data[0]=-4107282868819381262L;
		data[1]=6395076286350359807L;
		data[2]=-126168976073217L;
		data[3]=-33554433L;
		data[4]=-1080863910577570049L;
		data[5]=4050187697151L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7185408L;
		return data;
	}
	public static final BitSet _tokenSet_68 = new BitSet(mk_tokenSet_68());
	private static final long[] mk_tokenSet_69() {
		long[] data = new long[12];
		data[0]=4654436375306842994L;
		data[1]=1729883634030149656L;
		data[2]=145800298620L;
		data[3]=1729382256910270464L;
		data[4]=3458764513820540928L;
		data[5]=101120L;
		return data;
	}
	public static final BitSet _tokenSet_69 = new BitSet(mk_tokenSet_69());
	private static final long[] mk_tokenSet_70() {
		long[] data = new long[12];
		data[0]=4613903974365410162L;
		data[1]=1729883634030149656L;
		data[2]=145800298620L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_70 = new BitSet(mk_tokenSet_70());
	private static final long[] mk_tokenSet_71() {
		long[] data = new long[24];
		data[0]=-4143345475820964878L;
		data[1]=1783390267922410523L;
		data[2]=-18149363721184003L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_71 = new BitSet(mk_tokenSet_71());
	private static final long[] mk_tokenSet_72() {
		long[] data = new long[22];
		data[0]=8589934592L;
		data[2]=2323857442082914304L;
		data[3]=52778170318848L;
		data[4]=8192L;
		data[10]=288230376151711744L;
		return data;
	}
	public static final BitSet _tokenSet_72 = new BitSet(mk_tokenSet_72());
	private static final long[] mk_tokenSet_73() {
		long[] data = new long[12];
		data[0]=4649932792859210610L;
		data[1]=6341569652458100856L;
		data[2]=18014544309780734L;
		data[3]=1048576L;
		data[4]=3458764518115508224L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_73 = new BitSet(mk_tokenSet_73());
	private static final long[] mk_tokenSet_74() {
		long[] data = new long[24];
		data[0]=-72091412678036494L;
		data[1]=6395076286349835419L;
		data[2]=-134965211702017L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_74 = new BitSet(mk_tokenSet_74());
	private static final long[] mk_tokenSet_75() {
		long[] data = new long[12];
		data[0]=4613903995840246642L;
		data[1]=1729883634030149656L;
		data[2]=145800298620L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_75 = new BitSet(mk_tokenSet_75());
	private static final long[] mk_tokenSet_76() {
		long[] data = new long[24];
		data[0]=-4107316670212066318L;
		data[1]=1783390267922410523L;
		data[2]=-134965211702019L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_76 = new BitSet(mk_tokenSet_76());
	private static final long[] mk_tokenSet_77() {
		long[] data = new long[12];
		data[0]=4613903978660377458L;
		data[1]=1729883634030149656L;
		data[2]=145800298620L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_77 = new BitSet(mk_tokenSet_77());
	private static final long[] mk_tokenSet_78() {
		long[] data = new long[24];
		data[0]=-4143345467231030286L;
		data[1]=1783390267922410523L;
		data[2]=-134965211702019L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_78 = new BitSet(mk_tokenSet_78());
	private static final long[] mk_tokenSet_79() {
		long[] data = new long[12];
		data[0]=4616400883252474738L;
		data[1]=4035585905755492376L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_79 = new BitSet(mk_tokenSet_79());
	private static final long[] mk_tokenSet_80() {
		long[] data = new long[12];
		data[0]=4613903974365410162L;
		data[1]=1729883634030149656L;
		data[2]=140883288653948L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_80 = new BitSet(mk_tokenSet_80());
	private static final long[] mk_tokenSet_81() {
		long[] data = new long[12];
		data[0]=2147449720274944L;
		data[1]=140737488355328L;
		data[2]=270532608L;
		return data;
	}
	public static final BitSet _tokenSet_81 = new BitSet(mk_tokenSet_81());
	private static final long[] mk_tokenSet_82() {
		long[] data = new long[24];
		data[0]=4613903999598867314L;
		data[1]=1729883634064121882L;
		data[2]=-18154869936368516L;
		data[3]=-33554433L;
		data[4]=3530822107849817855L;
		data[5]=4050158453600L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_82 = new BitSet(mk_tokenSet_82());
	private static final long[] mk_tokenSet_83() {
		long[] data = new long[12];
		data[0]=4613339890511262578L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_83 = new BitSet(mk_tokenSet_83());
	private static final long[] mk_tokenSet_84() {
		long[] data = new long[24];
		data[0]=-4143909525286013966L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_84 = new BitSet(mk_tokenSet_84());
	private static final long[] mk_tokenSet_85() {
		long[] data = new long[12];
		data[0]=1442628377772032L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_85 = new BitSet(mk_tokenSet_85());
	private static final long[] mk_tokenSet_86() {
		long[] data = new long[24];
		data[0]=4613903974365688690L;
		data[1]=1729883634030149656L;
		data[2]=-18102213637319556L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295066368L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_86 = new BitSet(mk_tokenSet_86());
	private static final long[] mk_tokenSet_87() {
		long[] data = new long[24];
		data[0]=1125903690629120L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_87 = new BitSet(mk_tokenSet_87());
	private static final long[] mk_tokenSet_88() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_88 = new BitSet(mk_tokenSet_88());
	private static final long[] mk_tokenSet_89() {
		long[] data = new long[24];
		data[0]=-4143909525822884878L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_89 = new BitSet(mk_tokenSet_89());
	private static final long[] mk_tokenSet_90() {
		long[] data = new long[12];
		data[0]=1442628377772032L;
		data[3]=36028797018963968L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_90 = new BitSet(mk_tokenSet_90());
	private static final long[] mk_tokenSet_91() {
		long[] data = new long[24];
		data[0]=4647926076332323698L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295000576L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_91 = new BitSet(mk_tokenSet_91());
	private static final long[] mk_tokenSet_92() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33536L;
		return data;
	}
	public static final BitSet _tokenSet_92 = new BitSet(mk_tokenSet_92());
	private static final long[] mk_tokenSet_93() {
		long[] data = new long[12];
		data[0]=4616400866055828338L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=33536L;
		return data;
	}
	public static final BitSet _tokenSet_93 = new BitSet(mk_tokenSet_93());
	private static final long[] mk_tokenSet_94() {
		long[] data = new long[12];
		data[0]=4647926059152454514L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764513820540944L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_94 = new BitSet(mk_tokenSet_94());
	private static final long[] mk_tokenSet_95() {
		long[] data = new long[24];
		data[0]=-4148729870966836238L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=6629298651489370112L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_95 = new BitSet(mk_tokenSet_95());
	private static final long[] mk_tokenSet_96() {
		long[] data = new long[24];
		data[0]=4653555558716552050L;
		data[1]=1729742896575741978L;
		data[2]=-18154870204803972L;
		data[3]=-33554433L;
		data[4]=3530822107849817855L;
		data[5]=4050158387936L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_96 = new BitSet(mk_tokenSet_96());
	private static final long[] mk_tokenSet_97() {
		long[] data = new long[12];
		data[5]=25296992L;
		return data;
	}
	public static final BitSet _tokenSet_97 = new BitSet(mk_tokenSet_97());
	private static final long[] mk_tokenSet_98() {
		long[] data = new long[12];
		data[2]=134217728L;
		data[5]=262272L;
		return data;
	}
	public static final BitSet _tokenSet_98 = new BitSet(mk_tokenSet_98());
	private static final long[] mk_tokenSet_99() {
		long[] data = new long[24];
		data[0]=1125899915755520L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050154192896L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_99 = new BitSet(mk_tokenSet_99());
	private static final long[] mk_tokenSet_100() {
		long[] data = new long[24];
		data[1]=393216L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_100 = new BitSet(mk_tokenSet_100());
	private static final long[] mk_tokenSet_101() {
		long[] data = new long[24];
		data[0]=4663477401723941746L;
		data[1]=6341569652462319868L;
		data[2]=-131795450341890L;
		data[3]=-33554433L;
		data[4]=-5710564327514439937L;
		data[5]=184712412159L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_101 = new BitSet(mk_tokenSet_101());
	private static final long[] mk_tokenSet_102() {
		long[] data = new long[24];
		data[0]=-9222246136939020288L;
		data[1]=33947651L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158452960L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_102 = new BitSet(mk_tokenSet_102());
	private static final long[] mk_tokenSet_103() {
		long[] data = new long[24];
		data[0]=4663477401723941746L;
		data[1]=6341569652462319868L;
		data[2]=-131795450341890L;
		data[3]=-33554433L;
		data[4]=-5724075126396551425L;
		data[5]=184712412159L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_103 = new BitSet(mk_tokenSet_103());
	private static final long[] mk_tokenSet_104() {
		long[] data = new long[24];
		data[0]=-72057602695138318L;
		data[1]=-2828295750370197505L;
		data[2]=-71193377907201L;
		data[3]=-33554433L;
		data[4]=-1080863910577570049L;
		data[5]=4050187697151L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_104 = new BitSet(mk_tokenSet_104());
	private static final long[] mk_tokenSet_105() {
		long[] data = new long[24];
		data[0]=4663477401723941746L;
		data[1]=6341569652462319868L;
		data[2]=-131795450341890L;
		data[3]=-33554433L;
		data[4]=-5715067927141810433L;
		data[5]=184712412159L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_105 = new BitSet(mk_tokenSet_105());
	private static final long[] mk_tokenSet_106() {
		long[] data = new long[24];
		data[0]=-9222246136939020288L;
		data[1]=33947651L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158452832L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_106 = new BitSet(mk_tokenSet_106());
	private static final long[] mk_tokenSet_107() {
		long[] data = new long[24];
		data[0]=-9222246136939020288L;
		data[1]=33947651L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_107 = new BitSet(mk_tokenSet_107());
	private static final long[] mk_tokenSet_108() {
		long[] data = new long[24];
		data[0]=1125899932532736L;
		data[1]=36045826L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_108 = new BitSet(mk_tokenSet_108());
	private static final long[] mk_tokenSet_109() {
		long[] data = new long[24];
		data[0]=4612838031761080320L;
		data[1]=36045830L;
		data[2]=-18155015602449408L;
		data[3]=-33554433L;
		data[4]=-9151314442825498881L;
		data[5]=4050187106559L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_109 = new BitSet(mk_tokenSet_109());
	private static final long[] mk_tokenSet_110() {
		long[] data = new long[24];
		data[0]=4612811918343143424L;
		data[1]=33947654L;
		data[2]=-18155015602449408L;
		data[3]=-33554433L;
		data[4]=72057594029276927L;
		data[5]=4050183946464L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_110 = new BitSet(mk_tokenSet_110());
	private static final long[] mk_tokenSet_111() {
		long[] data = new long[24];
		data[0]=1125899915755520L;
		data[1]=36045826L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_111 = new BitSet(mk_tokenSet_111());
	private static final long[] mk_tokenSet_112() {
		long[] data = new long[24];
		data[0]=4649078093960983410L;
		data[1]=6341428915003691134L;
		data[2]=-140471554812418L;
		data[3]=-33554433L;
		data[4]=-5692549929004957953L;
		data[5]=4050187172863L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_112 = new BitSet(mk_tokenSet_112());
	private static final long[] mk_tokenSet_113() {
		long[] data = new long[24];
		data[0]=1128098939011072L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_113 = new BitSet(mk_tokenSet_113());
	private static final long[] mk_tokenSet_114() {
		long[] data = new long[24];
		data[0]=1130297962266624L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4050158387296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_114 = new BitSet(mk_tokenSet_114());
	private static final long[] mk_tokenSet_115() {
		long[] data = new long[12];
		data[0]=-9223372036854775808L;
		data[1]=768L;
		return data;
	}
	public static final BitSet _tokenSet_115 = new BitSet(mk_tokenSet_115());
	private static final long[] mk_tokenSet_116() {
		long[] data = new long[24];
		data[0]=1125904214917120L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=72057594029276927L;
		data[5]=4050158387424L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_116 = new BitSet(mk_tokenSet_116());
	private static final long[] mk_tokenSet_117() {
		long[] data = new long[24];
		data[0]=1125899919949824L;
		data[1]=33947650L;
		data[2]=-18155015736667136L;
		data[3]=-33554433L;
		data[4]=72057594029276927L;
		data[5]=4050158387424L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_117 = new BitSet(mk_tokenSet_117());
	private static final long[] mk_tokenSet_118() {
		long[] data = new long[12];
		data[0]=4647926063447421810L;
		data[1]=6341428914969219128L;
		data[2]=18014544039248126L;
		data[4]=3458764513820540928L;
		data[5]=98816L;
		return data;
	}
	public static final BitSet _tokenSet_118 = new BitSet(mk_tokenSet_118());
	private static final long[] mk_tokenSet_119() {
		long[] data = new long[24];
		data[0]=-72057603232287758L;
		data[1]=6395076286350359807L;
		data[2]=-126168976073217L;
		data[3]=-33554433L;
		data[4]=-1080863910577570049L;
		data[5]=4050187697151L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_119 = new BitSet(mk_tokenSet_119());
	private static final long[] mk_tokenSet_120() {
		long[] data = new long[24];
		data[0]=-9222246136934825984L;
		data[1]=33947651L;
		data[2]=-18155015669558272L;
		data[3]=-33554433L;
		data[4]=72057594029276927L;
		data[5]=4050158387424L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_120 = new BitSet(mk_tokenSet_120());
	private static final long[] mk_tokenSet_121() {
		long[] data = new long[24];
		data[0]=4653555562994742130L;
		data[1]=6341428915007887486L;
		data[2]=-140471496092418L;
		data[3]=-33554433L;
		data[4]=3530822107849817855L;
		data[5]=4050184014816L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_121 = new BitSet(mk_tokenSet_121());
	private static final long[] mk_tokenSet_122() {
		long[] data = new long[24];
		data[0]=1125899919949824L;
		data[1]=33947650L;
		data[2]=-18155015669558272L;
		data[3]=-33554433L;
		data[4]=72057594029276927L;
		data[5]=4050158387424L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_122 = new BitSet(mk_tokenSet_122());
	private static final long[] mk_tokenSet_123() {
		long[] data = new long[12];
		data[0]=4647926063447421810L;
		data[1]=6341428914969745528L;
		data[2]=18014544039248126L;
		data[4]=3458764513820540928L;
		data[5]=98816L;
		return data;
	}
	public static final BitSet _tokenSet_123 = new BitSet(mk_tokenSet_123());
	private static final long[] mk_tokenSet_124() {
		long[] data = new long[24];
		data[0]=-77475730514496526L;
		data[1]=6394935548861455515L;
		data[2]=-134965482234625L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_124 = new BitSet(mk_tokenSet_124());
	private static final long[] mk_tokenSet_125() {
		long[] data = new long[24];
		data[0]=-77475739104431118L;
		data[1]=6394935548861455515L;
		data[2]=-134965482234625L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158978016L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_125 = new BitSet(mk_tokenSet_125());
	private static final long[] mk_tokenSet_126() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=18014398500830975L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_126 = new BitSet(mk_tokenSet_126());
	private static final long[] mk_tokenSet_127() {
		long[] data = new long[24];
		data[0]=4653555562990547826L;
		data[1]=6341428915007887486L;
		data[2]=-140471563201282L;
		data[3]=-33554433L;
		data[4]=3530822107849817855L;
		data[5]=4050184012768L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_127 = new BitSet(mk_tokenSet_127());
	private static final long[] mk_tokenSet_128() {
		long[] data = new long[24];
		data[0]=4503599627370496L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=176093659136L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_128 = new BitSet(mk_tokenSet_128());
	private static final long[] mk_tokenSet_129() {
		long[] data = new long[12];
		data[0]=4647926063447421810L;
		data[1]=6341428914973939832L;
		data[2]=18014544039248126L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_129 = new BitSet(mk_tokenSet_129());
	private static final long[] mk_tokenSet_130() {
		long[] data = new long[12];
		data[2]=10092800L;
		return data;
	}
	public static final BitSet _tokenSet_130 = new BitSet(mk_tokenSet_130());
	private static final long[] mk_tokenSet_131() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=18014398500830975L;
		data[5]=4295000064L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_131 = new BitSet(mk_tokenSet_131());
	private static final long[] mk_tokenSet_132() {
		long[] data = new long[24];
		data[0]=4503599627370496L;
		data[2]=-18155135997717504L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_132 = new BitSet(mk_tokenSet_132());
	private static final long[] mk_tokenSet_133() {
		long[] data = new long[24];
		data[2]=-18155135997717504L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_133 = new BitSet(mk_tokenSet_133());
	private static final long[] mk_tokenSet_134() {
		long[] data = new long[12];
		data[0]=4647926080627356530L;
		data[1]=6341428914969743480L;
		data[2]=18029937228907006L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_134 = new BitSet(mk_tokenSet_134());
	private static final long[] mk_tokenSet_135() {
		long[] data = new long[24];
		data[0]=4652429680254727026L;
		data[1]=6341428914969743480L;
		data[2]=-125198768548354L;
		data[3]=-33554433L;
		data[4]=3476778912321371903L;
		data[5]=4295066368L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_135 = new BitSet(mk_tokenSet_135());
	private static final long[] mk_tokenSet_136() {
		long[] data = new long[12];
		data[0]=8388608L;
		data[4]=54043195528445952L;
		data[5]=4028679389248L;
		return data;
	}
	public static final BitSet _tokenSet_136 = new BitSet(mk_tokenSet_136());
	private static final long[] mk_tokenSet_137() {
		long[] data = new long[24];
		data[0]=-72057603232287758L;
		data[1]=6395076286350359807L;
		data[2]=-126168959296001L;
		data[3]=-33554433L;
		data[4]=-1080863910577570049L;
		data[5]=4050187697151L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_137 = new BitSet(mk_tokenSet_137());
	private static final long[] mk_tokenSet_138() {
		long[] data = new long[24];
		data[0]=9007199254806528L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4295000064L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_138 = new BitSet(mk_tokenSet_138());
	private static final long[] mk_tokenSet_139() {
		long[] data = new long[12];
		data[0]=4647926080627290994L;
		data[1]=6341428914969743480L;
		data[2]=18014544066118142L;
		data[4]=3458764513820540928L;
		data[5]=99072L;
		return data;
	}
	public static final BitSet _tokenSet_139 = new BitSet(mk_tokenSet_139());
	private static final long[] mk_tokenSet_140() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=18014398500830975L;
		data[5]=12884934656L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_140 = new BitSet(mk_tokenSet_140());
	private static final long[] mk_tokenSet_141() {
		long[] data = new long[24];
		data[0]=9007199254806528L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967552L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_141 = new BitSet(mk_tokenSet_141());
	private static final long[] mk_tokenSet_142() {
		long[] data = new long[24];
		data[0]=9007199254806528L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_142 = new BitSet(mk_tokenSet_142());
	private static final long[] mk_tokenSet_143() {
		long[] data = new long[24];
		data[0]=13510798882177024L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4295033088L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_143 = new BitSet(mk_tokenSet_143());
	private static final long[] mk_tokenSet_144() {
		long[] data = new long[12];
		data[0]=4647926063447421810L;
		data[1]=6341428914969182232L;
		data[2]=145529766140L;
		data[4]=3458764513820540928L;
		data[5]=33280L;
		return data;
	}
	public static final BitSet _tokenSet_144 = new BitSet(mk_tokenSet_144());
	private static final long[] mk_tokenSet_145() {
		long[] data = new long[12];
		data[2]=4611686018427387904L;
		data[3]=70369281048576L;
		return data;
	}
	public static final BitSet _tokenSet_145 = new BitSet(mk_tokenSet_145());
	private static final long[] mk_tokenSet_146() {
		long[] data = new long[12];
		data[3]=74767327559680L;
		return data;
	}
	public static final BitSet _tokenSet_146 = new BitSet(mk_tokenSet_146());
	private static final long[] mk_tokenSet_147() {
		long[] data = new long[12];
		data[0]=4611897262099936112L;
		data[1]=1729742896541794304L;
		data[2]=145529766012L;
		data[4]=3458764513820540928L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_147 = new BitSet(mk_tokenSet_147());
	private static final long[] mk_tokenSet_148() {
		long[] data = new long[12];
		data[0]=34603010L;
		data[1]=16L;
		return data;
	}
	public static final BitSet _tokenSet_148 = new BitSet(mk_tokenSet_148());
	private static final long[] mk_tokenSet_149() {
		long[] data = new long[24];
		data[0]=5044242826361058162L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=8074954131866648319L;
		data[5]=12884935168L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_149 = new BitSet(mk_tokenSet_149());
	private static final long[] mk_tokenSet_150() {
		long[] data = new long[12];
		data[0]=40532400941301760L;
		data[5]=8590033664L;
		return data;
	}
	public static final BitSet _tokenSet_150 = new BitSet(mk_tokenSet_150());
	private static final long[] mk_tokenSet_151() {
		long[] data = new long[24];
		data[0]=4503599627649024L;
		data[2]=-18102359437618176L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967296L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_151 = new BitSet(mk_tokenSet_151());
	private static final long[] mk_tokenSet_152() {
		long[] data = new long[12];
		data[0]=4647926063413867376L;
		data[1]=1729742896541794308L;
		data[2]=74309539381379196L;
		data[3]=4294967296L;
		data[4]=3458764513820557376L;
		data[5]=32768L;
		return data;
	}
	public static final BitSet _tokenSet_152 = new BitSet(mk_tokenSet_152());
	private static final long[] mk_tokenSet_153() {
		long[] data = new long[12];
		data[3]=292733975779082240L;
		data[4]=1024L;
		return data;
	}
	public static final BitSet _tokenSet_153 = new BitSet(mk_tokenSet_153());
	private static final long[] mk_tokenSet_154() {
		long[] data = new long[24];
		data[0]=4617526761676616562L;
		data[1]=1729742896575741982L;
		data[2]=-18154870072683396L;
		data[3]=-33554433L;
		data[4]=3530822107849817855L;
		data[5]=4050183949280L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_154 = new BitSet(mk_tokenSet_154());
	private static final long[] mk_tokenSet_155() {
		long[] data = new long[24];
		data[0]=8388608L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4024384356352L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_155 = new BitSet(mk_tokenSet_155());
	private static final long[] mk_tokenSet_156() {
		long[] data = new long[24];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3517311308967706367L;
		data[5]=4024384389888L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_156 = new BitSet(mk_tokenSet_156());
	private static final long[] mk_tokenSet_157() {
		long[] data = new long[24];
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=58546795147165439L;
		data[5]=4024384356352L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_157 = new BitSet(mk_tokenSet_157());
	private static final long[] mk_tokenSet_158() {
		long[] data = new long[12];
		data[4]=54043195528445952L;
		data[5]=4020089389056L;
		return data;
	}
	public static final BitSet _tokenSet_158 = new BitSet(mk_tokenSet_158());
	private static final long[] mk_tokenSet_159() {
		long[] data = new long[24];
		data[0]=-9214364837600034816L;
		data[5]=256L;
		data[11]=64L;
		return data;
	}
	public static final BitSet _tokenSet_159 = new BitSet(mk_tokenSet_159());
	private static final long[] mk_tokenSet_160() {
		long[] data = new long[24];
		data[0]=-4602467575466544270L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[3]=72057594037927936L;
		data[4]=3458764513820540928L;
		data[5]=33536L;
		data[11]=64L;
		return data;
	}
	public static final BitSet _tokenSet_160 = new BitSet(mk_tokenSet_160());
	private static final long[] mk_tokenSet_161() {
		long[] data = new long[12];
		data[0]=4611897262133490546L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[3]=72057594037927936L;
		data[4]=3458764513820540928L;
		data[5]=33536L;
		return data;
	}
	public static final BitSet _tokenSet_161 = new BitSet(mk_tokenSet_161());
	private static final long[] mk_tokenSet_162() {
		long[] data = new long[12];
		data[5]=180388626432L;
		return data;
	}
	public static final BitSet _tokenSet_162 = new BitSet(mk_tokenSet_162());
	private static final long[] mk_tokenSet_163() {
		long[] data = new long[24];
		data[1]=4096L;
		data[2]=-18155135995751424L;
		data[3]=-33554433L;
		data[4]=4503599618719487L;
		data[5]=4294967552L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_163 = new BitSet(mk_tokenSet_163());
	private static final long[] mk_tokenSet_164() {
		long[] data = new long[24];
		data[0]=4611897266428457842L;
		data[1]=-7493629140312975336L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295066368L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_164 = new BitSet(mk_tokenSet_164());
	private static final long[] mk_tokenSet_165() {
		long[] data = new long[24];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=-140591956503428L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295000832L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_165 = new BitSet(mk_tokenSet_165());
	private static final long[] mk_tokenSet_166() {
		long[] data = new long[24];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=-18154990465985412L;
		data[3]=-33554433L;
		data[4]=3463268113439260415L;
		data[5]=4295000832L;
		data[10]=2017612633061982208L;
		data[11]=6324224L;
		return data;
	}
	public static final BitSet _tokenSet_166 = new BitSet(mk_tokenSet_166());
	private static final long[] mk_tokenSet_167() {
		long[] data = new long[12];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764514894282752L;
		data[5]=35584L;
		return data;
	}
	public static final BitSet _tokenSet_167 = new BitSet(mk_tokenSet_167());
	private static final long[] mk_tokenSet_168() {
		long[] data = new long[24];
		data[0]=-16L;
		for (int i = 1; i<=3; i++) { data[i]=-1L; }
		data[4]=-1073741825L;
		for (int i = 5; i<=10; i++) { data[i]=-1L; }
		data[11]=8388607L;
		return data;
	}
	public static final BitSet _tokenSet_168 = new BitSet(mk_tokenSet_168());
	private static final long[] mk_tokenSet_169() {
		long[] data = new long[12];
		data[0]=4611897266428457842L;
		data[1]=1729742896541794328L;
		data[2]=145529766012L;
		data[4]=3458764514894282752L;
		data[5]=33536L;
		return data;
	}
	public static final BitSet _tokenSet_169 = new BitSet(mk_tokenSet_169());
	private static final long[] mk_tokenSet_170() {
		long[] data = new long[24];
		data[0]=-4148729853786967054L;
		data[1]=1783249530434030619L;
		data[2]=-18149363991716611L;
		data[3]=-33554433L;
		data[4]=8142508126277205759L;
		data[5]=4050158912480L;
		data[6]=16777216L;
		data[10]=2017612633061982208L;
		data[11]=7119872L;
		return data;
	}
	public static final BitSet _tokenSet_170 = new BitSet(mk_tokenSet_170());
	private static final long[] mk_tokenSet_171() {
		long[] data = new long[24];
		data[2]=121856L;
		data[4]=2234207627640832L;
		data[11]=819200L;
		return data;
	}
	public static final BitSet _tokenSet_171 = new BitSet(mk_tokenSet_171());
	
	}
